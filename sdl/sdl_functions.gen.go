package sdl

// Code generated by cmd/ffi2go. DO NOT EDIT.

var (
	// SDL_free => Free allocated memory.
	//
	//puregogen:library path:windows=sdl.dll path:unix=sdl.so alias=sdl
	//puregogen:function symbol=SDL_free
	ifree func(mem uintptr)

	// SDL_AsyncIOFromFile => Use this function to create a new SDL_AsyncIO object for reading from and/or writing to a named file.
	//
	//puregogen:function symbol=SDL_AsyncIOFromFile
	iAsyncIOFromFile func(file string, mode string) *AsyncIO

	// SDL_GetAsyncIOSize => Use this function to get the size of the data stream in an SDL_AsyncIO.
	//
	//puregogen:function symbol=SDL_GetAsyncIOSize
	iGetAsyncIOSize func(asyncio *AsyncIO) int64

	// SDL_ReadAsyncIO => Start an async read.
	//
	//puregogen:function symbol=SDL_ReadAsyncIO
	iReadAsyncIO func(asyncio *AsyncIO, ptr uintptr, offset uint64, size uint64, queue *AsyncIOQueue, userdata uintptr) bool

	// SDL_WriteAsyncIO => Start an async write.
	//
	//puregogen:function symbol=SDL_WriteAsyncIO
	iWriteAsyncIO func(asyncio *AsyncIO, ptr uintptr, offset uint64, size uint64, queue *AsyncIOQueue, userdata uintptr) bool

	// SDL_CloseAsyncIO => Close and free any allocated resources for an async I/O object.
	//
	//puregogen:function symbol=SDL_CloseAsyncIO
	iCloseAsyncIO func(asyncio *AsyncIO, flush bool, queue *AsyncIOQueue, userdata uintptr) bool

	// SDL_CreateAsyncIOQueue => Create a task queue for tracking multiple I/O operations.
	//
	//puregogen:function symbol=SDL_CreateAsyncIOQueue
	iCreateAsyncIOQueue func() *AsyncIOQueue

	// SDL_DestroyAsyncIOQueue => Destroy a previously-created async I/O task queue.
	//
	//puregogen:function symbol=SDL_DestroyAsyncIOQueue
	iDestroyAsyncIOQueue func(queue *AsyncIOQueue)

	// SDL_GetAsyncIOResult => Query an async I/O task queue for completed tasks.
	//
	//puregogen:function symbol=SDL_GetAsyncIOResult
	iGetAsyncIOResult func(queue *AsyncIOQueue, outcome *AsyncIOOutcome) bool

	// SDL_WaitAsyncIOResult => Block until an async I/O task queue has a completed task.
	//
	//puregogen:function symbol=SDL_WaitAsyncIOResult
	iWaitAsyncIOResult func(queue *AsyncIOQueue, outcome *AsyncIOOutcome, timeoutMS int32) bool

	// SDL_SignalAsyncIOQueue => Wake up any threads that are blocking in SDL_WaitAsyncIOResult().
	//
	//puregogen:function symbol=SDL_SignalAsyncIOQueue
	iSignalAsyncIOQueue func(queue *AsyncIOQueue)

	// SDL_LoadFileAsync => Load all the data from a file path, asynchronously.
	//
	//puregogen:function symbol=SDL_LoadFileAsync
	iLoadFileAsync func(file string, queue *AsyncIOQueue, userdata uintptr) bool

	// SDL_TryLockSpinlock => Try to lock a spin lock by setting it to a non-zero value.
	//
	//puregogen:function symbol=SDL_TryLockSpinlock
	iTryLockSpinlock func(lock *SpinLock) bool

	// SDL_LockSpinlock => Lock a spin lock by setting it to a non-zero value.
	//
	//puregogen:function symbol=SDL_LockSpinlock
	iLockSpinlock func(lock *SpinLock)

	// SDL_UnlockSpinlock => Unlock a spin lock by setting it to 0.
	//
	//puregogen:function symbol=SDL_UnlockSpinlock
	iUnlockSpinlock func(lock *SpinLock)

	// SDL_MemoryBarrierReleaseFunction => Insert a memory release barrier (function version).
	//
	//puregogen:function symbol=SDL_MemoryBarrierReleaseFunction
	iMemoryBarrierReleaseFunction func()

	// SDL_MemoryBarrierAcquireFunction => Insert a memory acquire barrier (function version).
	//
	//puregogen:function symbol=SDL_MemoryBarrierAcquireFunction
	iMemoryBarrierAcquireFunction func()

	// SDL_CompareAndSwapAtomicInt => Set an atomic variable to a new value if it is currently an old value.
	//
	//puregogen:function symbol=SDL_CompareAndSwapAtomicInt
	iCompareAndSwapAtomicInt func(a *AtomicInt, oldval int32, newval int32) bool

	// SDL_SetAtomicInt => Set an atomic variable to a value.
	//
	//puregogen:function symbol=SDL_SetAtomicInt
	iSetAtomicInt func(a *AtomicInt, v int32) int32

	// SDL_GetAtomicInt => Get the value of an atomic variable.
	//
	//puregogen:function symbol=SDL_GetAtomicInt
	iGetAtomicInt func(a *AtomicInt) int32

	// SDL_AddAtomicInt => Add to an atomic variable.
	//
	//puregogen:function symbol=SDL_AddAtomicInt
	iAddAtomicInt func(a *AtomicInt, v int32) int32

	// SDL_CompareAndSwapAtomicU32 => Set an atomic variable to a new value if it is currently an old value.
	//
	//puregogen:function symbol=SDL_CompareAndSwapAtomicU32
	iCompareAndSwapAtomicU32 func(a *AtomicU32, oldval uint32, newval uint32) bool

	// SDL_SetAtomicU32 => Set an atomic variable to a value.
	//
	//puregogen:function symbol=SDL_SetAtomicU32
	iSetAtomicU32 func(a *AtomicU32, v uint32) uint32

	// SDL_GetAtomicU32 => Get the value of an atomic variable.
	//
	//puregogen:function symbol=SDL_GetAtomicU32
	iGetAtomicU32 func(a *AtomicU32) uint32

	// SDL_CompareAndSwapAtomicPointer => Set a pointer to a new value if it is currently an old value.
	//
	//puregogen:function symbol=SDL_CompareAndSwapAtomicPointer
	iCompareAndSwapAtomicPointer func(a *uintptr, oldval uintptr, newval uintptr) bool

	// SDL_SetAtomicPointer => Set a pointer to a value atomically.
	//
	//puregogen:function symbol=SDL_SetAtomicPointer
	iSetAtomicPointer func(a *uintptr, v uintptr) uintptr

	// SDL_GetAtomicPointer => Get the value of a pointer atomically.
	//
	//puregogen:function symbol=SDL_GetAtomicPointer
	iGetAtomicPointer func(a *uintptr) uintptr

	// SDL_SetError => Set the SDL error message for the current thread.
	//
	//puregogen:function symbol=SDL_SetError
	iSetError func(fmt string) bool

	// SDL_SetErrorV => Set the SDL error message for the current thread.
	//
	//puregogen:function symbol=SDL_SetErrorV
	iSetErrorV func(fmt string, ap va_list) bool

	// SDL_OutOfMemory => Set an error indicating that memory allocation failed.
	//
	//puregogen:function symbol=SDL_OutOfMemory
	iOutOfMemory func() bool

	// SDL_GetError => Retrieve a message about the last error that occurred on the current thread.
	//
	//puregogen:function symbol=SDL_GetError
	iGetError func() string

	// SDL_ClearError => Clear any previous error message for this thread.
	//
	//puregogen:function symbol=SDL_ClearError
	iClearError func() bool

	// SDL_GetGlobalProperties => Get the global SDL properties.
	//
	//puregogen:function symbol=SDL_GetGlobalProperties
	iGetGlobalProperties func() PropertiesID

	// SDL_CreateProperties => Create a group of properties.
	//
	//puregogen:function symbol=SDL_CreateProperties
	iCreateProperties func() PropertiesID

	// SDL_CopyProperties => Copy a group of properties.
	//
	//puregogen:function symbol=SDL_CopyProperties
	iCopyProperties func(src PropertiesID, dst PropertiesID) bool

	// SDL_LockProperties => Lock a group of properties.
	//
	//puregogen:function symbol=SDL_LockProperties
	iLockProperties func(props PropertiesID) bool

	// SDL_UnlockProperties => Unlock a group of properties.
	//
	//puregogen:function symbol=SDL_UnlockProperties
	iUnlockProperties func(props PropertiesID)

	// SDL_SetPointerPropertyWithCleanup => Set a pointer property in a group of properties with a cleanup function that is called when the property is deleted.
	//
	//puregogen:function symbol=SDL_SetPointerPropertyWithCleanup
	iSetPointerPropertyWithCleanup func(props PropertiesID, name string, value uintptr, cleanup CleanupPropertyCallback, userdata uintptr) bool

	// SDL_SetPointerProperty => Set a pointer property in a group of properties.
	//
	//puregogen:function symbol=SDL_SetPointerProperty
	iSetPointerProperty func(props PropertiesID, name string, value uintptr) bool

	// SDL_SetStringProperty => Set a string property in a group of properties.
	//
	//puregogen:function symbol=SDL_SetStringProperty
	iSetStringProperty func(props PropertiesID, name string, value string) bool

	// SDL_SetNumberProperty => Set an integer property in a group of properties.
	//
	//puregogen:function symbol=SDL_SetNumberProperty
	iSetNumberProperty func(props PropertiesID, name string, value int64) bool

	// SDL_SetFloatProperty => Set a floating point property in a group of properties.
	//
	//puregogen:function symbol=SDL_SetFloatProperty
	iSetFloatProperty func(props PropertiesID, name string, value float32) bool

	// SDL_SetBooleanProperty => Set a boolean property in a group of properties.
	//
	//puregogen:function symbol=SDL_SetBooleanProperty
	iSetBooleanProperty func(props PropertiesID, name string, value bool) bool

	// SDL_HasProperty => Return whether a property exists in a group of properties.
	//
	//puregogen:function symbol=SDL_HasProperty
	iHasProperty func(props PropertiesID, name string) bool

	// SDL_GetPropertyType => Get the type of a property in a group of properties.
	//
	//puregogen:function symbol=SDL_GetPropertyType
	iGetPropertyType func(props PropertiesID, name string) PropertyType

	// SDL_GetPointerProperty => Get a pointer property from a group of properties.
	//
	//puregogen:function symbol=SDL_GetPointerProperty
	iGetPointerProperty func(props PropertiesID, name string, default_value uintptr) uintptr

	// SDL_GetStringProperty => Get a string property from a group of properties.
	//
	//puregogen:function symbol=SDL_GetStringProperty
	iGetStringProperty func(props PropertiesID, name string, default_value string) string

	// SDL_GetNumberProperty => Get a number property from a group of properties.
	//
	//puregogen:function symbol=SDL_GetNumberProperty
	iGetNumberProperty func(props PropertiesID, name string, default_value int64) int64

	// SDL_GetFloatProperty => Get a floating point property from a group of properties.
	//
	//puregogen:function symbol=SDL_GetFloatProperty
	iGetFloatProperty func(props PropertiesID, name string, default_value float32) float32

	// SDL_GetBooleanProperty => Get a boolean property from a group of properties.
	//
	//puregogen:function symbol=SDL_GetBooleanProperty
	iGetBooleanProperty func(props PropertiesID, name string, default_value bool) bool

	// SDL_ClearProperty => Clear a property from a group of properties.
	//
	//puregogen:function symbol=SDL_ClearProperty
	iClearProperty func(props PropertiesID, name string) bool

	// SDL_EnumerateProperties => Enumerate the properties contained in a group of properties.
	//
	//puregogen:function symbol=SDL_EnumerateProperties
	iEnumerateProperties func(props PropertiesID, callback EnumeratePropertiesCallback, userdata uintptr) bool

	// SDL_DestroyProperties => Destroy a group of properties.
	//
	//puregogen:function symbol=SDL_DestroyProperties
	iDestroyProperties func(props PropertiesID)

	// SDL_GetThreadName => Get the thread name as it was specified in SDL_CreateThread().
	//
	//puregogen:function symbol=SDL_GetThreadName
	iGetThreadName func(thread *Thread) string

	// SDL_GetCurrentThreadID => Get the thread identifier for the current thread.
	//
	//puregogen:function symbol=SDL_GetCurrentThreadID
	iGetCurrentThreadID func() ThreadID

	// SDL_GetThreadID => Get the thread identifier for the specified thread.
	//
	//puregogen:function symbol=SDL_GetThreadID
	iGetThreadID func(thread *Thread) ThreadID

	// SDL_SetCurrentThreadPriority => Set the priority for the current thread.
	//
	//puregogen:function symbol=SDL_SetCurrentThreadPriority
	iSetCurrentThreadPriority func(priority ThreadPriority) bool

	// SDL_WaitThread => Wait for a thread to finish.
	//
	//puregogen:function symbol=SDL_WaitThread
	iWaitThread func(thread *Thread, status *int32)

	// SDL_GetThreadState => Get the current state of a thread.
	//
	//puregogen:function symbol=SDL_GetThreadState
	iGetThreadState func(thread *Thread) ThreadState

	// SDL_DetachThread => Let a thread clean up on exit without intervention.
	//
	//puregogen:function symbol=SDL_DetachThread
	iDetachThread func(thread *Thread)

	// SDL_GetTLS => Get the current thread's value associated with a thread local storage ID.
	//
	//puregogen:function symbol=SDL_GetTLS
	iGetTLS func(id *TLSID) uintptr

	// SDL_SetTLS => Set the current thread's value associated with a thread local storage ID.
	//
	//puregogen:function symbol=SDL_SetTLS
	iSetTLS func(id *TLSID, value uintptr, destructor TLSDestructorCallback) bool

	// SDL_CleanupTLS => Cleanup all TLS data for this thread.
	//
	//puregogen:function symbol=SDL_CleanupTLS
	iCleanupTLS func()

	// SDL_CreateMutex => Create a new mutex.
	//
	//puregogen:function symbol=SDL_CreateMutex
	iCreateMutex func() *Mutex

	// SDL_LockMutex => Lock the mutex.
	//
	//puregogen:function symbol=SDL_LockMutex
	iLockMutex func(mutex *Mutex)

	// SDL_TryLockMutex => Try to lock a mutex without blocking.
	//
	//puregogen:function symbol=SDL_TryLockMutex
	iTryLockMutex func(mutex *Mutex) bool

	// SDL_UnlockMutex => Unlock the mutex.
	//
	//puregogen:function symbol=SDL_UnlockMutex
	iUnlockMutex func(mutex *Mutex)

	// SDL_DestroyMutex => Destroy a mutex created with SDL_CreateMutex().
	//
	//puregogen:function symbol=SDL_DestroyMutex
	iDestroyMutex func(mutex *Mutex)

	// SDL_CreateRWLock => Create a new read/write lock.
	//
	//puregogen:function symbol=SDL_CreateRWLock
	iCreateRWLock func() *RWLock

	// SDL_LockRWLockForReading => Lock the read/write lock for _read only_ operations.
	//
	//puregogen:function symbol=SDL_LockRWLockForReading
	iLockRWLockForReading func(rwlock *RWLock)

	// SDL_LockRWLockForWriting => Lock the read/write lock for _write_ operations.
	//
	//puregogen:function symbol=SDL_LockRWLockForWriting
	iLockRWLockForWriting func(rwlock *RWLock)

	// SDL_TryLockRWLockForReading => Try to lock a read/write lock _for reading_ without blocking.
	//
	//puregogen:function symbol=SDL_TryLockRWLockForReading
	iTryLockRWLockForReading func(rwlock *RWLock) bool

	// SDL_TryLockRWLockForWriting => Try to lock a read/write lock _for writing_ without blocking.
	//
	//puregogen:function symbol=SDL_TryLockRWLockForWriting
	iTryLockRWLockForWriting func(rwlock *RWLock) bool

	// SDL_UnlockRWLock => Unlock the read/write lock.
	//
	//puregogen:function symbol=SDL_UnlockRWLock
	iUnlockRWLock func(rwlock *RWLock)

	// SDL_DestroyRWLock => Destroy a read/write lock created with SDL_CreateRWLock().
	//
	//puregogen:function symbol=SDL_DestroyRWLock
	iDestroyRWLock func(rwlock *RWLock)

	// SDL_CreateSemaphore => Create a semaphore.
	//
	//puregogen:function symbol=SDL_CreateSemaphore
	iCreateSemaphore func(initial_value uint32) *Semaphore

	// SDL_DestroySemaphore => Destroy a semaphore.
	//
	//puregogen:function symbol=SDL_DestroySemaphore
	iDestroySemaphore func(sem *Semaphore)

	// SDL_WaitSemaphore => Wait until a semaphore has a positive value and then decrements it.
	//
	//puregogen:function symbol=SDL_WaitSemaphore
	iWaitSemaphore func(sem *Semaphore)

	// SDL_TryWaitSemaphore => See if a semaphore has a positive value and decrement it if it does.
	//
	//puregogen:function symbol=SDL_TryWaitSemaphore
	iTryWaitSemaphore func(sem *Semaphore) bool

	// SDL_WaitSemaphoreTimeout => Wait until a semaphore has a positive value and then decrements it.
	//
	//puregogen:function symbol=SDL_WaitSemaphoreTimeout
	iWaitSemaphoreTimeout func(sem *Semaphore, timeoutMS int32) bool

	// SDL_SignalSemaphore => Atomically increment a semaphore's value and wake waiting threads.
	//
	//puregogen:function symbol=SDL_SignalSemaphore
	iSignalSemaphore func(sem *Semaphore)

	// SDL_GetSemaphoreValue => Get the current value of a semaphore.
	//
	//puregogen:function symbol=SDL_GetSemaphoreValue
	iGetSemaphoreValue func(sem *Semaphore) uint32

	// SDL_CreateCondition => Create a condition variable.
	//
	//puregogen:function symbol=SDL_CreateCondition
	iCreateCondition func() *Condition

	// SDL_DestroyCondition => Destroy a condition variable.
	//
	//puregogen:function symbol=SDL_DestroyCondition
	iDestroyCondition func(cond *Condition)

	// SDL_SignalCondition => Restart one of the threads that are waiting on the condition variable.
	//
	//puregogen:function symbol=SDL_SignalCondition
	iSignalCondition func(cond *Condition)

	// SDL_BroadcastCondition => Restart all threads that are waiting on the condition variable.
	//
	//puregogen:function symbol=SDL_BroadcastCondition
	iBroadcastCondition func(cond *Condition)

	// SDL_WaitCondition => Wait until a condition variable is signaled.
	//
	//puregogen:function symbol=SDL_WaitCondition
	iWaitCondition func(cond *Condition, mutex *Mutex)

	// SDL_WaitConditionTimeout => Wait until a condition variable is signaled or a certain time has passed.
	//
	//puregogen:function symbol=SDL_WaitConditionTimeout
	iWaitConditionTimeout func(cond *Condition, mutex *Mutex, timeoutMS int32) bool

	// SDL_ShouldInit => Return whether initialization should be done.
	//
	//puregogen:function symbol=SDL_ShouldInit
	iShouldInit func(state *InitState) bool

	// SDL_ShouldQuit => Return whether cleanup should be done.
	//
	//puregogen:function symbol=SDL_ShouldQuit
	iShouldQuit func(state *InitState) bool

	// SDL_SetInitialized => Finish an initialization state transition.
	//
	//puregogen:function symbol=SDL_SetInitialized
	iSetInitialized func(state *InitState, initialized bool)

	// SDL_IOFromFile => Use this function to create a new SDL_IOStream structure for reading from and/or writing to a named file.
	//
	//puregogen:function symbol=SDL_IOFromFile
	iIOFromFile func(file string, mode string) *IOStream

	// SDL_IOFromMem => Use this function to prepare a read-write memory buffer for use with SDL_IOStream.
	//
	//puregogen:function symbol=SDL_IOFromMem
	iIOFromMem func(mem uintptr, size uintptr) *IOStream

	// SDL_IOFromConstMem => Use this function to prepare a read-only memory buffer for use with SDL_IOStream.
	//
	//puregogen:function symbol=SDL_IOFromConstMem
	iIOFromConstMem func(mem uintptr, size uintptr) *IOStream

	// SDL_IOFromDynamicMem => Use this function to create an SDL_IOStream that is backed by dynamically allocated memory.
	//
	//puregogen:function symbol=SDL_IOFromDynamicMem
	iIOFromDynamicMem func() *IOStream

	// SDL_OpenIO => Create a custom SDL_IOStream.
	//
	//puregogen:function symbol=SDL_OpenIO
	iOpenIO func(iface *IOStreamInterface, userdata uintptr) *IOStream

	// SDL_CloseIO => Close and free an allocated SDL_IOStream structure.
	//
	//puregogen:function symbol=SDL_CloseIO
	iCloseIO func(context *IOStream) bool

	// SDL_GetIOProperties => Get the properties associated with an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_GetIOProperties
	iGetIOProperties func(context *IOStream) PropertiesID

	// SDL_GetIOStatus => Query the stream status of an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_GetIOStatus
	iGetIOStatus func(context *IOStream) IOStatus

	// SDL_GetIOSize => Use this function to get the size of the data stream in an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_GetIOSize
	iGetIOSize func(context *IOStream) int64

	// SDL_SeekIO => Seek within an SDL_IOStream data stream.
	//
	//puregogen:function symbol=SDL_SeekIO
	iSeekIO func(context *IOStream, offset int64, whence IOWhence) int64

	// SDL_TellIO => Determine the current read/write offset in an SDL_IOStream data stream.
	//
	//puregogen:function symbol=SDL_TellIO
	iTellIO func(context *IOStream) int64

	// SDL_ReadIO => Read from a data source.
	//
	//puregogen:function symbol=SDL_ReadIO
	iReadIO func(context *IOStream, ptr uintptr, size uintptr) uintptr

	// SDL_WriteIO => Write to an SDL_IOStream data stream.
	//
	//puregogen:function symbol=SDL_WriteIO
	iWriteIO func(context *IOStream, ptr uintptr, size uintptr) uintptr

	// SDL_IOprintf => Print to an SDL_IOStream data stream.
	//
	//puregogen:function symbol=SDL_IOprintf
	iIOprintf func(context *IOStream, fmt string) uintptr

	// SDL_IOvprintf => Print to an SDL_IOStream data stream.
	//
	//puregogen:function symbol=SDL_IOvprintf
	iIOvprintf func(context *IOStream, fmt string, ap va_list) uintptr

	// SDL_FlushIO => Flush any buffered data in the stream.
	//
	//puregogen:function symbol=SDL_FlushIO
	iFlushIO func(context *IOStream) bool

	// SDL_LoadFile_IO => Load all the data from an SDL data stream.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_LoadFile_IO
	iLoadFile_IO func(src *IOStream, datasize *uintptr, closeio bool) uintptr

	// SDL_LoadFile => Load all the data from a file path.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_LoadFile
	iLoadFile func(file string, datasize *uintptr) uintptr

	// SDL_SaveFile_IO => Save all the data into an SDL data stream.
	//
	//puregogen:function symbol=SDL_SaveFile_IO
	iSaveFile_IO func(src *IOStream, data uintptr, datasize uintptr, closeio bool) bool

	// SDL_SaveFile => Save all the data into a file path.
	//
	//puregogen:function symbol=SDL_SaveFile
	iSaveFile func(file string, data uintptr, datasize uintptr) bool

	// SDL_ReadU8 => Use this function to read a byte from an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_ReadU8
	iReadU8 func(src *IOStream, value *uint8) bool

	// SDL_ReadS8 => Use this function to read a signed byte from an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_ReadS8
	iReadS8 func(src *IOStream, value *int8) bool

	// SDL_ReadU16LE => Use this function to read 16 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU16LE
	iReadU16LE func(src *IOStream, value *uint16) bool

	// SDL_ReadS16LE => Use this function to read 16 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS16LE
	iReadS16LE func(src *IOStream, value *int16) bool

	// SDL_ReadU16BE => Use this function to read 16 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU16BE
	iReadU16BE func(src *IOStream, value *uint16) bool

	// SDL_ReadS16BE => Use this function to read 16 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS16BE
	iReadS16BE func(src *IOStream, value *int16) bool

	// SDL_ReadU32LE => Use this function to read 32 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU32LE
	iReadU32LE func(src *IOStream, value *uint32) bool

	// SDL_ReadS32LE => Use this function to read 32 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS32LE
	iReadS32LE func(src *IOStream, value *int32) bool

	// SDL_ReadU32BE => Use this function to read 32 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU32BE
	iReadU32BE func(src *IOStream, value *uint32) bool

	// SDL_ReadS32BE => Use this function to read 32 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS32BE
	iReadS32BE func(src *IOStream, value *int32) bool

	// SDL_ReadU64LE => Use this function to read 64 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU64LE
	iReadU64LE func(src *IOStream, value *uint64) bool

	// SDL_ReadS64LE => Use this function to read 64 bits of little-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS64LE
	iReadS64LE func(src *IOStream, value *int64) bool

	// SDL_ReadU64BE => Use this function to read 64 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadU64BE
	iReadU64BE func(src *IOStream, value *uint64) bool

	// SDL_ReadS64BE => Use this function to read 64 bits of big-endian data from an SDL_IOStream and return in native format.
	//
	//puregogen:function symbol=SDL_ReadS64BE
	iReadS64BE func(src *IOStream, value *int64) bool

	// SDL_WriteU8 => Use this function to write a byte to an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_WriteU8
	iWriteU8 func(dst *IOStream, value uint8) bool

	// SDL_WriteS8 => Use this function to write a signed byte to an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_WriteS8
	iWriteS8 func(dst *IOStream, value int8) bool

	// SDL_WriteU16LE => Use this function to write 16 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteU16LE
	iWriteU16LE func(dst *IOStream, value uint16) bool

	// SDL_WriteS16LE => Use this function to write 16 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteS16LE
	iWriteS16LE func(dst *IOStream, value int16) bool

	// SDL_WriteU16BE => Use this function to write 16 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteU16BE
	iWriteU16BE func(dst *IOStream, value uint16) bool

	// SDL_WriteS16BE => Use this function to write 16 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteS16BE
	iWriteS16BE func(dst *IOStream, value int16) bool

	// SDL_WriteU32LE => Use this function to write 32 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteU32LE
	iWriteU32LE func(dst *IOStream, value uint32) bool

	// SDL_WriteS32LE => Use this function to write 32 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteS32LE
	iWriteS32LE func(dst *IOStream, value int32) bool

	// SDL_WriteU32BE => Use this function to write 32 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteU32BE
	iWriteU32BE func(dst *IOStream, value uint32) bool

	// SDL_WriteS32BE => Use this function to write 32 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteS32BE
	iWriteS32BE func(dst *IOStream, value int32) bool

	// SDL_WriteU64LE => Use this function to write 64 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteU64LE
	iWriteU64LE func(dst *IOStream, value uint64) bool

	// SDL_WriteS64LE => Use this function to write 64 bits in native format to an SDL_IOStream as little-endian data.
	//
	//puregogen:function symbol=SDL_WriteS64LE
	iWriteS64LE func(dst *IOStream, value int64) bool

	// SDL_WriteU64BE => Use this function to write 64 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteU64BE
	iWriteU64BE func(dst *IOStream, value uint64) bool

	// SDL_WriteS64BE => Use this function to write 64 bits in native format to an SDL_IOStream as big-endian data.
	//
	//puregogen:function symbol=SDL_WriteS64BE
	iWriteS64BE func(dst *IOStream, value int64) bool

	// SDL_GetNumAudioDrivers => Use this function to get the number of built-in audio drivers.
	//
	//puregogen:function symbol=SDL_GetNumAudioDrivers
	iGetNumAudioDrivers func() int32

	// SDL_GetAudioDriver => Use this function to get the name of a built in audio driver.
	//
	//puregogen:function symbol=SDL_GetAudioDriver
	iGetAudioDriver func(index int32) string

	// SDL_GetCurrentAudioDriver => Get the name of the current audio driver.
	//
	//puregogen:function symbol=SDL_GetCurrentAudioDriver
	iGetCurrentAudioDriver func() string

	// SDL_GetAudioPlaybackDevices => Get a list of currently-connected audio playback devices.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetAudioPlaybackDevices
	iGetAudioPlaybackDevices func(count *int32) uintptr

	// SDL_GetAudioRecordingDevices => Get a list of currently-connected audio recording devices.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetAudioRecordingDevices
	iGetAudioRecordingDevices func(count *int32) uintptr

	// SDL_GetAudioDeviceName => Get the human-readable name of a specific audio device.
	//
	//puregogen:function symbol=SDL_GetAudioDeviceName
	iGetAudioDeviceName func(devid AudioDeviceID) string

	// SDL_GetAudioDeviceFormat => Get the current audio format of a specific audio device.
	//
	//puregogen:function symbol=SDL_GetAudioDeviceFormat
	iGetAudioDeviceFormat func(devid AudioDeviceID, spec *AudioSpec, sample_frames *int32) bool

	// SDL_GetAudioDeviceChannelMap => Get the current channel map of an audio device.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetAudioDeviceChannelMap
	iGetAudioDeviceChannelMap func(devid AudioDeviceID, count *int32) uintptr

	// SDL_OpenAudioDevice => Open a specific audio device.
	//
	//puregogen:function symbol=SDL_OpenAudioDevice
	iOpenAudioDevice func(devid AudioDeviceID, spec *AudioSpec) AudioDeviceID

	// SDL_IsAudioDevicePhysical => Determine if an audio device is physical (instead of logical).
	//
	//puregogen:function symbol=SDL_IsAudioDevicePhysical
	iIsAudioDevicePhysical func(devid AudioDeviceID) bool

	// SDL_IsAudioDevicePlayback => Determine if an audio device is a playback device (instead of recording).
	//
	//puregogen:function symbol=SDL_IsAudioDevicePlayback
	iIsAudioDevicePlayback func(devid AudioDeviceID) bool

	// SDL_PauseAudioDevice => Use this function to pause audio playback on a specified device.
	//
	//puregogen:function symbol=SDL_PauseAudioDevice
	iPauseAudioDevice func(devid AudioDeviceID) bool

	// SDL_ResumeAudioDevice => Use this function to unpause audio playback on a specified device.
	//
	//puregogen:function symbol=SDL_ResumeAudioDevice
	iResumeAudioDevice func(devid AudioDeviceID) bool

	// SDL_AudioDevicePaused => Use this function to query if an audio device is paused.
	//
	//puregogen:function symbol=SDL_AudioDevicePaused
	iAudioDevicePaused func(devid AudioDeviceID) bool

	// SDL_GetAudioDeviceGain => Get the gain of an audio device.
	//
	//puregogen:function symbol=SDL_GetAudioDeviceGain
	iGetAudioDeviceGain func(devid AudioDeviceID) float32

	// SDL_SetAudioDeviceGain => Change the gain of an audio device.
	//
	//puregogen:function symbol=SDL_SetAudioDeviceGain
	iSetAudioDeviceGain func(devid AudioDeviceID, gain float32) bool

	// SDL_CloseAudioDevice => Close a previously-opened audio device.
	//
	//puregogen:function symbol=SDL_CloseAudioDevice
	iCloseAudioDevice func(devid AudioDeviceID)

	// SDL_BindAudioStreams => Bind a list of audio streams to an audio device.
	//
	//puregogen:function symbol=SDL_BindAudioStreams
	iBindAudioStreams func(devid AudioDeviceID, streams **AudioStream, num_streams int32) bool

	// SDL_BindAudioStream => Bind a single audio stream to an audio device.
	//
	//puregogen:function symbol=SDL_BindAudioStream
	iBindAudioStream func(devid AudioDeviceID, stream *AudioStream) bool

	// SDL_UnbindAudioStreams => Unbind a list of audio streams from their audio devices.
	//
	//puregogen:function symbol=SDL_UnbindAudioStreams
	iUnbindAudioStreams func(streams **AudioStream, num_streams int32)

	// SDL_UnbindAudioStream => Unbind a single audio stream from its audio device.
	//
	//puregogen:function symbol=SDL_UnbindAudioStream
	iUnbindAudioStream func(stream *AudioStream)

	// SDL_GetAudioStreamDevice => Query an audio stream for its currently-bound device.
	//
	//puregogen:function symbol=SDL_GetAudioStreamDevice
	iGetAudioStreamDevice func(stream *AudioStream) AudioDeviceID

	// SDL_CreateAudioStream => Create a new audio stream.
	//
	//puregogen:function symbol=SDL_CreateAudioStream
	iCreateAudioStream func(src_spec *AudioSpec, dst_spec *AudioSpec) *AudioStream

	// SDL_GetAudioStreamProperties => Get the properties associated with an audio stream.
	//
	//puregogen:function symbol=SDL_GetAudioStreamProperties
	iGetAudioStreamProperties func(stream *AudioStream) PropertiesID

	// SDL_GetAudioStreamFormat => Query the current format of an audio stream.
	//
	//puregogen:function symbol=SDL_GetAudioStreamFormat
	iGetAudioStreamFormat func(stream *AudioStream, src_spec *AudioSpec, dst_spec *AudioSpec) bool

	// SDL_SetAudioStreamFormat => Change the input and output formats of an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamFormat
	iSetAudioStreamFormat func(stream *AudioStream, src_spec *AudioSpec, dst_spec *AudioSpec) bool

	// SDL_GetAudioStreamFrequencyRatio => Get the frequency ratio of an audio stream.
	//
	//puregogen:function symbol=SDL_GetAudioStreamFrequencyRatio
	iGetAudioStreamFrequencyRatio func(stream *AudioStream) float32

	// SDL_SetAudioStreamFrequencyRatio => Change the frequency ratio of an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamFrequencyRatio
	iSetAudioStreamFrequencyRatio func(stream *AudioStream, ratio float32) bool

	// SDL_GetAudioStreamGain => Get the gain of an audio stream.
	//
	//puregogen:function symbol=SDL_GetAudioStreamGain
	iGetAudioStreamGain func(stream *AudioStream) float32

	// SDL_SetAudioStreamGain => Change the gain of an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamGain
	iSetAudioStreamGain func(stream *AudioStream, gain float32) bool

	// SDL_GetAudioStreamInputChannelMap => Get the current input channel map of an audio stream.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetAudioStreamInputChannelMap
	iGetAudioStreamInputChannelMap func(stream *AudioStream, count *int32) uintptr

	// SDL_GetAudioStreamOutputChannelMap => Get the current output channel map of an audio stream.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetAudioStreamOutputChannelMap
	iGetAudioStreamOutputChannelMap func(stream *AudioStream, count *int32) uintptr

	// SDL_SetAudioStreamInputChannelMap => Set the current input channel map of an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamInputChannelMap
	iSetAudioStreamInputChannelMap func(stream *AudioStream, chmap *int32, count int32) bool

	// SDL_SetAudioStreamOutputChannelMap => Set the current output channel map of an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamOutputChannelMap
	iSetAudioStreamOutputChannelMap func(stream *AudioStream, chmap *int32, count int32) bool

	// SDL_PutAudioStreamData => Add data to the stream.
	//
	//puregogen:function symbol=SDL_PutAudioStreamData
	iPutAudioStreamData func(stream *AudioStream, buf uintptr, len int32) bool

	// SDL_GetAudioStreamData => Get converted/resampled data from the stream.
	//
	//puregogen:function symbol=SDL_GetAudioStreamData
	iGetAudioStreamData func(stream *AudioStream, buf uintptr, len int32) int32

	// SDL_GetAudioStreamAvailable => Get the number of converted/resampled bytes available.
	//
	//puregogen:function symbol=SDL_GetAudioStreamAvailable
	iGetAudioStreamAvailable func(stream *AudioStream) int32

	// SDL_GetAudioStreamQueued => Get the number of bytes currently queued.
	//
	//puregogen:function symbol=SDL_GetAudioStreamQueued
	iGetAudioStreamQueued func(stream *AudioStream) int32

	// SDL_FlushAudioStream => Tell the stream that you're done sending data, and anything being buffered should be converted/resampled and made available immediately.
	//
	//puregogen:function symbol=SDL_FlushAudioStream
	iFlushAudioStream func(stream *AudioStream) bool

	// SDL_ClearAudioStream => Clear any pending data in the stream.
	//
	//puregogen:function symbol=SDL_ClearAudioStream
	iClearAudioStream func(stream *AudioStream) bool

	// SDL_PauseAudioStreamDevice => Use this function to pause audio playback on the audio device associated with an audio stream.
	//
	//puregogen:function symbol=SDL_PauseAudioStreamDevice
	iPauseAudioStreamDevice func(stream *AudioStream) bool

	// SDL_ResumeAudioStreamDevice => Use this function to unpause audio playback on the audio device associated with an audio stream.
	//
	//puregogen:function symbol=SDL_ResumeAudioStreamDevice
	iResumeAudioStreamDevice func(stream *AudioStream) bool

	// SDL_AudioStreamDevicePaused => Use this function to query if an audio device associated with a stream is paused.
	//
	//puregogen:function symbol=SDL_AudioStreamDevicePaused
	iAudioStreamDevicePaused func(stream *AudioStream) bool

	// SDL_LockAudioStream => Lock an audio stream for serialized access.
	//
	//puregogen:function symbol=SDL_LockAudioStream
	iLockAudioStream func(stream *AudioStream) bool

	// SDL_UnlockAudioStream => Unlock an audio stream for serialized access.
	//
	//puregogen:function symbol=SDL_UnlockAudioStream
	iUnlockAudioStream func(stream *AudioStream) bool

	// SDL_SetAudioStreamGetCallback => Set a callback that runs when data is requested from an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamGetCallback
	iSetAudioStreamGetCallback func(stream *AudioStream, callback AudioStreamCallback, userdata uintptr) bool

	// SDL_SetAudioStreamPutCallback => Set a callback that runs when data is added to an audio stream.
	//
	//puregogen:function symbol=SDL_SetAudioStreamPutCallback
	iSetAudioStreamPutCallback func(stream *AudioStream, callback AudioStreamCallback, userdata uintptr) bool

	// SDL_DestroyAudioStream => Free an audio stream.
	//
	//puregogen:function symbol=SDL_DestroyAudioStream
	iDestroyAudioStream func(stream *AudioStream)

	// SDL_OpenAudioDeviceStream => Convenience function for straightforward audio init for the common case.
	//
	//puregogen:function symbol=SDL_OpenAudioDeviceStream
	iOpenAudioDeviceStream func(devid AudioDeviceID, spec *AudioSpec, callback AudioStreamCallback, userdata uintptr) *AudioStream

	// SDL_SetAudioPostmixCallback => Set a callback that fires when data is about to be fed to an audio device.
	//
	//puregogen:function symbol=SDL_SetAudioPostmixCallback
	iSetAudioPostmixCallback func(devid AudioDeviceID, callback AudioPostmixCallback, userdata uintptr) bool

	// SDL_LoadWAV_IO => Load the audio data of a WAVE file into memory.
	//
	//puregogen:function symbol=SDL_LoadWAV_IO
	iLoadWAV_IO func(src *IOStream, closeio bool, spec *AudioSpec, audio_buf **uint8, audio_len *uint32) bool

	// SDL_LoadWAV => Loads a WAV from a file path.
	//
	//puregogen:function symbol=SDL_LoadWAV
	iLoadWAV func(path string, spec *AudioSpec, audio_buf **uint8, audio_len *uint32) bool

	// SDL_MixAudio => Mix audio data in a specified format.
	//
	//puregogen:function symbol=SDL_MixAudio
	iMixAudio func(dst *uint8, src *uint8, format AudioFormat, len uint32, volume float32) bool

	// SDL_ConvertAudioSamples => Convert some audio data of one format to another format.
	//
	//puregogen:function symbol=SDL_ConvertAudioSamples
	iConvertAudioSamples func(src_spec *AudioSpec, src_data *uint8, src_len int32, dst_spec *AudioSpec, dst_data **uint8, dst_len *int32) bool

	// SDL_GetAudioFormatName => Get the human readable name of an audio format.
	//
	//puregogen:function symbol=SDL_GetAudioFormatName
	iGetAudioFormatName func(format AudioFormat) string

	// SDL_GetSilenceValueForFormat => Get the appropriate memset value for silencing an audio format.
	//
	//puregogen:function symbol=SDL_GetSilenceValueForFormat
	iGetSilenceValueForFormat func(format AudioFormat) int32

	// SDL_ComposeCustomBlendMode => Compose a custom blend mode for renderers.
	//
	//puregogen:function symbol=SDL_ComposeCustomBlendMode
	iComposeCustomBlendMode func(srcColorFactor BlendFactor, dstColorFactor BlendFactor, colorOperation BlendOperation, srcAlphaFactor BlendFactor, dstAlphaFactor BlendFactor, alphaOperation BlendOperation) BlendMode

	// SDL_GetPixelFormatName => Get the human readable name of a pixel format.
	//
	//puregogen:function symbol=SDL_GetPixelFormatName
	iGetPixelFormatName func(format PixelFormat) string

	// SDL_GetMasksForPixelFormat => Convert one of the enumerated pixel formats to a bpp value and RGBA masks.
	//
	//puregogen:function symbol=SDL_GetMasksForPixelFormat
	iGetMasksForPixelFormat func(format PixelFormat, bpp *int32, Rmask *uint32, Gmask *uint32, Bmask *uint32, Amask *uint32) bool

	// SDL_GetPixelFormatForMasks => Convert a bpp value and RGBA masks to an enumerated pixel format.
	//
	//puregogen:function symbol=SDL_GetPixelFormatForMasks
	iGetPixelFormatForMasks func(bpp int32, Rmask uint32, Gmask uint32, Bmask uint32, Amask uint32) PixelFormat

	// SDL_GetPixelFormatDetails => Create an SDL_PixelFormatDetails structure corresponding to a pixel format.
	//
	//puregogen:function symbol=SDL_GetPixelFormatDetails
	iGetPixelFormatDetails func(format PixelFormat) *PixelFormatDetails

	// SDL_CreatePalette => Create a palette structure with the specified number of color entries.
	//
	//puregogen:function symbol=SDL_CreatePalette
	iCreatePalette func(ncolors int32) *Palette

	// SDL_SetPaletteColors => Set a range of colors in a palette.
	//
	//puregogen:function symbol=SDL_SetPaletteColors
	iSetPaletteColors func(palette *Palette, colors *Color, firstcolor int32, ncolors int32) bool

	// SDL_DestroyPalette => Free a palette created with SDL_CreatePalette().
	//
	//puregogen:function symbol=SDL_DestroyPalette
	iDestroyPalette func(palette *Palette)

	// SDL_MapRGB => Map an RGB triple to an opaque pixel value for a given pixel format.
	//
	//puregogen:function symbol=SDL_MapRGB
	iMapRGB func(format *PixelFormatDetails, palette *Palette, r uint8, g uint8, b uint8) uint32

	// SDL_MapRGBA => Map an RGBA quadruple to a pixel value for a given pixel format.
	//
	//puregogen:function symbol=SDL_MapRGBA
	iMapRGBA func(format *PixelFormatDetails, palette *Palette, r uint8, g uint8, b uint8, a uint8) uint32

	// SDL_GetRGB => Get RGB values from a pixel in the specified format.
	//
	//puregogen:function symbol=SDL_GetRGB
	iGetRGB func(pixel uint32, format *PixelFormatDetails, palette *Palette, r *uint8, g *uint8, b *uint8)

	// SDL_GetRGBA => Get RGBA values from a pixel in the specified format.
	//
	//puregogen:function symbol=SDL_GetRGBA
	iGetRGBA func(pixel uint32, format *PixelFormatDetails, palette *Palette, r *uint8, g *uint8, b *uint8, a *uint8)

	// SDL_HasRectIntersection => Determine whether two rectangles intersect.
	//
	//puregogen:function symbol=SDL_HasRectIntersection
	iHasRectIntersection func(A *Rect, B *Rect) bool

	// SDL_GetRectIntersection => Calculate the intersection of two rectangles.
	//
	//puregogen:function symbol=SDL_GetRectIntersection
	iGetRectIntersection func(A *Rect, B *Rect, result *Rect) bool

	// SDL_GetRectUnion => Calculate the union of two rectangles.
	//
	//puregogen:function symbol=SDL_GetRectUnion
	iGetRectUnion func(A *Rect, B *Rect, result *Rect) bool

	// SDL_GetRectEnclosingPoints => Calculate a minimal rectangle enclosing a set of points.
	//
	//puregogen:function symbol=SDL_GetRectEnclosingPoints
	iGetRectEnclosingPoints func(points *Point, count int32, clip *Rect, result *Rect) bool

	// SDL_GetRectAndLineIntersection => Calculate the intersection of a rectangle and line segment.
	//
	//puregogen:function symbol=SDL_GetRectAndLineIntersection
	iGetRectAndLineIntersection func(rect *Rect, X1 *int32, Y1 *int32, X2 *int32, Y2 *int32) bool

	// SDL_HasRectIntersectionFloat => Determine whether two rectangles intersect with float precision.
	//
	//puregogen:function symbol=SDL_HasRectIntersectionFloat
	iHasRectIntersectionFloat func(A *FRect, B *FRect) bool

	// SDL_GetRectIntersectionFloat => Calculate the intersection of two rectangles with float precision.
	//
	//puregogen:function symbol=SDL_GetRectIntersectionFloat
	iGetRectIntersectionFloat func(A *FRect, B *FRect, result *FRect) bool

	// SDL_GetRectUnionFloat => Calculate the union of two rectangles with float precision.
	//
	//puregogen:function symbol=SDL_GetRectUnionFloat
	iGetRectUnionFloat func(A *FRect, B *FRect, result *FRect) bool

	// SDL_GetRectEnclosingPointsFloat => Calculate a minimal rectangle enclosing a set of points with float precision.
	//
	//puregogen:function symbol=SDL_GetRectEnclosingPointsFloat
	iGetRectEnclosingPointsFloat func(points *FPoint, count int32, clip *FRect, result *FRect) bool

	// SDL_GetRectAndLineIntersectionFloat => Calculate the intersection of a rectangle and line segment with float precision.
	//
	//puregogen:function symbol=SDL_GetRectAndLineIntersectionFloat
	iGetRectAndLineIntersectionFloat func(rect *FRect, X1 *float32, Y1 *float32, X2 *float32, Y2 *float32) bool

	// SDL_CreateSurface => Allocate a new surface with a specific pixel format.
	//
	//puregogen:function symbol=SDL_CreateSurface
	iCreateSurface func(width int32, height int32, format PixelFormat) *Surface

	// SDL_CreateSurfaceFrom => Allocate a new surface with a specific pixel format and existing pixel data.
	//
	//puregogen:function symbol=SDL_CreateSurfaceFrom
	iCreateSurfaceFrom func(width int32, height int32, format PixelFormat, pixels uintptr, pitch int32) *Surface

	// SDL_DestroySurface => Free a surface.
	//
	//puregogen:function symbol=SDL_DestroySurface
	iDestroySurface func(surface *Surface)

	// SDL_GetSurfaceProperties => Get the properties associated with a surface.
	//
	//puregogen:function symbol=SDL_GetSurfaceProperties
	iGetSurfaceProperties func(surface *Surface) PropertiesID

	// SDL_SetSurfaceColorspace => Set the colorspace used by a surface.
	//
	//puregogen:function symbol=SDL_SetSurfaceColorspace
	iSetSurfaceColorspace func(surface *Surface, colorspace Colorspace) bool

	// SDL_GetSurfaceColorspace => Get the colorspace used by a surface.
	//
	//puregogen:function symbol=SDL_GetSurfaceColorspace
	iGetSurfaceColorspace func(surface *Surface) Colorspace

	// SDL_CreateSurfacePalette => Create a palette and associate it with a surface.
	//
	//puregogen:function symbol=SDL_CreateSurfacePalette
	iCreateSurfacePalette func(surface *Surface) *Palette

	// SDL_SetSurfacePalette => Set the palette used by a surface.
	//
	//puregogen:function symbol=SDL_SetSurfacePalette
	iSetSurfacePalette func(surface *Surface, palette *Palette) bool

	// SDL_GetSurfacePalette => Get the palette used by a surface.
	//
	//puregogen:function symbol=SDL_GetSurfacePalette
	iGetSurfacePalette func(surface *Surface) *Palette

	// SDL_AddSurfaceAlternateImage => Add an alternate version of a surface.
	//
	//puregogen:function symbol=SDL_AddSurfaceAlternateImage
	iAddSurfaceAlternateImage func(surface *Surface, image *Surface) bool

	// SDL_SurfaceHasAlternateImages => Return whether a surface has alternate versions available.
	//
	//puregogen:function symbol=SDL_SurfaceHasAlternateImages
	iSurfaceHasAlternateImages func(surface *Surface) bool

	// SDL_GetSurfaceImages => Get an array including all versions of a surface.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetSurfaceImages
	iGetSurfaceImages func(surface *Surface, count *int32) uintptr

	// SDL_RemoveSurfaceAlternateImages => Remove all alternate versions of a surface.
	//
	//puregogen:function symbol=SDL_RemoveSurfaceAlternateImages
	iRemoveSurfaceAlternateImages func(surface *Surface)

	// SDL_LockSurface => Set up a surface for directly accessing the pixels.
	//
	//puregogen:function symbol=SDL_LockSurface
	iLockSurface func(surface *Surface) bool

	// SDL_UnlockSurface => Release a surface after directly accessing the pixels.
	//
	//puregogen:function symbol=SDL_UnlockSurface
	iUnlockSurface func(surface *Surface)

	// SDL_LoadBMP_IO => Load a BMP image from a seekable SDL data stream.
	//
	//puregogen:function symbol=SDL_LoadBMP_IO
	iLoadBMP_IO func(src *IOStream, closeio bool) *Surface

	// SDL_LoadBMP => Load a BMP image from a file.
	//
	//puregogen:function symbol=SDL_LoadBMP
	iLoadBMP func(file string) *Surface

	// SDL_SaveBMP_IO => Save a surface to a seekable SDL data stream in BMP format.
	//
	//puregogen:function symbol=SDL_SaveBMP_IO
	iSaveBMP_IO func(surface *Surface, dst *IOStream, closeio bool) bool

	// SDL_SaveBMP => Save a surface to a file.
	//
	//puregogen:function symbol=SDL_SaveBMP
	iSaveBMP func(surface *Surface, file string) bool

	// SDL_SetSurfaceRLE => Set the RLE acceleration hint for a surface.
	//
	//puregogen:function symbol=SDL_SetSurfaceRLE
	iSetSurfaceRLE func(surface *Surface, enabled bool) bool

	// SDL_SurfaceHasRLE => Returns whether the surface is RLE enabled.
	//
	//puregogen:function symbol=SDL_SurfaceHasRLE
	iSurfaceHasRLE func(surface *Surface) bool

	// SDL_SetSurfaceColorKey => Set the color key (transparent pixel) in a surface.
	//
	//puregogen:function symbol=SDL_SetSurfaceColorKey
	iSetSurfaceColorKey func(surface *Surface, enabled bool, key uint32) bool

	// SDL_SurfaceHasColorKey => Returns whether the surface has a color key.
	//
	//puregogen:function symbol=SDL_SurfaceHasColorKey
	iSurfaceHasColorKey func(surface *Surface) bool

	// SDL_GetSurfaceColorKey => Get the color key (transparent pixel) for a surface.
	//
	//puregogen:function symbol=SDL_GetSurfaceColorKey
	iGetSurfaceColorKey func(surface *Surface, key *uint32) bool

	// SDL_SetSurfaceColorMod => Set an additional color value multiplied into blit operations.
	//
	//puregogen:function symbol=SDL_SetSurfaceColorMod
	iSetSurfaceColorMod func(surface *Surface, r uint8, g uint8, b uint8) bool

	// SDL_GetSurfaceColorMod => Get the additional color value multiplied into blit operations.
	//
	//puregogen:function symbol=SDL_GetSurfaceColorMod
	iGetSurfaceColorMod func(surface *Surface, r *uint8, g *uint8, b *uint8) bool

	// SDL_SetSurfaceAlphaMod => Set an additional alpha value used in blit operations.
	//
	//puregogen:function symbol=SDL_SetSurfaceAlphaMod
	iSetSurfaceAlphaMod func(surface *Surface, alpha uint8) bool

	// SDL_GetSurfaceAlphaMod => Get the additional alpha value used in blit operations.
	//
	//puregogen:function symbol=SDL_GetSurfaceAlphaMod
	iGetSurfaceAlphaMod func(surface *Surface, alpha *uint8) bool

	// SDL_SetSurfaceBlendMode => Set the blend mode used for blit operations.
	//
	//puregogen:function symbol=SDL_SetSurfaceBlendMode
	iSetSurfaceBlendMode func(surface *Surface, blendMode BlendMode) bool

	// SDL_GetSurfaceBlendMode => Get the blend mode used for blit operations.
	//
	//puregogen:function symbol=SDL_GetSurfaceBlendMode
	iGetSurfaceBlendMode func(surface *Surface, blendMode *BlendMode) bool

	// SDL_SetSurfaceClipRect => Set the clipping rectangle for a surface.
	//
	//puregogen:function symbol=SDL_SetSurfaceClipRect
	iSetSurfaceClipRect func(surface *Surface, rect *Rect) bool

	// SDL_GetSurfaceClipRect => Get the clipping rectangle for a surface.
	//
	//puregogen:function symbol=SDL_GetSurfaceClipRect
	iGetSurfaceClipRect func(surface *Surface, rect *Rect) bool

	// SDL_FlipSurface => Flip a surface vertically or horizontally.
	//
	//puregogen:function symbol=SDL_FlipSurface
	iFlipSurface func(surface *Surface, flip FlipMode) bool

	// SDL_DuplicateSurface => Creates a new surface identical to the existing surface.
	//
	//puregogen:function symbol=SDL_DuplicateSurface
	iDuplicateSurface func(surface *Surface) *Surface

	// SDL_ScaleSurface => Creates a new surface identical to the existing surface, scaled to the desired size.
	//
	//puregogen:function symbol=SDL_ScaleSurface
	iScaleSurface func(surface *Surface, width int32, height int32, scaleMode ScaleMode) *Surface

	// SDL_ConvertSurface => Copy an existing surface to a new surface of the specified format.
	//
	//puregogen:function symbol=SDL_ConvertSurface
	iConvertSurface func(surface *Surface, format PixelFormat) *Surface

	// SDL_ConvertSurfaceAndColorspace => Copy an existing surface to a new surface of the specified format and colorspace.
	//
	//puregogen:function symbol=SDL_ConvertSurfaceAndColorspace
	iConvertSurfaceAndColorspace func(surface *Surface, format PixelFormat, palette *Palette, colorspace Colorspace, props PropertiesID) *Surface

	// SDL_ConvertPixels => Copy a block of pixels of one format to another format.
	//
	//puregogen:function symbol=SDL_ConvertPixels
	iConvertPixels func(width int32, height int32, src_format PixelFormat, src uintptr, src_pitch int32, dst_format PixelFormat, dst uintptr, dst_pitch int32) bool

	// SDL_ConvertPixelsAndColorspace => Copy a block of pixels of one format and colorspace to another format and colorspace.
	//
	//puregogen:function symbol=SDL_ConvertPixelsAndColorspace
	iConvertPixelsAndColorspace func(width int32, height int32, src_format PixelFormat, src_colorspace Colorspace, src_properties PropertiesID, src uintptr, src_pitch int32, dst_format PixelFormat, dst_colorspace Colorspace, dst_properties PropertiesID, dst uintptr, dst_pitch int32) bool

	// SDL_PremultiplyAlpha => Premultiply the alpha on a block of pixels.
	//
	//puregogen:function symbol=SDL_PremultiplyAlpha
	iPremultiplyAlpha func(width int32, height int32, src_format PixelFormat, src uintptr, src_pitch int32, dst_format PixelFormat, dst uintptr, dst_pitch int32, linear bool) bool

	// SDL_PremultiplySurfaceAlpha => Premultiply the alpha in a surface.
	//
	//puregogen:function symbol=SDL_PremultiplySurfaceAlpha
	iPremultiplySurfaceAlpha func(surface *Surface, linear bool) bool

	// SDL_ClearSurface => Clear a surface with a specific color, with floating point precision.
	//
	//puregogen:function symbol=SDL_ClearSurface
	iClearSurface func(surface *Surface, r float32, g float32, b float32, a float32) bool

	// SDL_FillSurfaceRect => Perform a fast fill of a rectangle with a specific color.
	//
	//puregogen:function symbol=SDL_FillSurfaceRect
	iFillSurfaceRect func(dst *Surface, rect *Rect, color uint32) bool

	// SDL_FillSurfaceRects => Perform a fast fill of a set of rectangles with a specific color.
	//
	//puregogen:function symbol=SDL_FillSurfaceRects
	iFillSurfaceRects func(dst *Surface, rects *Rect, count int32, color uint32) bool

	// SDL_BlitSurface => Performs a fast blit from the source surface to the destination surface with clipping.
	//
	//puregogen:function symbol=SDL_BlitSurface
	iBlitSurface func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool

	// SDL_BlitSurfaceUnchecked => Perform low-level surface blitting only.
	//
	//puregogen:function symbol=SDL_BlitSurfaceUnchecked
	iBlitSurfaceUnchecked func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool

	// SDL_BlitSurfaceScaled => Perform a scaled blit to a destination surface, which may be of a different format.
	//
	//puregogen:function symbol=SDL_BlitSurfaceScaled
	iBlitSurfaceScaled func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool

	// SDL_BlitSurfaceUncheckedScaled => Perform low-level surface scaled blitting only.
	//
	//puregogen:function symbol=SDL_BlitSurfaceUncheckedScaled
	iBlitSurfaceUncheckedScaled func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool

	// SDL_StretchSurface => Perform a stretched pixel copy from one surface to another.
	//
	//puregogen:function symbol=SDL_StretchSurface
	iStretchSurface func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool

	// SDL_BlitSurfaceTiled => Perform a tiled blit to a destination surface, which may be of a different format.
	//
	//puregogen:function symbol=SDL_BlitSurfaceTiled
	iBlitSurfaceTiled func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool

	// SDL_BlitSurfaceTiledWithScale => Perform a scaled and tiled blit to a destination surface, which may be of a different format.
	//
	//puregogen:function symbol=SDL_BlitSurfaceTiledWithScale
	iBlitSurfaceTiledWithScale func(src *Surface, srcrect *Rect, scale float32, scaleMode ScaleMode, dst *Surface, dstrect *Rect) bool

	// SDL_BlitSurface9Grid => Perform a scaled blit using the 9-grid algorithm to a destination surface, which may be of a different format.
	//
	//puregogen:function symbol=SDL_BlitSurface9Grid
	iBlitSurface9Grid func(src *Surface, srcrect *Rect, left_width int32, right_width int32, top_height int32, bottom_height int32, scale float32, scaleMode ScaleMode, dst *Surface, dstrect *Rect) bool

	// SDL_MapSurfaceRGB => Map an RGB triple to an opaque pixel value for a surface.
	//
	//puregogen:function symbol=SDL_MapSurfaceRGB
	iMapSurfaceRGB func(surface *Surface, r uint8, g uint8, b uint8) uint32

	// SDL_MapSurfaceRGBA => Map an RGBA quadruple to a pixel value for a surface.
	//
	//puregogen:function symbol=SDL_MapSurfaceRGBA
	iMapSurfaceRGBA func(surface *Surface, r uint8, g uint8, b uint8, a uint8) uint32

	// SDL_ReadSurfacePixel => Retrieves a single pixel from a surface.
	//
	//puregogen:function symbol=SDL_ReadSurfacePixel
	iReadSurfacePixel func(surface *Surface, x int32, y int32, r *uint8, g *uint8, b *uint8, a *uint8) bool

	// SDL_ReadSurfacePixelFloat => Retrieves a single pixel from a surface.
	//
	//puregogen:function symbol=SDL_ReadSurfacePixelFloat
	iReadSurfacePixelFloat func(surface *Surface, x int32, y int32, r *float32, g *float32, b *float32, a *float32) bool

	// SDL_WriteSurfacePixel => Writes a single pixel to a surface.
	//
	//puregogen:function symbol=SDL_WriteSurfacePixel
	iWriteSurfacePixel func(surface *Surface, x int32, y int32, r uint8, g uint8, b uint8, a uint8) bool

	// SDL_WriteSurfacePixelFloat => Writes a single pixel to a surface.
	//
	//puregogen:function symbol=SDL_WriteSurfacePixelFloat
	iWriteSurfacePixelFloat func(surface *Surface, x int32, y int32, r float32, g float32, b float32, a float32) bool

	// SDL_GetNumCameraDrivers => Use this function to get the number of built-in camera drivers.
	//
	//puregogen:function symbol=SDL_GetNumCameraDrivers
	iGetNumCameraDrivers func() int32

	// SDL_GetCameraDriver => Use this function to get the name of a built in camera driver.
	//
	//puregogen:function symbol=SDL_GetCameraDriver
	iGetCameraDriver func(index int32) string

	// SDL_GetCurrentCameraDriver => Get the name of the current camera driver.
	//
	//puregogen:function symbol=SDL_GetCurrentCameraDriver
	iGetCurrentCameraDriver func() string

	// SDL_GetCameras => Get a list of currently connected camera devices.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetCameras
	iGetCameras func(count *int32) uintptr

	// SDL_GetCameraSupportedFormats => Get the list of native formats/sizes a camera supports.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetCameraSupportedFormats
	iGetCameraSupportedFormats func(instance_id CameraID, count *int32) uintptr

	// SDL_GetCameraName => Get the human-readable device name for a camera.
	//
	//puregogen:function symbol=SDL_GetCameraName
	iGetCameraName func(instance_id CameraID) string

	// SDL_GetCameraPosition => Get the position of the camera in relation to the system.
	//
	//puregogen:function symbol=SDL_GetCameraPosition
	iGetCameraPosition func(instance_id CameraID) CameraPosition

	// SDL_OpenCamera => Open a video recording device (a "camera").
	//
	//puregogen:function symbol=SDL_OpenCamera
	iOpenCamera func(instance_id CameraID, spec *CameraSpec) *Camera

	// SDL_GetCameraPermissionState => Query if camera access has been approved by the user.
	//
	//puregogen:function symbol=SDL_GetCameraPermissionState
	iGetCameraPermissionState func(camera *Camera) int32

	// SDL_GetCameraID => Get the instance ID of an opened camera.
	//
	//puregogen:function symbol=SDL_GetCameraID
	iGetCameraID func(camera *Camera) CameraID

	// SDL_GetCameraProperties => Get the properties associated with an opened camera.
	//
	//puregogen:function symbol=SDL_GetCameraProperties
	iGetCameraProperties func(camera *Camera) PropertiesID

	// SDL_GetCameraFormat => Get the spec that a camera is using when generating images.
	//
	//puregogen:function symbol=SDL_GetCameraFormat
	iGetCameraFormat func(camera *Camera, spec *CameraSpec) bool

	// SDL_AcquireCameraFrame => Acquire a frame.
	//
	//puregogen:function symbol=SDL_AcquireCameraFrame
	iAcquireCameraFrame func(camera *Camera, timestampNS *uint64) *Surface

	// SDL_ReleaseCameraFrame => Release a frame of video acquired from a camera.
	//
	//puregogen:function symbol=SDL_ReleaseCameraFrame
	iReleaseCameraFrame func(camera *Camera, frame *Surface)

	// SDL_CloseCamera => Use this function to shut down camera processing and close the camera device.
	//
	//puregogen:function symbol=SDL_CloseCamera
	iCloseCamera func(camera *Camera)

	// SDL_SetClipboardText => Put UTF-8 text into the clipboard.
	//
	//puregogen:function symbol=SDL_SetClipboardText
	iSetClipboardText func(text string) bool

	// SDL_GetClipboardText => Get UTF-8 text from the clipboard.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetClipboardText
	iGetClipboardText func() uintptr

	// SDL_HasClipboardText => Query whether the clipboard exists and contains a non-empty text string.
	//
	//puregogen:function symbol=SDL_HasClipboardText
	iHasClipboardText func() bool

	// SDL_SetPrimarySelectionText => Put UTF-8 text into the primary selection.
	//
	//puregogen:function symbol=SDL_SetPrimarySelectionText
	iSetPrimarySelectionText func(text string) bool

	// SDL_GetPrimarySelectionText => Get UTF-8 text from the primary selection.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetPrimarySelectionText
	iGetPrimarySelectionText func() uintptr

	// SDL_HasPrimarySelectionText => Query whether the primary selection exists and contains a non-empty text string.
	//
	//puregogen:function symbol=SDL_HasPrimarySelectionText
	iHasPrimarySelectionText func() bool

	// SDL_SetClipboardData => Offer clipboard data to the OS.
	//
	//puregogen:function symbol=SDL_SetClipboardData
	iSetClipboardData func(callback ClipboardDataCallback, cleanup ClipboardCleanupCallback, userdata uintptr, mime_types *string, num_mime_types uintptr) bool

	// SDL_ClearClipboardData => Clear the clipboard data.
	//
	//puregogen:function symbol=SDL_ClearClipboardData
	iClearClipboardData func() bool

	// SDL_GetClipboardData => Get the data from clipboard for a given mime type.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetClipboardData
	iGetClipboardData func(mime_type string, size *uintptr) uintptr

	// SDL_HasClipboardData => Query whether there is data in the clipboard for the provided mime type.
	//
	//puregogen:function symbol=SDL_HasClipboardData
	iHasClipboardData func(mime_type string) bool

	// SDL_GetClipboardMimeTypes => Retrieve the list of mime types available in the clipboard.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetClipboardMimeTypes
	iGetClipboardMimeTypes func(num_mime_types *uintptr) uintptr

	// SDL_GetNumLogicalCPUCores => Get the number of logical CPU cores available.
	//
	//puregogen:function symbol=SDL_GetNumLogicalCPUCores
	iGetNumLogicalCPUCores func() int32

	// SDL_GetCPUCacheLineSize => Determine the L1 cache line size of the CPU.
	//
	//puregogen:function symbol=SDL_GetCPUCacheLineSize
	iGetCPUCacheLineSize func() int32

	// SDL_HasAltiVec => Determine whether the CPU has AltiVec features.
	//
	//puregogen:function symbol=SDL_HasAltiVec
	iHasAltiVec func() bool

	// SDL_HasMMX => Determine whether the CPU has MMX features.
	//
	//puregogen:function symbol=SDL_HasMMX
	iHasMMX func() bool

	// SDL_HasSSE => Determine whether the CPU has SSE features.
	//
	//puregogen:function symbol=SDL_HasSSE
	iHasSSE func() bool

	// SDL_HasSSE2 => Determine whether the CPU has SSE2 features.
	//
	//puregogen:function symbol=SDL_HasSSE2
	iHasSSE2 func() bool

	// SDL_HasSSE3 => Determine whether the CPU has SSE3 features.
	//
	//puregogen:function symbol=SDL_HasSSE3
	iHasSSE3 func() bool

	// SDL_HasSSE41 => Determine whether the CPU has SSE4.1 features.
	//
	//puregogen:function symbol=SDL_HasSSE41
	iHasSSE41 func() bool

	// SDL_HasSSE42 => Determine whether the CPU has SSE4.2 features.
	//
	//puregogen:function symbol=SDL_HasSSE42
	iHasSSE42 func() bool

	// SDL_HasAVX => Determine whether the CPU has AVX features.
	//
	//puregogen:function symbol=SDL_HasAVX
	iHasAVX func() bool

	// SDL_HasAVX2 => Determine whether the CPU has AVX2 features.
	//
	//puregogen:function symbol=SDL_HasAVX2
	iHasAVX2 func() bool

	// SDL_HasAVX512F => Determine whether the CPU has AVX-512F (foundation) features.
	//
	//puregogen:function symbol=SDL_HasAVX512F
	iHasAVX512F func() bool

	// SDL_HasARMSIMD => Determine whether the CPU has ARM SIMD (ARMv6) features.
	//
	//puregogen:function symbol=SDL_HasARMSIMD
	iHasARMSIMD func() bool

	// SDL_HasNEON => Determine whether the CPU has NEON (ARM SIMD) features.
	//
	//puregogen:function symbol=SDL_HasNEON
	iHasNEON func() bool

	// SDL_HasLSX => Determine whether the CPU has LSX (LOONGARCH SIMD) features.
	//
	//puregogen:function symbol=SDL_HasLSX
	iHasLSX func() bool

	// SDL_HasLASX => Determine whether the CPU has LASX (LOONGARCH SIMD) features.
	//
	//puregogen:function symbol=SDL_HasLASX
	iHasLASX func() bool

	// SDL_GetSystemRAM => Get the amount of RAM configured in the system.
	//
	//puregogen:function symbol=SDL_GetSystemRAM
	iGetSystemRAM func() int32

	// SDL_GetSIMDAlignment => Report the alignment this system needs for SIMD allocations.
	//
	//puregogen:function symbol=SDL_GetSIMDAlignment
	iGetSIMDAlignment func() uintptr

	// SDL_GetNumVideoDrivers => Get the number of video drivers compiled into SDL.
	//
	//puregogen:function symbol=SDL_GetNumVideoDrivers
	iGetNumVideoDrivers func() int32

	// SDL_GetVideoDriver => Get the name of a built in video driver.
	//
	//puregogen:function symbol=SDL_GetVideoDriver
	iGetVideoDriver func(index int32) string

	// SDL_GetCurrentVideoDriver => Get the name of the currently initialized video driver.
	//
	//puregogen:function symbol=SDL_GetCurrentVideoDriver
	iGetCurrentVideoDriver func() string

	// SDL_GetSystemTheme => Get the current system theme.
	//
	//puregogen:function symbol=SDL_GetSystemTheme
	iGetSystemTheme func() SystemTheme

	// SDL_GetDisplays => Get a list of currently connected displays.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetDisplays
	iGetDisplays func(count *int32) uintptr

	// SDL_GetPrimaryDisplay => Return the primary display.
	//
	//puregogen:function symbol=SDL_GetPrimaryDisplay
	iGetPrimaryDisplay func() DisplayID

	// SDL_GetDisplayProperties => Get the properties associated with a display.
	//
	//puregogen:function symbol=SDL_GetDisplayProperties
	iGetDisplayProperties func(displayID DisplayID) PropertiesID

	// SDL_GetDisplayName => Get the name of a display in UTF-8 encoding.
	//
	//puregogen:function symbol=SDL_GetDisplayName
	iGetDisplayName func(displayID DisplayID) string

	// SDL_GetDisplayBounds => Get the desktop area represented by a display.
	//
	//puregogen:function symbol=SDL_GetDisplayBounds
	iGetDisplayBounds func(displayID DisplayID, rect *Rect) bool

	// SDL_GetDisplayUsableBounds => Get the usable desktop area represented by a display, in screen coordinates.
	//
	//puregogen:function symbol=SDL_GetDisplayUsableBounds
	iGetDisplayUsableBounds func(displayID DisplayID, rect *Rect) bool

	// SDL_GetNaturalDisplayOrientation => Get the orientation of a display when it is unrotated.
	//
	//puregogen:function symbol=SDL_GetNaturalDisplayOrientation
	iGetNaturalDisplayOrientation func(displayID DisplayID) DisplayOrientation

	// SDL_GetCurrentDisplayOrientation => Get the orientation of a display.
	//
	//puregogen:function symbol=SDL_GetCurrentDisplayOrientation
	iGetCurrentDisplayOrientation func(displayID DisplayID) DisplayOrientation

	// SDL_GetDisplayContentScale => Get the content scale of a display.
	//
	//puregogen:function symbol=SDL_GetDisplayContentScale
	iGetDisplayContentScale func(displayID DisplayID) float32

	// SDL_GetFullscreenDisplayModes => Get a list of fullscreen display modes available on a display.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetFullscreenDisplayModes
	iGetFullscreenDisplayModes func(displayID DisplayID, count *int32) uintptr

	// SDL_GetClosestFullscreenDisplayMode => Get the closest match to the requested display mode.
	//
	//puregogen:function symbol=SDL_GetClosestFullscreenDisplayMode
	iGetClosestFullscreenDisplayMode func(displayID DisplayID, w int32, h int32, refresh_rate float32, include_high_density_modes bool, closest *DisplayMode) bool

	// SDL_GetDesktopDisplayMode => Get information about the desktop's display mode.
	//
	//puregogen:function symbol=SDL_GetDesktopDisplayMode
	iGetDesktopDisplayMode func(displayID DisplayID) *DisplayMode

	// SDL_GetCurrentDisplayMode => Get information about the current display mode.
	//
	//puregogen:function symbol=SDL_GetCurrentDisplayMode
	iGetCurrentDisplayMode func(displayID DisplayID) *DisplayMode

	// SDL_GetDisplayForPoint => Get the display containing a point.
	//
	//puregogen:function symbol=SDL_GetDisplayForPoint
	iGetDisplayForPoint func(point *Point) DisplayID

	// SDL_GetDisplayForRect => Get the display primarily containing a rect.
	//
	//puregogen:function symbol=SDL_GetDisplayForRect
	iGetDisplayForRect func(rect *Rect) DisplayID

	// SDL_GetDisplayForWindow => Get the display associated with a window.
	//
	//puregogen:function symbol=SDL_GetDisplayForWindow
	iGetDisplayForWindow func(window *Window) DisplayID

	// SDL_GetWindowPixelDensity => Get the pixel density of a window.
	//
	//puregogen:function symbol=SDL_GetWindowPixelDensity
	iGetWindowPixelDensity func(window *Window) float32

	// SDL_GetWindowDisplayScale => Get the content display scale relative to a window's pixel size.
	//
	//puregogen:function symbol=SDL_GetWindowDisplayScale
	iGetWindowDisplayScale func(window *Window) float32

	// SDL_SetWindowFullscreenMode => Set the display mode to use when a window is visible and fullscreen.
	//
	//puregogen:function symbol=SDL_SetWindowFullscreenMode
	iSetWindowFullscreenMode func(window *Window, mode *DisplayMode) bool

	// SDL_GetWindowFullscreenMode => Query the display mode to use when a window is visible at fullscreen.
	//
	//puregogen:function symbol=SDL_GetWindowFullscreenMode
	iGetWindowFullscreenMode func(window *Window) *DisplayMode

	// SDL_GetWindowICCProfile => Get the raw ICC profile data for the screen the window is currently on.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetWindowICCProfile
	iGetWindowICCProfile func(window *Window, size *uintptr) uintptr

	// SDL_GetWindowPixelFormat => Get the pixel format associated with the window.
	//
	//puregogen:function symbol=SDL_GetWindowPixelFormat
	iGetWindowPixelFormat func(window *Window) PixelFormat

	// SDL_GetWindows => Get a list of valid windows.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetWindows
	iGetWindows func(count *int32) uintptr

	// SDL_CreateWindow => Create a window with the specified dimensions and flags.
	//
	//puregogen:function symbol=SDL_CreateWindow
	iCreateWindow func(title string, w int32, h int32, flags WindowFlags) *Window

	// SDL_CreatePopupWindow => Create a child popup window of the specified parent window.
	//
	//puregogen:function symbol=SDL_CreatePopupWindow
	iCreatePopupWindow func(parent *Window, offset_x int32, offset_y int32, w int32, h int32, flags WindowFlags) *Window

	// SDL_CreateWindowWithProperties => Create a window with the specified properties.
	//
	//puregogen:function symbol=SDL_CreateWindowWithProperties
	iCreateWindowWithProperties func(props PropertiesID) *Window

	// SDL_GetWindowID => Get the numeric ID of a window.
	//
	//puregogen:function symbol=SDL_GetWindowID
	iGetWindowID func(window *Window) WindowID

	// SDL_GetWindowFromID => Get a window from a stored ID.
	//
	//puregogen:function symbol=SDL_GetWindowFromID
	iGetWindowFromID func(id WindowID) *Window

	// SDL_GetWindowParent => Get parent of a window.
	//
	//puregogen:function symbol=SDL_GetWindowParent
	iGetWindowParent func(window *Window) *Window

	// SDL_GetWindowProperties => Get the properties associated with a window.
	//
	//puregogen:function symbol=SDL_GetWindowProperties
	iGetWindowProperties func(window *Window) PropertiesID

	// SDL_GetWindowFlags => Get the window flags.
	//
	//puregogen:function symbol=SDL_GetWindowFlags
	iGetWindowFlags func(window *Window) WindowFlags

	// SDL_SetWindowTitle => Set the title of a window.
	//
	//puregogen:function symbol=SDL_SetWindowTitle
	iSetWindowTitle func(window *Window, title string) bool

	// SDL_GetWindowTitle => Get the title of a window.
	//
	//puregogen:function symbol=SDL_GetWindowTitle
	iGetWindowTitle func(window *Window) string

	// SDL_SetWindowIcon => Set the icon for a window.
	//
	//puregogen:function symbol=SDL_SetWindowIcon
	iSetWindowIcon func(window *Window, icon *Surface) bool

	// SDL_SetWindowPosition => Request that the window's position be set.
	//
	//puregogen:function symbol=SDL_SetWindowPosition
	iSetWindowPosition func(window *Window, x int32, y int32) bool

	// SDL_GetWindowPosition => Get the position of a window.
	//
	//puregogen:function symbol=SDL_GetWindowPosition
	iGetWindowPosition func(window *Window, x *int32, y *int32) bool

	// SDL_SetWindowSize => Request that the size of a window's client area be set.
	//
	//puregogen:function symbol=SDL_SetWindowSize
	iSetWindowSize func(window *Window, w int32, h int32) bool

	// SDL_GetWindowSize => Get the size of a window's client area.
	//
	//puregogen:function symbol=SDL_GetWindowSize
	iGetWindowSize func(window *Window, w *int32, h *int32) bool

	// SDL_GetWindowSafeArea => Get the safe area for this window.
	//
	//puregogen:function symbol=SDL_GetWindowSafeArea
	iGetWindowSafeArea func(window *Window, rect *Rect) bool

	// SDL_SetWindowAspectRatio => Request that the aspect ratio of a window's client area be set.
	//
	//puregogen:function symbol=SDL_SetWindowAspectRatio
	iSetWindowAspectRatio func(window *Window, min_aspect float32, max_aspect float32) bool

	// SDL_GetWindowAspectRatio => Get the aspect ratio of a window's client area.
	//
	//puregogen:function symbol=SDL_GetWindowAspectRatio
	iGetWindowAspectRatio func(window *Window, min_aspect *float32, max_aspect *float32) bool

	// SDL_GetWindowBordersSize => Get the size of a window's borders (decorations) around the client area.
	//
	//puregogen:function symbol=SDL_GetWindowBordersSize
	iGetWindowBordersSize func(window *Window, top *int32, left *int32, bottom *int32, right *int32) bool

	// SDL_GetWindowSizeInPixels => Get the size of a window's client area, in pixels.
	//
	//puregogen:function symbol=SDL_GetWindowSizeInPixels
	iGetWindowSizeInPixels func(window *Window, w *int32, h *int32) bool

	// SDL_SetWindowMinimumSize => Set the minimum size of a window's client area.
	//
	//puregogen:function symbol=SDL_SetWindowMinimumSize
	iSetWindowMinimumSize func(window *Window, min_w int32, min_h int32) bool

	// SDL_GetWindowMinimumSize => Get the minimum size of a window's client area.
	//
	//puregogen:function symbol=SDL_GetWindowMinimumSize
	iGetWindowMinimumSize func(window *Window, w *int32, h *int32) bool

	// SDL_SetWindowMaximumSize => Set the maximum size of a window's client area.
	//
	//puregogen:function symbol=SDL_SetWindowMaximumSize
	iSetWindowMaximumSize func(window *Window, max_w int32, max_h int32) bool

	// SDL_GetWindowMaximumSize => Get the maximum size of a window's client area.
	//
	//puregogen:function symbol=SDL_GetWindowMaximumSize
	iGetWindowMaximumSize func(window *Window, w *int32, h *int32) bool

	// SDL_SetWindowBordered => Set the border state of a window.
	//
	//puregogen:function symbol=SDL_SetWindowBordered
	iSetWindowBordered func(window *Window, bordered bool) bool

	// SDL_SetWindowResizable => Set the user-resizable state of a window.
	//
	//puregogen:function symbol=SDL_SetWindowResizable
	iSetWindowResizable func(window *Window, resizable bool) bool

	// SDL_SetWindowAlwaysOnTop => Set the window to always be above the others.
	//
	//puregogen:function symbol=SDL_SetWindowAlwaysOnTop
	iSetWindowAlwaysOnTop func(window *Window, on_top bool) bool

	// SDL_ShowWindow => Show a window.
	//
	//puregogen:function symbol=SDL_ShowWindow
	iShowWindow func(window *Window) bool

	// SDL_HideWindow => Hide a window.
	//
	//puregogen:function symbol=SDL_HideWindow
	iHideWindow func(window *Window) bool

	// SDL_RaiseWindow => Request that a window be raised above other windows and gain the input focus.
	//
	//puregogen:function symbol=SDL_RaiseWindow
	iRaiseWindow func(window *Window) bool

	// SDL_MaximizeWindow => Request that the window be made as large as possible.
	//
	//puregogen:function symbol=SDL_MaximizeWindow
	iMaximizeWindow func(window *Window) bool

	// SDL_MinimizeWindow => Request that the window be minimized to an iconic representation.
	//
	//puregogen:function symbol=SDL_MinimizeWindow
	iMinimizeWindow func(window *Window) bool

	// SDL_RestoreWindow => Request that the size and position of a minimized or maximized window be restored.
	//
	//puregogen:function symbol=SDL_RestoreWindow
	iRestoreWindow func(window *Window) bool

	// SDL_SetWindowFullscreen => Request that the window's fullscreen state be changed.
	//
	//puregogen:function symbol=SDL_SetWindowFullscreen
	iSetWindowFullscreen func(window *Window, fullscreen bool) bool

	// SDL_SyncWindow => Block until any pending window state is finalized.
	//
	//puregogen:function symbol=SDL_SyncWindow
	iSyncWindow func(window *Window) bool

	// SDL_WindowHasSurface => Return whether the window has a surface associated with it.
	//
	//puregogen:function symbol=SDL_WindowHasSurface
	iWindowHasSurface func(window *Window) bool

	// SDL_GetWindowSurface => Get the SDL surface associated with the window.
	//
	//puregogen:function symbol=SDL_GetWindowSurface
	iGetWindowSurface func(window *Window) *Surface

	// SDL_SetWindowSurfaceVSync => Toggle VSync for the window surface.
	//
	//puregogen:function symbol=SDL_SetWindowSurfaceVSync
	iSetWindowSurfaceVSync func(window *Window, vsync int32) bool

	// SDL_GetWindowSurfaceVSync => Get VSync for the window surface.
	//
	//puregogen:function symbol=SDL_GetWindowSurfaceVSync
	iGetWindowSurfaceVSync func(window *Window, vsync *int32) bool

	// SDL_UpdateWindowSurface => Copy the window surface to the screen.
	//
	//puregogen:function symbol=SDL_UpdateWindowSurface
	iUpdateWindowSurface func(window *Window) bool

	// SDL_UpdateWindowSurfaceRects => Copy areas of the window surface to the screen.
	//
	//puregogen:function symbol=SDL_UpdateWindowSurfaceRects
	iUpdateWindowSurfaceRects func(window *Window, rects *Rect, numrects int32) bool

	// SDL_DestroyWindowSurface => Destroy the surface associated with the window.
	//
	//puregogen:function symbol=SDL_DestroyWindowSurface
	iDestroyWindowSurface func(window *Window) bool

	// SDL_SetWindowKeyboardGrab => Set a window's keyboard grab mode.
	//
	//puregogen:function symbol=SDL_SetWindowKeyboardGrab
	iSetWindowKeyboardGrab func(window *Window, grabbed bool) bool

	// SDL_SetWindowMouseGrab => Set a window's mouse grab mode.
	//
	//puregogen:function symbol=SDL_SetWindowMouseGrab
	iSetWindowMouseGrab func(window *Window, grabbed bool) bool

	// SDL_GetWindowKeyboardGrab => Get a window's keyboard grab mode.
	//
	//puregogen:function symbol=SDL_GetWindowKeyboardGrab
	iGetWindowKeyboardGrab func(window *Window) bool

	// SDL_GetWindowMouseGrab => Get a window's mouse grab mode.
	//
	//puregogen:function symbol=SDL_GetWindowMouseGrab
	iGetWindowMouseGrab func(window *Window) bool

	// SDL_GetGrabbedWindow => Get the window that currently has an input grab enabled.
	//
	//puregogen:function symbol=SDL_GetGrabbedWindow
	iGetGrabbedWindow func() *Window

	// SDL_SetWindowMouseRect => Confines the cursor to the specified area of a window.
	//
	//puregogen:function symbol=SDL_SetWindowMouseRect
	iSetWindowMouseRect func(window *Window, rect *Rect) bool

	// SDL_GetWindowMouseRect => Get the mouse confinement rectangle of a window.
	//
	//puregogen:function symbol=SDL_GetWindowMouseRect
	iGetWindowMouseRect func(window *Window) *Rect

	// SDL_SetWindowOpacity => Set the opacity for a window.
	//
	//puregogen:function symbol=SDL_SetWindowOpacity
	iSetWindowOpacity func(window *Window, opacity float32) bool

	// SDL_GetWindowOpacity => Get the opacity of a window.
	//
	//puregogen:function symbol=SDL_GetWindowOpacity
	iGetWindowOpacity func(window *Window) float32

	// SDL_SetWindowParent => Set the window as a child of a parent window.
	//
	//puregogen:function symbol=SDL_SetWindowParent
	iSetWindowParent func(window *Window, parent *Window) bool

	// SDL_SetWindowModal => Toggle the state of the window as modal.
	//
	//puregogen:function symbol=SDL_SetWindowModal
	iSetWindowModal func(window *Window, modal bool) bool

	// SDL_SetWindowFocusable => Set whether the window may have input focus.
	//
	//puregogen:function symbol=SDL_SetWindowFocusable
	iSetWindowFocusable func(window *Window, focusable bool) bool

	// SDL_ShowWindowSystemMenu => Display the system-level window menu.
	//
	//puregogen:function symbol=SDL_ShowWindowSystemMenu
	iShowWindowSystemMenu func(window *Window, x int32, y int32) bool

	// SDL_SetWindowHitTest => Provide a callback that decides if a window region has special properties.
	//
	//puregogen:function symbol=SDL_SetWindowHitTest
	iSetWindowHitTest func(window *Window, callback HitTest, callback_data uintptr) bool

	// SDL_SetWindowShape => Set the shape of a transparent window.
	//
	//puregogen:function symbol=SDL_SetWindowShape
	iSetWindowShape func(window *Window, shape *Surface) bool

	// SDL_FlashWindow => Request a window to demand attention from the user.
	//
	//puregogen:function symbol=SDL_FlashWindow
	iFlashWindow func(window *Window, operation FlashOperation) bool

	// SDL_DestroyWindow => Destroy a window.
	//
	//puregogen:function symbol=SDL_DestroyWindow
	iDestroyWindow func(window *Window)

	// SDL_ScreenSaverEnabled => Check whether the screensaver is currently enabled.
	//
	//puregogen:function symbol=SDL_ScreenSaverEnabled
	iScreenSaverEnabled func() bool

	// SDL_EnableScreenSaver => Allow the screen to be blanked by a screen saver.
	//
	//puregogen:function symbol=SDL_EnableScreenSaver
	iEnableScreenSaver func() bool

	// SDL_DisableScreenSaver => Prevent the screen from being blanked by a screen saver.
	//
	//puregogen:function symbol=SDL_DisableScreenSaver
	iDisableScreenSaver func() bool

	// SDL_GL_LoadLibrary => Dynamically load an OpenGL library.
	//
	//puregogen:function symbol=SDL_GL_LoadLibrary
	iGL_LoadLibrary func(path string) bool

	// SDL_GL_GetProcAddress => Get an OpenGL function by name.
	//
	//puregogen:function symbol=SDL_GL_GetProcAddress
	iGL_GetProcAddress func(proc string) FunctionPointer

	// SDL_EGL_GetProcAddress => Get an EGL library function by name.
	//
	//puregogen:function symbol=SDL_EGL_GetProcAddress
	iEGL_GetProcAddress func(proc string) FunctionPointer

	// SDL_GL_UnloadLibrary => Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().
	//
	//puregogen:function symbol=SDL_GL_UnloadLibrary
	iGL_UnloadLibrary func()

	// SDL_GL_ExtensionSupported => Check if an OpenGL extension is supported for the current context.
	//
	//puregogen:function symbol=SDL_GL_ExtensionSupported
	iGL_ExtensionSupported func(extension string) bool

	// SDL_GL_ResetAttributes => Reset all previously set OpenGL context attributes to their default values.
	//
	//puregogen:function symbol=SDL_GL_ResetAttributes
	iGL_ResetAttributes func()

	// SDL_GL_SetAttribute => Set an OpenGL window attribute before window creation.
	//
	//puregogen:function symbol=SDL_GL_SetAttribute
	iGL_SetAttribute func(attr GLAttr, value int32) bool

	// SDL_GL_GetAttribute => Get the actual value for an attribute from the current context.
	//
	//puregogen:function symbol=SDL_GL_GetAttribute
	iGL_GetAttribute func(attr GLAttr, value *int32) bool

	// SDL_GL_CreateContext => Create an OpenGL context for an OpenGL window, and make it current.
	//
	//puregogen:function symbol=SDL_GL_CreateContext
	iGL_CreateContext func(window *Window) GLContext

	// SDL_GL_MakeCurrent => Set up an OpenGL context for rendering into an OpenGL window.
	//
	//puregogen:function symbol=SDL_GL_MakeCurrent
	iGL_MakeCurrent func(window *Window, context GLContext) bool

	// SDL_GL_GetCurrentWindow => Get the currently active OpenGL window.
	//
	//puregogen:function symbol=SDL_GL_GetCurrentWindow
	iGL_GetCurrentWindow func() *Window

	// SDL_GL_GetCurrentContext => Get the currently active OpenGL context.
	//
	//puregogen:function symbol=SDL_GL_GetCurrentContext
	iGL_GetCurrentContext func() GLContext

	// SDL_EGL_GetCurrentDisplay => Get the currently active EGL display.
	//
	//puregogen:function symbol=SDL_EGL_GetCurrentDisplay
	iEGL_GetCurrentDisplay func() EGLDisplay

	// SDL_EGL_GetCurrentConfig => Get the currently active EGL config.
	//
	//puregogen:function symbol=SDL_EGL_GetCurrentConfig
	iEGL_GetCurrentConfig func() EGLConfig

	// SDL_EGL_GetWindowSurface => Get the EGL surface associated with the window.
	//
	//puregogen:function symbol=SDL_EGL_GetWindowSurface
	iEGL_GetWindowSurface func(window *Window) EGLSurface

	// SDL_EGL_SetAttributeCallbacks => Sets the callbacks for defining custom EGLAttrib arrays for EGL initialization.
	//
	//puregogen:function symbol=SDL_EGL_SetAttributeCallbacks
	iEGL_SetAttributeCallbacks func(platformAttribCallback EGLAttribArrayCallback, surfaceAttribCallback EGLIntArrayCallback, contextAttribCallback EGLIntArrayCallback, userdata uintptr)

	// SDL_GL_SetSwapInterval => Set the swap interval for the current OpenGL context.
	//
	//puregogen:function symbol=SDL_GL_SetSwapInterval
	iGL_SetSwapInterval func(interval int32) bool

	// SDL_GL_GetSwapInterval => Get the swap interval for the current OpenGL context.
	//
	//puregogen:function symbol=SDL_GL_GetSwapInterval
	iGL_GetSwapInterval func(interval *int32) bool

	// SDL_GL_SwapWindow => Update a window with OpenGL rendering.
	//
	//puregogen:function symbol=SDL_GL_SwapWindow
	iGL_SwapWindow func(window *Window) bool

	// SDL_GL_DestroyContext => Delete an OpenGL context.
	//
	//puregogen:function symbol=SDL_GL_DestroyContext
	iGL_DestroyContext func(context GLContext) bool

	// SDL_ShowOpenFileDialog => Displays a dialog that lets the user select a file on their filesystem.
	//
	//puregogen:function symbol=SDL_ShowOpenFileDialog
	iShowOpenFileDialog func(callback DialogFileCallback, userdata uintptr, window *Window, filters *DialogFileFilter, nfilters int32, default_location string, allow_many bool)

	// SDL_ShowSaveFileDialog => Displays a dialog that lets the user choose a new or existing file on their filesystem.
	//
	//puregogen:function symbol=SDL_ShowSaveFileDialog
	iShowSaveFileDialog func(callback DialogFileCallback, userdata uintptr, window *Window, filters *DialogFileFilter, nfilters int32, default_location string)

	// SDL_ShowOpenFolderDialog => Displays a dialog that lets the user select a folder on their filesystem.
	//
	//puregogen:function symbol=SDL_ShowOpenFolderDialog
	iShowOpenFolderDialog func(callback DialogFileCallback, userdata uintptr, window *Window, default_location string, allow_many bool)

	// SDL_ShowFileDialogWithProperties => Create and launch a file dialog with the specified properties.
	//
	//puregogen:function symbol=SDL_ShowFileDialogWithProperties
	iShowFileDialogWithProperties func(typ FileDialogType, callback DialogFileCallback, userdata uintptr, props PropertiesID)

	// SDL_GUIDToString => Get an ASCII string representation for a given SDL_GUID.
	//
	//puregogen:function symbol=SDL_GUIDToString
	iGUIDToString func(guid GUID, pszGUID string, cbGUID int32)

	// SDL_StringToGUID => Convert a GUID string into a SDL_GUID structure.
	//
	//puregogen:function symbol=SDL_StringToGUID
	iStringToGUID func(pchGUID string) GUID

	// SDL_GetPowerInfo => Get the current power supply details.
	//
	//puregogen:function symbol=SDL_GetPowerInfo
	iGetPowerInfo func(seconds *int32, percent *int32) PowerState

	// SDL_GetSensors => Get a list of currently connected sensors.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetSensors
	iGetSensors func(count *int32) uintptr

	// SDL_GetSensorNameForID => Get the implementation dependent name of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorNameForID
	iGetSensorNameForID func(instance_id SensorID) string

	// SDL_GetSensorTypeForID => Get the type of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorTypeForID
	iGetSensorTypeForID func(instance_id SensorID) SensorType

	// SDL_GetSensorNonPortableTypeForID => Get the platform dependent type of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorNonPortableTypeForID
	iGetSensorNonPortableTypeForID func(instance_id SensorID) int32

	// SDL_OpenSensor => Open a sensor for use.
	//
	//puregogen:function symbol=SDL_OpenSensor
	iOpenSensor func(instance_id SensorID) *Sensor

	// SDL_GetSensorFromID => Return the SDL_Sensor associated with an instance ID.
	//
	//puregogen:function symbol=SDL_GetSensorFromID
	iGetSensorFromID func(instance_id SensorID) *Sensor

	// SDL_GetSensorProperties => Get the properties associated with a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorProperties
	iGetSensorProperties func(sensor *Sensor) PropertiesID

	// SDL_GetSensorName => Get the implementation dependent name of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorName
	iGetSensorName func(sensor *Sensor) string

	// SDL_GetSensorType => Get the type of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorType
	iGetSensorType func(sensor *Sensor) SensorType

	// SDL_GetSensorNonPortableType => Get the platform dependent type of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorNonPortableType
	iGetSensorNonPortableType func(sensor *Sensor) int32

	// SDL_GetSensorID => Get the instance ID of a sensor.
	//
	//puregogen:function symbol=SDL_GetSensorID
	iGetSensorID func(sensor *Sensor) SensorID

	// SDL_GetSensorData => Get the current state of an opened sensor.
	//
	//puregogen:function symbol=SDL_GetSensorData
	iGetSensorData func(sensor *Sensor, data *float32, num_values int32) bool

	// SDL_CloseSensor => Close a sensor previously opened with SDL_OpenSensor().
	//
	//puregogen:function symbol=SDL_CloseSensor
	iCloseSensor func(sensor *Sensor)

	// SDL_UpdateSensors => Update the current state of the open sensors.
	//
	//puregogen:function symbol=SDL_UpdateSensors
	iUpdateSensors func()

	// SDL_LockJoysticks => Locking for atomic access to the joystick API.
	//
	//puregogen:function symbol=SDL_LockJoysticks
	iLockJoysticks func()

	// SDL_UnlockJoysticks => Unlocking for atomic access to the joystick API.
	//
	//puregogen:function symbol=SDL_UnlockJoysticks
	iUnlockJoysticks func()

	// SDL_HasJoystick => Return whether a joystick is currently connected.
	//
	//puregogen:function symbol=SDL_HasJoystick
	iHasJoystick func() bool

	// SDL_GetJoysticks => Get a list of currently connected joysticks.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetJoysticks
	iGetJoysticks func(count *int32) uintptr

	// SDL_GetJoystickNameForID => Get the implementation dependent name of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickNameForID
	iGetJoystickNameForID func(instance_id JoystickID) string

	// SDL_GetJoystickPathForID => Get the implementation dependent path of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickPathForID
	iGetJoystickPathForID func(instance_id JoystickID) string

	// SDL_GetJoystickPlayerIndexForID => Get the player index of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickPlayerIndexForID
	iGetJoystickPlayerIndexForID func(instance_id JoystickID) int32

	// SDL_GetJoystickGUIDForID => Get the implementation-dependent GUID of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickGUIDForID
	iGetJoystickGUIDForID func(instance_id JoystickID) GUID

	// SDL_GetJoystickVendorForID => Get the USB vendor ID of a joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickVendorForID
	iGetJoystickVendorForID func(instance_id JoystickID) uint16

	// SDL_GetJoystickProductForID => Get the USB product ID of a joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickProductForID
	iGetJoystickProductForID func(instance_id JoystickID) uint16

	// SDL_GetJoystickProductVersionForID => Get the product version of a joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickProductVersionForID
	iGetJoystickProductVersionForID func(instance_id JoystickID) uint16

	// SDL_GetJoystickTypeForID => Get the type of a joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickTypeForID
	iGetJoystickTypeForID func(instance_id JoystickID) JoystickType

	// SDL_OpenJoystick => Open a joystick for use.
	//
	//puregogen:function symbol=SDL_OpenJoystick
	iOpenJoystick func(instance_id JoystickID) *Joystick

	// SDL_GetJoystickFromID => Get the SDL_Joystick associated with an instance ID, if it has been opened.
	//
	//puregogen:function symbol=SDL_GetJoystickFromID
	iGetJoystickFromID func(instance_id JoystickID) *Joystick

	// SDL_GetJoystickFromPlayerIndex => Get the SDL_Joystick associated with a player index.
	//
	//puregogen:function symbol=SDL_GetJoystickFromPlayerIndex
	iGetJoystickFromPlayerIndex func(player_index int32) *Joystick

	// SDL_AttachVirtualJoystick => Attach a new virtual joystick.
	//
	//puregogen:function symbol=SDL_AttachVirtualJoystick
	iAttachVirtualJoystick func(desc *VirtualJoystickDesc) JoystickID

	// SDL_DetachVirtualJoystick => Detach a virtual joystick.
	//
	//puregogen:function symbol=SDL_DetachVirtualJoystick
	iDetachVirtualJoystick func(instance_id JoystickID) bool

	// SDL_IsJoystickVirtual => Query whether or not a joystick is virtual.
	//
	//puregogen:function symbol=SDL_IsJoystickVirtual
	iIsJoystickVirtual func(instance_id JoystickID) bool

	// SDL_SetJoystickVirtualAxis => Set the state of an axis on an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickVirtualAxis
	iSetJoystickVirtualAxis func(joystick *Joystick, axis int32, value int16) bool

	// SDL_SetJoystickVirtualBall => Generate ball motion on an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickVirtualBall
	iSetJoystickVirtualBall func(joystick *Joystick, ball int32, xrel int16, yrel int16) bool

	// SDL_SetJoystickVirtualButton => Set the state of a button on an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickVirtualButton
	iSetJoystickVirtualButton func(joystick *Joystick, button int32, down bool) bool

	// SDL_SetJoystickVirtualHat => Set the state of a hat on an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickVirtualHat
	iSetJoystickVirtualHat func(joystick *Joystick, hat int32, value uint8) bool

	// SDL_SetJoystickVirtualTouchpad => Set touchpad finger state on an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickVirtualTouchpad
	iSetJoystickVirtualTouchpad func(joystick *Joystick, touchpad int32, finger int32, down bool, x float32, y float32, pressure float32) bool

	// SDL_SendJoystickVirtualSensorData => Send a sensor update for an opened virtual joystick.
	//
	//puregogen:function symbol=SDL_SendJoystickVirtualSensorData
	iSendJoystickVirtualSensorData func(joystick *Joystick, typ SensorType, sensor_timestamp uint64, data *float32, num_values int32) bool

	// SDL_GetJoystickProperties => Get the properties associated with a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickProperties
	iGetJoystickProperties func(joystick *Joystick) PropertiesID

	// SDL_GetJoystickName => Get the implementation dependent name of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickName
	iGetJoystickName func(joystick *Joystick) string

	// SDL_GetJoystickPath => Get the implementation dependent path of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickPath
	iGetJoystickPath func(joystick *Joystick) string

	// SDL_GetJoystickPlayerIndex => Get the player index of an opened joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickPlayerIndex
	iGetJoystickPlayerIndex func(joystick *Joystick) int32

	// SDL_SetJoystickPlayerIndex => Set the player index of an opened joystick.
	//
	//puregogen:function symbol=SDL_SetJoystickPlayerIndex
	iSetJoystickPlayerIndex func(joystick *Joystick, player_index int32) bool

	// SDL_GetJoystickGUID => Get the implementation-dependent GUID for the joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickGUID
	iGetJoystickGUID func(joystick *Joystick) GUID

	// SDL_GetJoystickVendor => Get the USB vendor ID of an opened joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickVendor
	iGetJoystickVendor func(joystick *Joystick) uint16

	// SDL_GetJoystickProduct => Get the USB product ID of an opened joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickProduct
	iGetJoystickProduct func(joystick *Joystick) uint16

	// SDL_GetJoystickProductVersion => Get the product version of an opened joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickProductVersion
	iGetJoystickProductVersion func(joystick *Joystick) uint16

	// SDL_GetJoystickFirmwareVersion => Get the firmware version of an opened joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickFirmwareVersion
	iGetJoystickFirmwareVersion func(joystick *Joystick) uint16

	// SDL_GetJoystickSerial => Get the serial number of an opened joystick, if available.
	//
	//puregogen:function symbol=SDL_GetJoystickSerial
	iGetJoystickSerial func(joystick *Joystick) string

	// SDL_GetJoystickType => Get the type of an opened joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickType
	iGetJoystickType func(joystick *Joystick) JoystickType

	// SDL_GetJoystickGUIDInfo => Get the device information encoded in a SDL_GUID structure.
	//
	//puregogen:function symbol=SDL_GetJoystickGUIDInfo
	iGetJoystickGUIDInfo func(guid GUID, vendor *uint16, product *uint16, version *uint16, crc16 *uint16)

	// SDL_JoystickConnected => Get the status of a specified joystick.
	//
	//puregogen:function symbol=SDL_JoystickConnected
	iJoystickConnected func(joystick *Joystick) bool

	// SDL_GetJoystickID => Get the instance ID of an opened joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickID
	iGetJoystickID func(joystick *Joystick) JoystickID

	// SDL_GetNumJoystickAxes => Get the number of general axis controls on a joystick.
	//
	//puregogen:function symbol=SDL_GetNumJoystickAxes
	iGetNumJoystickAxes func(joystick *Joystick) int32

	// SDL_GetNumJoystickBalls => Get the number of trackballs on a joystick.
	//
	//puregogen:function symbol=SDL_GetNumJoystickBalls
	iGetNumJoystickBalls func(joystick *Joystick) int32

	// SDL_GetNumJoystickHats => Get the number of POV hats on a joystick.
	//
	//puregogen:function symbol=SDL_GetNumJoystickHats
	iGetNumJoystickHats func(joystick *Joystick) int32

	// SDL_GetNumJoystickButtons => Get the number of buttons on a joystick.
	//
	//puregogen:function symbol=SDL_GetNumJoystickButtons
	iGetNumJoystickButtons func(joystick *Joystick) int32

	// SDL_SetJoystickEventsEnabled => Set the state of joystick event processing.
	//
	//puregogen:function symbol=SDL_SetJoystickEventsEnabled
	iSetJoystickEventsEnabled func(enabled bool)

	// SDL_JoystickEventsEnabled => Query the state of joystick event processing.
	//
	//puregogen:function symbol=SDL_JoystickEventsEnabled
	iJoystickEventsEnabled func() bool

	// SDL_UpdateJoysticks => Update the current state of the open joysticks.
	//
	//puregogen:function symbol=SDL_UpdateJoysticks
	iUpdateJoysticks func()

	// SDL_GetJoystickAxis => Get the current state of an axis control on a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickAxis
	iGetJoystickAxis func(joystick *Joystick, axis int32) int16

	// SDL_GetJoystickAxisInitialState => Get the initial state of an axis control on a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickAxisInitialState
	iGetJoystickAxisInitialState func(joystick *Joystick, axis int32, state *int16) bool

	// SDL_GetJoystickBall => Get the ball axis change since the last poll.
	//
	//puregogen:function symbol=SDL_GetJoystickBall
	iGetJoystickBall func(joystick *Joystick, ball int32, dx *int32, dy *int32) bool

	// SDL_GetJoystickHat => Get the current state of a POV hat on a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickHat
	iGetJoystickHat func(joystick *Joystick, hat int32) uint8

	// SDL_GetJoystickButton => Get the current state of a button on a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickButton
	iGetJoystickButton func(joystick *Joystick, button int32) bool

	// SDL_RumbleJoystick => Start a rumble effect.
	//
	//puregogen:function symbol=SDL_RumbleJoystick
	iRumbleJoystick func(joystick *Joystick, low_frequency_rumble uint16, high_frequency_rumble uint16, duration_ms uint32) bool

	// SDL_RumbleJoystickTriggers => Start a rumble effect in the joystick's triggers.
	//
	//puregogen:function symbol=SDL_RumbleJoystickTriggers
	iRumbleJoystickTriggers func(joystick *Joystick, left_rumble uint16, right_rumble uint16, duration_ms uint32) bool

	// SDL_SetJoystickLED => Update a joystick's LED color.
	//
	//puregogen:function symbol=SDL_SetJoystickLED
	iSetJoystickLED func(joystick *Joystick, red uint8, green uint8, blue uint8) bool

	// SDL_SendJoystickEffect => Send a joystick specific effect packet.
	//
	//puregogen:function symbol=SDL_SendJoystickEffect
	iSendJoystickEffect func(joystick *Joystick, data uintptr, size int32) bool

	// SDL_CloseJoystick => Close a joystick previously opened with SDL_OpenJoystick().
	//
	//puregogen:function symbol=SDL_CloseJoystick
	iCloseJoystick func(joystick *Joystick)

	// SDL_GetJoystickConnectionState => Get the connection state of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickConnectionState
	iGetJoystickConnectionState func(joystick *Joystick) JoystickConnectionState

	// SDL_GetJoystickPowerInfo => Get the battery state of a joystick.
	//
	//puregogen:function symbol=SDL_GetJoystickPowerInfo
	iGetJoystickPowerInfo func(joystick *Joystick, percent *int32) PowerState

	// SDL_AddGamepadMapping => Add support for gamepads that SDL is unaware of or change the binding of an existing gamepad.
	//
	//puregogen:function symbol=SDL_AddGamepadMapping
	iAddGamepadMapping func(mapping string) int32

	// SDL_AddGamepadMappingsFromIO => Load a set of gamepad mappings from an SDL_IOStream.
	//
	//puregogen:function symbol=SDL_AddGamepadMappingsFromIO
	iAddGamepadMappingsFromIO func(src *IOStream, closeio bool) int32

	// SDL_AddGamepadMappingsFromFile => Load a set of gamepad mappings from a file.
	//
	//puregogen:function symbol=SDL_AddGamepadMappingsFromFile
	iAddGamepadMappingsFromFile func(file string) int32

	// SDL_ReloadGamepadMappings => Reinitialize the SDL mapping database to its initial state.
	//
	//puregogen:function symbol=SDL_ReloadGamepadMappings
	iReloadGamepadMappings func() bool

	// SDL_GetGamepadMappings => Get the current gamepad mappings.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepadMappings
	iGetGamepadMappings func(count *int32) uintptr

	// SDL_GetGamepadMappingForGUID => Get the gamepad mapping string for a given GUID.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepadMappingForGUID
	iGetGamepadMappingForGUID func(guid GUID) uintptr

	// SDL_GetGamepadMapping => Get the current mapping of a gamepad.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepadMapping
	iGetGamepadMapping func(gamepad *Gamepad) uintptr

	// SDL_SetGamepadMapping => Set the current mapping of a joystick or gamepad.
	//
	//puregogen:function symbol=SDL_SetGamepadMapping
	iSetGamepadMapping func(instance_id JoystickID, mapping string) bool

	// SDL_HasGamepad => Return whether a gamepad is currently connected.
	//
	//puregogen:function symbol=SDL_HasGamepad
	iHasGamepad func() bool

	// SDL_GetGamepads => Get a list of currently connected gamepads.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepads
	iGetGamepads func(count *int32) uintptr

	// SDL_IsGamepad => Check if the given joystick is supported by the gamepad interface.
	//
	//puregogen:function symbol=SDL_IsGamepad
	iIsGamepad func(instance_id JoystickID) bool

	// SDL_GetGamepadNameForID => Get the implementation dependent name of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadNameForID
	iGetGamepadNameForID func(instance_id JoystickID) string

	// SDL_GetGamepadPathForID => Get the implementation dependent path of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadPathForID
	iGetGamepadPathForID func(instance_id JoystickID) string

	// SDL_GetGamepadPlayerIndexForID => Get the player index of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadPlayerIndexForID
	iGetGamepadPlayerIndexForID func(instance_id JoystickID) int32

	// SDL_GetGamepadGUIDForID => Get the implementation-dependent GUID of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadGUIDForID
	iGetGamepadGUIDForID func(instance_id JoystickID) GUID

	// SDL_GetGamepadVendorForID => Get the USB vendor ID of a gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadVendorForID
	iGetGamepadVendorForID func(instance_id JoystickID) uint16

	// SDL_GetGamepadProductForID => Get the USB product ID of a gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadProductForID
	iGetGamepadProductForID func(instance_id JoystickID) uint16

	// SDL_GetGamepadProductVersionForID => Get the product version of a gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadProductVersionForID
	iGetGamepadProductVersionForID func(instance_id JoystickID) uint16

	// SDL_GetGamepadTypeForID => Get the type of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadTypeForID
	iGetGamepadTypeForID func(instance_id JoystickID) GamepadType

	// SDL_GetRealGamepadTypeForID => Get the type of a gamepad, ignoring any mapping override.
	//
	//puregogen:function symbol=SDL_GetRealGamepadTypeForID
	iGetRealGamepadTypeForID func(instance_id JoystickID) GamepadType

	// SDL_GetGamepadMappingForID => Get the mapping of a gamepad.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepadMappingForID
	iGetGamepadMappingForID func(instance_id JoystickID) uintptr

	// SDL_OpenGamepad => Open a gamepad for use.
	//
	//puregogen:function symbol=SDL_OpenGamepad
	iOpenGamepad func(instance_id JoystickID) *Gamepad

	// SDL_GetGamepadFromID => Get the SDL_Gamepad associated with a joystick instance ID, if it has been opened.
	//
	//puregogen:function symbol=SDL_GetGamepadFromID
	iGetGamepadFromID func(instance_id JoystickID) *Gamepad

	// SDL_GetGamepadFromPlayerIndex => Get the SDL_Gamepad associated with a player index.
	//
	//puregogen:function symbol=SDL_GetGamepadFromPlayerIndex
	iGetGamepadFromPlayerIndex func(player_index int32) *Gamepad

	// SDL_GetGamepadProperties => Get the properties associated with an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadProperties
	iGetGamepadProperties func(gamepad *Gamepad) PropertiesID

	// SDL_GetGamepadID => Get the instance ID of an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadID
	iGetGamepadID func(gamepad *Gamepad) JoystickID

	// SDL_GetGamepadName => Get the implementation-dependent name for an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadName
	iGetGamepadName func(gamepad *Gamepad) string

	// SDL_GetGamepadPath => Get the implementation-dependent path for an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadPath
	iGetGamepadPath func(gamepad *Gamepad) string

	// SDL_GetGamepadType => Get the type of an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadType
	iGetGamepadType func(gamepad *Gamepad) GamepadType

	// SDL_GetRealGamepadType => Get the type of an opened gamepad, ignoring any mapping override.
	//
	//puregogen:function symbol=SDL_GetRealGamepadType
	iGetRealGamepadType func(gamepad *Gamepad) GamepadType

	// SDL_GetGamepadPlayerIndex => Get the player index of an opened gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadPlayerIndex
	iGetGamepadPlayerIndex func(gamepad *Gamepad) int32

	// SDL_SetGamepadPlayerIndex => Set the player index of an opened gamepad.
	//
	//puregogen:function symbol=SDL_SetGamepadPlayerIndex
	iSetGamepadPlayerIndex func(gamepad *Gamepad, player_index int32) bool

	// SDL_GetGamepadVendor => Get the USB vendor ID of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadVendor
	iGetGamepadVendor func(gamepad *Gamepad) uint16

	// SDL_GetGamepadProduct => Get the USB product ID of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadProduct
	iGetGamepadProduct func(gamepad *Gamepad) uint16

	// SDL_GetGamepadProductVersion => Get the product version of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadProductVersion
	iGetGamepadProductVersion func(gamepad *Gamepad) uint16

	// SDL_GetGamepadFirmwareVersion => Get the firmware version of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadFirmwareVersion
	iGetGamepadFirmwareVersion func(gamepad *Gamepad) uint16

	// SDL_GetGamepadSerial => Get the serial number of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadSerial
	iGetGamepadSerial func(gamepad *Gamepad) string

	// SDL_GetGamepadSteamHandle => Get the Steam Input handle of an opened gamepad, if available.
	//
	//puregogen:function symbol=SDL_GetGamepadSteamHandle
	iGetGamepadSteamHandle func(gamepad *Gamepad) uint64

	// SDL_GetGamepadConnectionState => Get the connection state of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadConnectionState
	iGetGamepadConnectionState func(gamepad *Gamepad) JoystickConnectionState

	// SDL_GetGamepadPowerInfo => Get the battery state of a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadPowerInfo
	iGetGamepadPowerInfo func(gamepad *Gamepad, percent *int32) PowerState

	// SDL_GamepadConnected => Check if a gamepad has been opened and is currently connected.
	//
	//puregogen:function symbol=SDL_GamepadConnected
	iGamepadConnected func(gamepad *Gamepad) bool

	// SDL_GetGamepadJoystick => Get the underlying joystick from a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadJoystick
	iGetGamepadJoystick func(gamepad *Gamepad) *Joystick

	// SDL_SetGamepadEventsEnabled => Set the state of gamepad event processing.
	//
	//puregogen:function symbol=SDL_SetGamepadEventsEnabled
	iSetGamepadEventsEnabled func(enabled bool)

	// SDL_GamepadEventsEnabled => Query the state of gamepad event processing.
	//
	//puregogen:function symbol=SDL_GamepadEventsEnabled
	iGamepadEventsEnabled func() bool

	// SDL_GetGamepadBindings => Get the SDL joystick layer bindings for a gamepad.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetGamepadBindings
	iGetGamepadBindings func(gamepad *Gamepad, count *int32) uintptr

	// SDL_UpdateGamepads => Manually pump gamepad updates if not using the loop.
	//
	//puregogen:function symbol=SDL_UpdateGamepads
	iUpdateGamepads func()

	// SDL_GetGamepadTypeFromString => Convert a string into SDL_GamepadType enum.
	//
	//puregogen:function symbol=SDL_GetGamepadTypeFromString
	iGetGamepadTypeFromString func(str string) GamepadType

	// SDL_GetGamepadStringForType => Convert from an SDL_GamepadType enum to a string.
	//
	//puregogen:function symbol=SDL_GetGamepadStringForType
	iGetGamepadStringForType func(typ GamepadType) string

	// SDL_GetGamepadAxisFromString => Convert a string into SDL_GamepadAxis enum.
	//
	//puregogen:function symbol=SDL_GetGamepadAxisFromString
	iGetGamepadAxisFromString func(str string) GamepadAxis

	// SDL_GetGamepadStringForAxis => Convert from an SDL_GamepadAxis enum to a string.
	//
	//puregogen:function symbol=SDL_GetGamepadStringForAxis
	iGetGamepadStringForAxis func(axis GamepadAxis) string

	// SDL_GamepadHasAxis => Query whether a gamepad has a given axis.
	//
	//puregogen:function symbol=SDL_GamepadHasAxis
	iGamepadHasAxis func(gamepad *Gamepad, axis GamepadAxis) bool

	// SDL_GetGamepadAxis => Get the current state of an axis control on a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadAxis
	iGetGamepadAxis func(gamepad *Gamepad, axis GamepadAxis) int16

	// SDL_GetGamepadButtonFromString => Convert a string into an SDL_GamepadButton enum.
	//
	//puregogen:function symbol=SDL_GetGamepadButtonFromString
	iGetGamepadButtonFromString func(str string) GamepadButton

	// SDL_GetGamepadStringForButton => Convert from an SDL_GamepadButton enum to a string.
	//
	//puregogen:function symbol=SDL_GetGamepadStringForButton
	iGetGamepadStringForButton func(button GamepadButton) string

	// SDL_GamepadHasButton => Query whether a gamepad has a given button.
	//
	//puregogen:function symbol=SDL_GamepadHasButton
	iGamepadHasButton func(gamepad *Gamepad, button GamepadButton) bool

	// SDL_GetGamepadButton => Get the current state of a button on a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadButton
	iGetGamepadButton func(gamepad *Gamepad, button GamepadButton) bool

	// SDL_GetGamepadButtonLabelForType => Get the label of a button on a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadButtonLabelForType
	iGetGamepadButtonLabelForType func(typ GamepadType, button GamepadButton) GamepadButtonLabel

	// SDL_GetGamepadButtonLabel => Get the label of a button on a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadButtonLabel
	iGetGamepadButtonLabel func(gamepad *Gamepad, button GamepadButton) GamepadButtonLabel

	// SDL_GetNumGamepadTouchpads => Get the number of touchpads on a gamepad.
	//
	//puregogen:function symbol=SDL_GetNumGamepadTouchpads
	iGetNumGamepadTouchpads func(gamepad *Gamepad) int32

	// SDL_GetNumGamepadTouchpadFingers => Get the number of supported simultaneous fingers on a touchpad on a game gamepad.
	//
	//puregogen:function symbol=SDL_GetNumGamepadTouchpadFingers
	iGetNumGamepadTouchpadFingers func(gamepad *Gamepad, touchpad int32) int32

	// SDL_GetGamepadTouchpadFinger => Get the current state of a finger on a touchpad on a gamepad.
	//
	//puregogen:function symbol=SDL_GetGamepadTouchpadFinger
	iGetGamepadTouchpadFinger func(gamepad *Gamepad, touchpad int32, finger int32, down *bool, x *float32, y *float32, pressure *float32) bool

	// SDL_GamepadHasSensor => Return whether a gamepad has a particular sensor.
	//
	//puregogen:function symbol=SDL_GamepadHasSensor
	iGamepadHasSensor func(gamepad *Gamepad, typ SensorType) bool

	// SDL_SetGamepadSensorEnabled => Set whether data reporting for a gamepad sensor is enabled.
	//
	//puregogen:function symbol=SDL_SetGamepadSensorEnabled
	iSetGamepadSensorEnabled func(gamepad *Gamepad, typ SensorType, enabled bool) bool

	// SDL_GamepadSensorEnabled => Query whether sensor data reporting is enabled for a gamepad.
	//
	//puregogen:function symbol=SDL_GamepadSensorEnabled
	iGamepadSensorEnabled func(gamepad *Gamepad, typ SensorType) bool

	// SDL_GetGamepadSensorDataRate => Get the data rate (number of events per second) of a gamepad sensor.
	//
	//puregogen:function symbol=SDL_GetGamepadSensorDataRate
	iGetGamepadSensorDataRate func(gamepad *Gamepad, typ SensorType) float32

	// SDL_GetGamepadSensorData => Get the current state of a gamepad sensor.
	//
	//puregogen:function symbol=SDL_GetGamepadSensorData
	iGetGamepadSensorData func(gamepad *Gamepad, typ SensorType, data *float32, num_values int32) bool

	// SDL_RumbleGamepad => Start a rumble effect on a gamepad.
	//
	//puregogen:function symbol=SDL_RumbleGamepad
	iRumbleGamepad func(gamepad *Gamepad, low_frequency_rumble uint16, high_frequency_rumble uint16, duration_ms uint32) bool

	// SDL_RumbleGamepadTriggers => Start a rumble effect in the gamepad's triggers.
	//
	//puregogen:function symbol=SDL_RumbleGamepadTriggers
	iRumbleGamepadTriggers func(gamepad *Gamepad, left_rumble uint16, right_rumble uint16, duration_ms uint32) bool

	// SDL_SetGamepadLED => Update a gamepad's LED color.
	//
	//puregogen:function symbol=SDL_SetGamepadLED
	iSetGamepadLED func(gamepad *Gamepad, red uint8, green uint8, blue uint8) bool

	// SDL_SendGamepadEffect => Send a gamepad specific effect packet.
	//
	//puregogen:function symbol=SDL_SendGamepadEffect
	iSendGamepadEffect func(gamepad *Gamepad, data uintptr, size int32) bool

	// SDL_CloseGamepad => Close a gamepad previously opened with SDL_OpenGamepad().
	//
	//puregogen:function symbol=SDL_CloseGamepad
	iCloseGamepad func(gamepad *Gamepad)

	// SDL_GetGamepadAppleSFSymbolsNameForButton => Return the sfSymbolsName for a given button on a gamepad on Apple platforms.
	//
	//puregogen:function symbol=SDL_GetGamepadAppleSFSymbolsNameForButton
	iGetGamepadAppleSFSymbolsNameForButton func(gamepad *Gamepad, button GamepadButton) string

	// SDL_GetGamepadAppleSFSymbolsNameForAxis => Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.
	//
	//puregogen:function symbol=SDL_GetGamepadAppleSFSymbolsNameForAxis
	iGetGamepadAppleSFSymbolsNameForAxis func(gamepad *Gamepad, axis GamepadAxis) string

	// SDL_HasKeyboard => Return whether a keyboard is currently connected.
	//
	//puregogen:function symbol=SDL_HasKeyboard
	iHasKeyboard func() bool

	// SDL_GetKeyboards => Get a list of currently connected keyboards.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetKeyboards
	iGetKeyboards func(count *int32) uintptr

	// SDL_GetKeyboardNameForID => Get the name of a keyboard.
	//
	//puregogen:function symbol=SDL_GetKeyboardNameForID
	iGetKeyboardNameForID func(instance_id KeyboardID) string

	// SDL_GetKeyboardFocus => Query the window which currently has keyboard focus.
	//
	//puregogen:function symbol=SDL_GetKeyboardFocus
	iGetKeyboardFocus func() *Window

	// SDL_GetKeyboardState => Get a snapshot of the current state of the keyboard.
	//
	//puregogen:function symbol=SDL_GetKeyboardState
	iGetKeyboardState func(numkeys *int32) *bool

	// SDL_ResetKeyboard => Clear the state of the keyboard.
	//
	//puregogen:function symbol=SDL_ResetKeyboard
	iResetKeyboard func()

	// SDL_GetModState => Get the current key modifier state for the keyboard.
	//
	//puregogen:function symbol=SDL_GetModState
	iGetModState func() Keymod

	// SDL_SetModState => Set the current key modifier state for the keyboard.
	//
	//puregogen:function symbol=SDL_SetModState
	iSetModState func(modstate Keymod)

	// SDL_GetKeyFromScancode => Get the key code corresponding to the given scancode according to the current keyboard layout.
	//
	//puregogen:function symbol=SDL_GetKeyFromScancode
	iGetKeyFromScancode func(scancode Scancode, modstate Keymod, key_event bool) Keycode

	// SDL_GetScancodeFromKey => Get the scancode corresponding to the given key code according to the current keyboard layout.
	//
	//puregogen:function symbol=SDL_GetScancodeFromKey
	iGetScancodeFromKey func(key Keycode, modstate *Keymod) Scancode

	// SDL_SetScancodeName => Set a human-readable name for a scancode.
	//
	//puregogen:function symbol=SDL_SetScancodeName
	iSetScancodeName func(scancode Scancode, name string) bool

	// SDL_GetScancodeName => Get a human-readable name for a scancode.
	//
	//puregogen:function symbol=SDL_GetScancodeName
	iGetScancodeName func(scancode Scancode) string

	// SDL_GetScancodeFromName => Get a scancode from a human-readable name.
	//
	//puregogen:function symbol=SDL_GetScancodeFromName
	iGetScancodeFromName func(name string) Scancode

	// SDL_GetKeyName => Get a human-readable name for a key.
	//
	//puregogen:function symbol=SDL_GetKeyName
	iGetKeyName func(key Keycode) string

	// SDL_GetKeyFromName => Get a key code from a human-readable name.
	//
	//puregogen:function symbol=SDL_GetKeyFromName
	iGetKeyFromName func(name string) Keycode

	// SDL_StartTextInput => Start accepting Unicode text input events in a window.
	//
	//puregogen:function symbol=SDL_StartTextInput
	iStartTextInput func(window *Window) bool

	// SDL_StartTextInputWithProperties => Start accepting Unicode text input events in a window, with properties describing the input.
	//
	//puregogen:function symbol=SDL_StartTextInputWithProperties
	iStartTextInputWithProperties func(window *Window, props PropertiesID) bool

	// SDL_TextInputActive => Check whether or not Unicode text input events are enabled for a window.
	//
	//puregogen:function symbol=SDL_TextInputActive
	iTextInputActive func(window *Window) bool

	// SDL_StopTextInput => Stop receiving any text input events in a window.
	//
	//puregogen:function symbol=SDL_StopTextInput
	iStopTextInput func(window *Window) bool

	// SDL_ClearComposition => Dismiss the composition window/IME without disabling the subsystem.
	//
	//puregogen:function symbol=SDL_ClearComposition
	iClearComposition func(window *Window) bool

	// SDL_SetTextInputArea => Set the area used to type Unicode text input.
	//
	//puregogen:function symbol=SDL_SetTextInputArea
	iSetTextInputArea func(window *Window, rect *Rect, cursor int32) bool

	// SDL_GetTextInputArea => Get the area used to type Unicode text input.
	//
	//puregogen:function symbol=SDL_GetTextInputArea
	iGetTextInputArea func(window *Window, rect *Rect, cursor *int32) bool

	// SDL_HasScreenKeyboardSupport => Check whether the platform has screen keyboard support.
	//
	//puregogen:function symbol=SDL_HasScreenKeyboardSupport
	iHasScreenKeyboardSupport func() bool

	// SDL_ScreenKeyboardShown => Check whether the screen keyboard is shown for given window.
	//
	//puregogen:function symbol=SDL_ScreenKeyboardShown
	iScreenKeyboardShown func(window *Window) bool

	// SDL_HasMouse => Return whether a mouse is currently connected.
	//
	//puregogen:function symbol=SDL_HasMouse
	iHasMouse func() bool

	// SDL_GetMice => Get a list of currently connected mice.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetMice
	iGetMice func(count *int32) uintptr

	// SDL_GetMouseNameForID => Get the name of a mouse.
	//
	//puregogen:function symbol=SDL_GetMouseNameForID
	iGetMouseNameForID func(instance_id MouseID) string

	// SDL_GetMouseFocus => Get the window which currently has mouse focus.
	//
	//puregogen:function symbol=SDL_GetMouseFocus
	iGetMouseFocus func() *Window

	// SDL_GetMouseState => Query SDL's cache for the synchronous mouse button state and the window-relative SDL-cursor position.
	//
	//puregogen:function symbol=SDL_GetMouseState
	iGetMouseState func(x *float32, y *float32) MouseButtonFlags

	// SDL_GetGlobalMouseState => Query the platform for the asynchronous mouse button state and the desktop-relative platform-cursor position.
	//
	//puregogen:function symbol=SDL_GetGlobalMouseState
	iGetGlobalMouseState func(x *float32, y *float32) MouseButtonFlags

	// SDL_GetRelativeMouseState => Query SDL's cache for the synchronous mouse button state and accumulated mouse delta since last call.
	//
	//puregogen:function symbol=SDL_GetRelativeMouseState
	iGetRelativeMouseState func(x *float32, y *float32) MouseButtonFlags

	// SDL_WarpMouseInWindow => Move the mouse cursor to the given position within the window.
	//
	//puregogen:function symbol=SDL_WarpMouseInWindow
	iWarpMouseInWindow func(window *Window, x float32, y float32)

	// SDL_WarpMouseGlobal => Move the mouse to the given position in global screen space.
	//
	//puregogen:function symbol=SDL_WarpMouseGlobal
	iWarpMouseGlobal func(x float32, y float32) bool

	// SDL_SetWindowRelativeMouseMode => Set relative mouse mode for a window.
	//
	//puregogen:function symbol=SDL_SetWindowRelativeMouseMode
	iSetWindowRelativeMouseMode func(window *Window, enabled bool) bool

	// SDL_GetWindowRelativeMouseMode => Query whether relative mouse mode is enabled for a window.
	//
	//puregogen:function symbol=SDL_GetWindowRelativeMouseMode
	iGetWindowRelativeMouseMode func(window *Window) bool

	// SDL_CaptureMouse => Capture the mouse and to track input outside an SDL window.
	//
	//puregogen:function symbol=SDL_CaptureMouse
	iCaptureMouse func(enabled bool) bool

	// SDL_CreateCursor => Create a cursor using the specified bitmap data and mask (in MSB format).
	//
	//puregogen:function symbol=SDL_CreateCursor
	iCreateCursor func(data *uint8, mask *uint8, w int32, h int32, hot_x int32, hot_y int32) *Cursor

	// SDL_CreateColorCursor => Create a color cursor.
	//
	//puregogen:function symbol=SDL_CreateColorCursor
	iCreateColorCursor func(surface *Surface, hot_x int32, hot_y int32) *Cursor

	// SDL_CreateSystemCursor => Create a system cursor.
	//
	//puregogen:function symbol=SDL_CreateSystemCursor
	iCreateSystemCursor func(id SystemCursor) *Cursor

	// SDL_SetCursor => Set the active cursor.
	//
	//puregogen:function symbol=SDL_SetCursor
	iSetCursor func(cursor *Cursor) bool

	// SDL_GetCursor => Get the active cursor.
	//
	//puregogen:function symbol=SDL_GetCursor
	iGetCursor func() *Cursor

	// SDL_GetDefaultCursor => Get the default cursor.
	//
	//puregogen:function symbol=SDL_GetDefaultCursor
	iGetDefaultCursor func() *Cursor

	// SDL_DestroyCursor => Free a previously-created cursor.
	//
	//puregogen:function symbol=SDL_DestroyCursor
	iDestroyCursor func(cursor *Cursor)

	// SDL_ShowCursor => Show the cursor.
	//
	//puregogen:function symbol=SDL_ShowCursor
	iShowCursor func() bool

	// SDL_HideCursor => Hide the cursor.
	//
	//puregogen:function symbol=SDL_HideCursor
	iHideCursor func() bool

	// SDL_CursorVisible => Return whether the cursor is currently being shown.
	//
	//puregogen:function symbol=SDL_CursorVisible
	iCursorVisible func() bool

	// SDL_GetTouchDevices => Get a list of registered touch devices.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetTouchDevices
	iGetTouchDevices func(count *int32) uintptr

	// SDL_GetTouchDeviceName => Get the touch device name as reported from the driver.
	//
	//puregogen:function symbol=SDL_GetTouchDeviceName
	iGetTouchDeviceName func(touchID TouchID) string

	// SDL_GetTouchDeviceType => Get the type of the given touch device.
	//
	//puregogen:function symbol=SDL_GetTouchDeviceType
	iGetTouchDeviceType func(touchID TouchID) TouchDeviceType

	// SDL_GetTouchFingers => Get a list of active fingers for a given touch device.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetTouchFingers
	iGetTouchFingers func(touchID TouchID, count *int32) uintptr

	// SDL_PumpEvents => Pump the event loop, gathering events from the input devices.
	//
	//puregogen:function symbol=SDL_PumpEvents
	iPumpEvents func()

	// SDL_PeepEvents => Check the event queue for messages and optionally return them.
	//
	//puregogen:function symbol=SDL_PeepEvents
	iPeepEvents func(events *Event, numevents int32, action EventAction, minType uint32, maxType uint32) int32

	// SDL_HasEvent => Check for the existence of a certain event type in the event queue.
	//
	//puregogen:function symbol=SDL_HasEvent
	iHasEvent func(typ uint32) bool

	// SDL_HasEvents => Check for the existence of certain event types in the event queue.
	//
	//puregogen:function symbol=SDL_HasEvents
	iHasEvents func(minType uint32, maxType uint32) bool

	// SDL_FlushEvent => Clear events of a specific type from the event queue.
	//
	//puregogen:function symbol=SDL_FlushEvent
	iFlushEvent func(typ uint32)

	// SDL_FlushEvents => Clear events of a range of types from the event queue.
	//
	//puregogen:function symbol=SDL_FlushEvents
	iFlushEvents func(minType uint32, maxType uint32)

	// SDL_PollEvent => Poll for currently pending events.
	//
	//puregogen:function symbol=SDL_PollEvent
	iPollEvent func(event *Event) bool

	// SDL_WaitEvent => Wait indefinitely for the next available event.
	//
	//puregogen:function symbol=SDL_WaitEvent
	iWaitEvent func(event *Event) bool

	// SDL_WaitEventTimeout => Wait until the specified timeout (in milliseconds) for the next available event.
	//
	//puregogen:function symbol=SDL_WaitEventTimeout
	iWaitEventTimeout func(event *Event, timeoutMS int32) bool

	// SDL_PushEvent => Add an event to the event queue.
	//
	//puregogen:function symbol=SDL_PushEvent
	iPushEvent func(event *Event) bool

	// SDL_SetEventFilter => Set up a filter to process all events before they are added to the internal event queue.
	//
	//puregogen:function symbol=SDL_SetEventFilter
	iSetEventFilter func(filter EventFilter, userdata uintptr)

	// SDL_GetEventFilter => Query the current event filter.
	//
	//puregogen:function symbol=SDL_GetEventFilter
	iGetEventFilter func(filter *EventFilter, userdata *uintptr) bool

	// SDL_AddEventWatch => Add a callback to be triggered when an event is added to the event queue.
	//
	//puregogen:function symbol=SDL_AddEventWatch
	iAddEventWatch func(filter EventFilter, userdata uintptr) bool

	// SDL_RemoveEventWatch => Remove an event watch callback added with SDL_AddEventWatch().
	//
	//puregogen:function symbol=SDL_RemoveEventWatch
	iRemoveEventWatch func(filter EventFilter, userdata uintptr)

	// SDL_FilterEvents => Run a specific filter function on the current event queue, removing any events for which the filter returns false.
	//
	//puregogen:function symbol=SDL_FilterEvents
	iFilterEvents func(filter EventFilter, userdata uintptr)

	// SDL_SetEventEnabled => Set the state of processing events by type.
	//
	//puregogen:function symbol=SDL_SetEventEnabled
	iSetEventEnabled func(typ uint32, enabled bool)

	// SDL_EventEnabled => Query the state of processing events by type.
	//
	//puregogen:function symbol=SDL_EventEnabled
	iEventEnabled func(typ uint32) bool

	// SDL_RegisterEvents => Allocate a set of user-defined events, and return the beginning event number for that set of events.
	//
	//puregogen:function symbol=SDL_RegisterEvents
	iRegisterEvents func(numevents int32) uint32

	// SDL_GetWindowFromEvent => Get window associated with an event.
	//
	//puregogen:function symbol=SDL_GetWindowFromEvent
	iGetWindowFromEvent func(event *Event) *Window

	// SDL_GetBasePath => Get the directory where the application was run from.
	//
	//puregogen:function symbol=SDL_GetBasePath
	iGetBasePath func() string

	// SDL_GetPrefPath => Get the user-and-app-specific path where files can be written.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetPrefPath
	iGetPrefPath func(org string, app string) uintptr

	// SDL_GetUserFolder => Finds the most suitable user folder for a specific purpose.
	//
	//puregogen:function symbol=SDL_GetUserFolder
	iGetUserFolder func(folder Folder) string

	// SDL_CreateDirectory => Create a directory, and any missing parent directories.
	//
	//puregogen:function symbol=SDL_CreateDirectory
	iCreateDirectory func(path string) bool

	// SDL_EnumerateDirectory => Enumerate a directory through a callback function.
	//
	//puregogen:function symbol=SDL_EnumerateDirectory
	iEnumerateDirectory func(path string, callback EnumerateDirectoryCallback, userdata uintptr) bool

	// SDL_RemovePath => Remove a file or an empty directory.
	//
	//puregogen:function symbol=SDL_RemovePath
	iRemovePath func(path string) bool

	// SDL_RenamePath => Rename a file or directory.
	//
	//puregogen:function symbol=SDL_RenamePath
	iRenamePath func(oldpath string, newpath string) bool

	// SDL_CopyFile => Copy a file.
	//
	//puregogen:function symbol=SDL_CopyFile
	iCopyFile func(oldpath string, newpath string) bool

	// SDL_GetPathInfo => Get information about a filesystem path.
	//
	//puregogen:function symbol=SDL_GetPathInfo
	iGetPathInfo func(path string, info *PathInfo) bool

	// SDL_GlobDirectory => Enumerate a directory tree, filtered by pattern, and return a list.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GlobDirectory
	iGlobDirectory func(path string, pattern string, flags GlobFlags, count *int32) uintptr

	// SDL_GetCurrentDirectory => Get what the system believes is the "current working directory."
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetCurrentDirectory
	iGetCurrentDirectory func() uintptr

	// SDL_GPUSupportsShaderFormats => Checks for GPU runtime support.
	//
	//puregogen:function symbol=SDL_GPUSupportsShaderFormats
	iGPUSupportsShaderFormats func(format_flags GPUShaderFormat, name *byte) bool

	// SDL_GPUSupportsProperties => Checks for GPU runtime support.
	//
	//puregogen:function symbol=SDL_GPUSupportsProperties
	iGPUSupportsProperties func(props PropertiesID) bool

	// SDL_CreateGPUDevice => Creates a GPU context.
	//
	//puregogen:function symbol=SDL_CreateGPUDevice
	iCreateGPUDevice func(format_flags GPUShaderFormat, debug_mode bool, name *byte) *GPUDevice

	// SDL_CreateGPUDeviceWithProperties => Creates a GPU context.
	//
	//puregogen:function symbol=SDL_CreateGPUDeviceWithProperties
	iCreateGPUDeviceWithProperties func(props PropertiesID) *GPUDevice

	// SDL_DestroyGPUDevice => Destroys a GPU context previously returned by SDL_CreateGPUDevice.
	//
	//puregogen:function symbol=SDL_DestroyGPUDevice
	iDestroyGPUDevice func(device *GPUDevice)

	// SDL_GetNumGPUDrivers => Get the number of GPU drivers compiled into SDL.
	//
	//puregogen:function symbol=SDL_GetNumGPUDrivers
	iGetNumGPUDrivers func() int32

	// SDL_GetGPUDriver => Get the name of a built in GPU driver.
	//
	//puregogen:function symbol=SDL_GetGPUDriver
	iGetGPUDriver func(index int32) string

	// SDL_GetGPUDeviceDriver => Returns the name of the backend used to create this GPU context.
	//
	//puregogen:function symbol=SDL_GetGPUDeviceDriver
	iGetGPUDeviceDriver func(device *GPUDevice) string

	// SDL_GetGPUShaderFormats => Returns the supported shader formats for this GPU context.
	//
	//puregogen:function symbol=SDL_GetGPUShaderFormats
	iGetGPUShaderFormats func(device *GPUDevice) GPUShaderFormat

	// SDL_CreateGPUGraphicsPipeline => Creates a pipeline object to be used in a graphics workflow.
	//
	//puregogen:function symbol=SDL_CreateGPUGraphicsPipeline
	iCreateGPUGraphicsPipeline func(device *GPUDevice, createinfo *GPUGraphicsPipelineCreateInfo) *GPUGraphicsPipeline

	// SDL_CreateGPUSampler => Creates a sampler object to be used when binding textures in a graphics workflow.
	//
	//puregogen:function symbol=SDL_CreateGPUSampler
	iCreateGPUSampler func(device *GPUDevice, createinfo *GPUSamplerCreateInfo) *GPUSampler

	// SDL_CreateGPUTexture => Creates a texture object to be used in graphics or compute workflows.
	//
	//puregogen:function symbol=SDL_CreateGPUTexture
	iCreateGPUTexture func(device *GPUDevice, createinfo *GPUTextureCreateInfo) *GPUTexture

	// SDL_CreateGPUBuffer => Creates a buffer object to be used in graphics or compute workflows.
	//
	//puregogen:function symbol=SDL_CreateGPUBuffer
	iCreateGPUBuffer func(device *GPUDevice, createinfo *GPUBufferCreateInfo) *GPUBuffer

	// SDL_CreateGPUTransferBuffer => Creates a transfer buffer to be used when uploading to or downloading from graphics resources.
	//
	//puregogen:function symbol=SDL_CreateGPUTransferBuffer
	iCreateGPUTransferBuffer func(device *GPUDevice, createinfo *GPUTransferBufferCreateInfo) *GPUTransferBuffer

	// SDL_SetGPUBufferName => Sets an arbitrary string constant to label a buffer.
	//
	//puregogen:function symbol=SDL_SetGPUBufferName
	iSetGPUBufferName func(device *GPUDevice, buffer *GPUBuffer, text string)

	// SDL_SetGPUTextureName => Sets an arbitrary string constant to label a texture.
	//
	//puregogen:function symbol=SDL_SetGPUTextureName
	iSetGPUTextureName func(device *GPUDevice, texture *GPUTexture, text string)

	// SDL_InsertGPUDebugLabel => Inserts an arbitrary string label into the command buffer callstream.
	//
	//puregogen:function symbol=SDL_InsertGPUDebugLabel
	iInsertGPUDebugLabel func(command_buffer *GPUCommandBuffer, text string)

	// SDL_PushGPUDebugGroup => Begins a debug group with an arbitary name.
	//
	//puregogen:function symbol=SDL_PushGPUDebugGroup
	iPushGPUDebugGroup func(command_buffer *GPUCommandBuffer, name string)

	// SDL_PopGPUDebugGroup => Ends the most-recently pushed debug group.
	//
	//puregogen:function symbol=SDL_PopGPUDebugGroup
	iPopGPUDebugGroup func(command_buffer *GPUCommandBuffer)

	// SDL_ReleaseGPUTexture => Frees the given texture as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUTexture
	iReleaseGPUTexture func(device *GPUDevice, texture *GPUTexture)

	// SDL_ReleaseGPUSampler => Frees the given sampler as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUSampler
	iReleaseGPUSampler func(device *GPUDevice, sampler *GPUSampler)

	// SDL_ReleaseGPUBuffer => Frees the given buffer as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUBuffer
	iReleaseGPUBuffer func(device *GPUDevice, buffer *GPUBuffer)

	// SDL_ReleaseGPUTransferBuffer => Frees the given transfer buffer as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUTransferBuffer
	iReleaseGPUTransferBuffer func(device *GPUDevice, transfer_buffer *GPUTransferBuffer)

	// SDL_ReleaseGPUComputePipeline => Frees the given compute pipeline as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUComputePipeline
	iReleaseGPUComputePipeline func(device *GPUDevice, compute_pipeline *GPUComputePipeline)

	// SDL_ReleaseGPUShader => Frees the given shader as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUShader
	iReleaseGPUShader func(device *GPUDevice, shader *GPUShader)

	// SDL_ReleaseGPUGraphicsPipeline => Frees the given graphics pipeline as soon as it is safe to do so.
	//
	//puregogen:function symbol=SDL_ReleaseGPUGraphicsPipeline
	iReleaseGPUGraphicsPipeline func(device *GPUDevice, graphics_pipeline *GPUGraphicsPipeline)

	// SDL_AcquireGPUCommandBuffer => Acquire a command buffer.
	//
	//puregogen:function symbol=SDL_AcquireGPUCommandBuffer
	iAcquireGPUCommandBuffer func(device *GPUDevice) *GPUCommandBuffer

	// SDL_PushGPUVertexUniformData => Pushes data to a vertex uniform slot on the command buffer.
	//
	//puregogen:function symbol=SDL_PushGPUVertexUniformData
	iPushGPUVertexUniformData func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32)

	// SDL_PushGPUFragmentUniformData => Pushes data to a fragment uniform slot on the command buffer.
	//
	//puregogen:function symbol=SDL_PushGPUFragmentUniformData
	iPushGPUFragmentUniformData func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32)

	// SDL_PushGPUComputeUniformData => Pushes data to a uniform slot on the command buffer.
	//
	//puregogen:function symbol=SDL_PushGPUComputeUniformData
	iPushGPUComputeUniformData func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32)

	// SDL_BeginGPURenderPass => Begins a render pass on a command buffer.
	//
	//puregogen:function symbol=SDL_BeginGPURenderPass
	iBeginGPURenderPass func(command_buffer *GPUCommandBuffer, color_target_infos *GPUColorTargetInfo, num_color_targets uint32, depth_stencil_target_info *GPUDepthStencilTargetInfo) *GPURenderPass

	// SDL_BindGPUGraphicsPipeline => Binds a graphics pipeline on a render pass to be used in rendering.
	//
	//puregogen:function symbol=SDL_BindGPUGraphicsPipeline
	iBindGPUGraphicsPipeline func(render_pass *GPURenderPass, graphics_pipeline *GPUGraphicsPipeline)

	// SDL_SetGPUViewport => Sets the current viewport state on a command buffer.
	//
	//puregogen:function symbol=SDL_SetGPUViewport
	iSetGPUViewport func(render_pass *GPURenderPass, viewport *GPUViewport)

	// SDL_SetGPUScissor => Sets the current scissor state on a command buffer.
	//
	//puregogen:function symbol=SDL_SetGPUScissor
	iSetGPUScissor func(render_pass *GPURenderPass, scissor *Rect)

	// SDL_SetGPUStencilReference => Sets the current stencil reference value on a command buffer.
	//
	//puregogen:function symbol=SDL_SetGPUStencilReference
	iSetGPUStencilReference func(render_pass *GPURenderPass, reference uint8)

	// SDL_BindGPUVertexBuffers => Binds vertex buffers on a command buffer for use with subsequent draw calls.
	//
	//puregogen:function symbol=SDL_BindGPUVertexBuffers
	iBindGPUVertexBuffers func(render_pass *GPURenderPass, first_slot uint32, bindings *GPUBufferBinding, num_bindings uint32)

	// SDL_BindGPUIndexBuffer => Binds an index buffer on a command buffer for use with subsequent draw calls.
	//
	//puregogen:function symbol=SDL_BindGPUIndexBuffer
	iBindGPUIndexBuffer func(render_pass *GPURenderPass, binding *GPUBufferBinding, index_element_size GPUIndexElementSize)

	// SDL_BindGPUVertexSamplers => Binds texture-sampler pairs for use on the vertex shader.
	//
	//puregogen:function symbol=SDL_BindGPUVertexSamplers
	iBindGPUVertexSamplers func(render_pass *GPURenderPass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32)

	// SDL_BindGPUVertexStorageTextures => Binds storage textures for use on the vertex shader.
	//
	//puregogen:function symbol=SDL_BindGPUVertexStorageTextures
	iBindGPUVertexStorageTextures func(render_pass *GPURenderPass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32)

	// SDL_BindGPUVertexStorageBuffers => Binds storage buffers for use on the vertex shader.
	//
	//puregogen:function symbol=SDL_BindGPUVertexStorageBuffers
	iBindGPUVertexStorageBuffers func(render_pass *GPURenderPass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32)

	// SDL_BindGPUFragmentSamplers => Binds texture-sampler pairs for use on the fragment shader.
	//
	//puregogen:function symbol=SDL_BindGPUFragmentSamplers
	iBindGPUFragmentSamplers func(render_pass *GPURenderPass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32)

	// SDL_BindGPUFragmentStorageTextures => Binds storage textures for use on the fragment shader.
	//
	//puregogen:function symbol=SDL_BindGPUFragmentStorageTextures
	iBindGPUFragmentStorageTextures func(render_pass *GPURenderPass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32)

	// SDL_BindGPUFragmentStorageBuffers => Binds storage buffers for use on the fragment shader.
	//
	//puregogen:function symbol=SDL_BindGPUFragmentStorageBuffers
	iBindGPUFragmentStorageBuffers func(render_pass *GPURenderPass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32)

	// SDL_DrawGPUIndexedPrimitives => Draws data using bound graphics state with an index buffer and instancing enabled.
	//
	//puregogen:function symbol=SDL_DrawGPUIndexedPrimitives
	iDrawGPUIndexedPrimitives func(render_pass *GPURenderPass, num_indices uint32, num_instances uint32, first_index uint32, vertex_offset int32, first_instance uint32)

	// SDL_DrawGPUPrimitives => Draws data using bound graphics state.
	//
	//puregogen:function symbol=SDL_DrawGPUPrimitives
	iDrawGPUPrimitives func(render_pass *GPURenderPass, num_vertices uint32, num_instances uint32, first_vertex uint32, first_instance uint32)

	// SDL_DrawGPUPrimitivesIndirect => Draws data using bound graphics state and with draw parameters set from a buffer.
	//
	//puregogen:function symbol=SDL_DrawGPUPrimitivesIndirect
	iDrawGPUPrimitivesIndirect func(render_pass *GPURenderPass, buffer *GPUBuffer, offset uint32, draw_count uint32)

	// SDL_DrawGPUIndexedPrimitivesIndirect => Draws data using bound graphics state with an index buffer enabled and with draw parameters set from a buffer.
	//
	//puregogen:function symbol=SDL_DrawGPUIndexedPrimitivesIndirect
	iDrawGPUIndexedPrimitivesIndirect func(render_pass *GPURenderPass, buffer *GPUBuffer, offset uint32, draw_count uint32)

	// SDL_EndGPURenderPass => Ends the given render pass.
	//
	//puregogen:function symbol=SDL_EndGPURenderPass
	iEndGPURenderPass func(render_pass *GPURenderPass)

	// SDL_BeginGPUComputePass => Begins a compute pass on a command buffer.
	//
	//puregogen:function symbol=SDL_BeginGPUComputePass
	iBeginGPUComputePass func(command_buffer *GPUCommandBuffer, storage_texture_bindings *GPUStorageTextureReadWriteBinding, num_storage_texture_bindings uint32, storage_buffer_bindings *GPUStorageBufferReadWriteBinding, num_storage_buffer_bindings uint32) *GPUComputePass

	// SDL_BindGPUComputePipeline => Binds a compute pipeline on a command buffer for use in compute dispatch.
	//
	//puregogen:function symbol=SDL_BindGPUComputePipeline
	iBindGPUComputePipeline func(compute_pass *GPUComputePass, compute_pipeline *GPUComputePipeline)

	// SDL_BindGPUComputeSamplers => Binds texture-sampler pairs for use on the compute shader.
	//
	//puregogen:function symbol=SDL_BindGPUComputeSamplers
	iBindGPUComputeSamplers func(compute_pass *GPUComputePass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32)

	// SDL_BindGPUComputeStorageTextures => Binds storage textures as readonly for use on the compute pipeline.
	//
	//puregogen:function symbol=SDL_BindGPUComputeStorageTextures
	iBindGPUComputeStorageTextures func(compute_pass *GPUComputePass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32)

	// SDL_BindGPUComputeStorageBuffers => Binds storage buffers as readonly for use on the compute pipeline.
	//
	//puregogen:function symbol=SDL_BindGPUComputeStorageBuffers
	iBindGPUComputeStorageBuffers func(compute_pass *GPUComputePass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32)

	// SDL_DispatchGPUCompute => Dispatches compute work.
	//
	//puregogen:function symbol=SDL_DispatchGPUCompute
	iDispatchGPUCompute func(compute_pass *GPUComputePass, groupcount_x uint32, groupcount_y uint32, groupcount_z uint32)

	// SDL_DispatchGPUComputeIndirect => Dispatches compute work with parameters set from a buffer.
	//
	//puregogen:function symbol=SDL_DispatchGPUComputeIndirect
	iDispatchGPUComputeIndirect func(compute_pass *GPUComputePass, buffer *GPUBuffer, offset uint32)

	// SDL_EndGPUComputePass => Ends the current compute pass.
	//
	//puregogen:function symbol=SDL_EndGPUComputePass
	iEndGPUComputePass func(compute_pass *GPUComputePass)

	// SDL_MapGPUTransferBuffer => Maps a transfer buffer into application address space.
	//
	//puregogen:function symbol=SDL_MapGPUTransferBuffer
	iMapGPUTransferBuffer func(device *GPUDevice, transfer_buffer *GPUTransferBuffer, cycle bool) uintptr

	// SDL_UnmapGPUTransferBuffer => Unmaps a previously mapped transfer buffer.
	//
	//puregogen:function symbol=SDL_UnmapGPUTransferBuffer
	iUnmapGPUTransferBuffer func(device *GPUDevice, transfer_buffer *GPUTransferBuffer)

	// SDL_BeginGPUCopyPass => Begins a copy pass on a command buffer.
	//
	//puregogen:function symbol=SDL_BeginGPUCopyPass
	iBeginGPUCopyPass func(command_buffer *GPUCommandBuffer) *GPUCopyPass

	// SDL_UploadToGPUTexture => Uploads data from a transfer buffer to a texture.
	//
	//puregogen:function symbol=SDL_UploadToGPUTexture
	iUploadToGPUTexture func(copy_pass *GPUCopyPass, source *GPUTextureTransferInfo, destination *GPUTextureRegion, cycle bool)

	// SDL_UploadToGPUBuffer => Uploads data from a transfer buffer to a buffer.
	//
	//puregogen:function symbol=SDL_UploadToGPUBuffer
	iUploadToGPUBuffer func(copy_pass *GPUCopyPass, source *GPUTransferBufferLocation, destination *GPUBufferRegion, cycle bool)

	// SDL_CopyGPUTextureToTexture => Performs a texture-to-texture copy.
	//
	//puregogen:function symbol=SDL_CopyGPUTextureToTexture
	iCopyGPUTextureToTexture func(copy_pass *GPUCopyPass, source *GPUTextureLocation, destination *GPUTextureLocation, w uint32, h uint32, d uint32, cycle bool)

	// SDL_CopyGPUBufferToBuffer => Performs a buffer-to-buffer copy.
	//
	//puregogen:function symbol=SDL_CopyGPUBufferToBuffer
	iCopyGPUBufferToBuffer func(copy_pass *GPUCopyPass, source *GPUBufferLocation, destination *GPUBufferLocation, size uint32, cycle bool)

	// SDL_DownloadFromGPUTexture => Copies data from a texture to a transfer buffer on the GPU timeline.
	//
	//puregogen:function symbol=SDL_DownloadFromGPUTexture
	iDownloadFromGPUTexture func(copy_pass *GPUCopyPass, source *GPUTextureRegion, destination *GPUTextureTransferInfo)

	// SDL_DownloadFromGPUBuffer => Copies data from a buffer to a transfer buffer on the GPU timeline.
	//
	//puregogen:function symbol=SDL_DownloadFromGPUBuffer
	iDownloadFromGPUBuffer func(copy_pass *GPUCopyPass, source *GPUBufferRegion, destination *GPUTransferBufferLocation)

	// SDL_EndGPUCopyPass => Ends the current copy pass.
	//
	//puregogen:function symbol=SDL_EndGPUCopyPass
	iEndGPUCopyPass func(copy_pass *GPUCopyPass)

	// SDL_GenerateMipmapsForGPUTexture => Generates mipmaps for the given texture.
	//
	//puregogen:function symbol=SDL_GenerateMipmapsForGPUTexture
	iGenerateMipmapsForGPUTexture func(command_buffer *GPUCommandBuffer, texture *GPUTexture)

	// SDL_BlitGPUTexture => Blits from a source texture region to a destination texture region.
	//
	//puregogen:function symbol=SDL_BlitGPUTexture
	iBlitGPUTexture func(command_buffer *GPUCommandBuffer, info *GPUBlitInfo)

	// SDL_WindowSupportsGPUSwapchainComposition => Determines whether a swapchain composition is supported by the window.
	//
	//puregogen:function symbol=SDL_WindowSupportsGPUSwapchainComposition
	iWindowSupportsGPUSwapchainComposition func(device *GPUDevice, window *Window, swapchain_composition GPUSwapchainComposition) bool

	// SDL_WindowSupportsGPUPresentMode => Determines whether a presentation mode is supported by the window.
	//
	//puregogen:function symbol=SDL_WindowSupportsGPUPresentMode
	iWindowSupportsGPUPresentMode func(device *GPUDevice, window *Window, present_mode GPUPresentMode) bool

	// SDL_ClaimWindowForGPUDevice => Claims a window, creating a swapchain structure for it.
	//
	//puregogen:function symbol=SDL_ClaimWindowForGPUDevice
	iClaimWindowForGPUDevice func(device *GPUDevice, window *Window) bool

	// SDL_ReleaseWindowFromGPUDevice => Unclaims a window, destroying its swapchain structure.
	//
	//puregogen:function symbol=SDL_ReleaseWindowFromGPUDevice
	iReleaseWindowFromGPUDevice func(device *GPUDevice, window *Window)

	// SDL_SetGPUSwapchainParameters => Changes the swapchain parameters for the given claimed window.
	//
	//puregogen:function symbol=SDL_SetGPUSwapchainParameters
	iSetGPUSwapchainParameters func(device *GPUDevice, window *Window, swapchain_composition GPUSwapchainComposition, present_mode GPUPresentMode) bool

	// SDL_SetGPUAllowedFramesInFlight => Configures the maximum allowed number of frames in flight.
	//
	//puregogen:function symbol=SDL_SetGPUAllowedFramesInFlight
	iSetGPUAllowedFramesInFlight func(device *GPUDevice, allowed_frames_in_flight uint32) bool

	// SDL_GetGPUSwapchainTextureFormat => Obtains the texture format of the swapchain for the given window.
	//
	//puregogen:function symbol=SDL_GetGPUSwapchainTextureFormat
	iGetGPUSwapchainTextureFormat func(device *GPUDevice, window *Window) GPUTextureFormat

	// SDL_AcquireGPUSwapchainTexture => Acquire a texture to use in presentation.
	//
	//puregogen:function symbol=SDL_AcquireGPUSwapchainTexture
	iAcquireGPUSwapchainTexture func(command_buffer *GPUCommandBuffer, window *Window, swapchain_texture **GPUTexture, swapchain_texture_width *uint32, swapchain_texture_height *uint32) bool

	// SDL_WaitForGPUSwapchain => Blocks the thread until a swapchain texture is available to be acquired.
	//
	//puregogen:function symbol=SDL_WaitForGPUSwapchain
	iWaitForGPUSwapchain func(device *GPUDevice, window *Window) bool

	// SDL_WaitAndAcquireGPUSwapchainTexture => Blocks the thread until a swapchain texture is available to be acquired, and then acquires it.
	//
	//puregogen:function symbol=SDL_WaitAndAcquireGPUSwapchainTexture
	iWaitAndAcquireGPUSwapchainTexture func(command_buffer *GPUCommandBuffer, window *Window, swapchain_texture **GPUTexture, swapchain_texture_width *uint32, swapchain_texture_height *uint32) bool

	// SDL_SubmitGPUCommandBuffer => Submits a command buffer so its commands can be processed on the GPU.
	//
	//puregogen:function symbol=SDL_SubmitGPUCommandBuffer
	iSubmitGPUCommandBuffer func(command_buffer *GPUCommandBuffer) bool

	// SDL_SubmitGPUCommandBufferAndAcquireFence => Submits a command buffer so its commands can be processed on the GPU, and acquires a fence associated with the command buffer.
	//
	//puregogen:function symbol=SDL_SubmitGPUCommandBufferAndAcquireFence
	iSubmitGPUCommandBufferAndAcquireFence func(command_buffer *GPUCommandBuffer) *GPUFence

	// SDL_CancelGPUCommandBuffer => Cancels a command buffer.
	//
	//puregogen:function symbol=SDL_CancelGPUCommandBuffer
	iCancelGPUCommandBuffer func(command_buffer *GPUCommandBuffer) bool

	// SDL_WaitForGPUIdle => Blocks the thread until the GPU is completely idle.
	//
	//puregogen:function symbol=SDL_WaitForGPUIdle
	iWaitForGPUIdle func(device *GPUDevice) bool

	// SDL_WaitForGPUFences => Blocks the thread until the given fences are signaled.
	//
	//puregogen:function symbol=SDL_WaitForGPUFences
	iWaitForGPUFences func(device *GPUDevice, wait_all bool, fences **GPUFence, num_fences uint32) bool

	// SDL_QueryGPUFence => Checks the status of a fence.
	//
	//puregogen:function symbol=SDL_QueryGPUFence
	iQueryGPUFence func(device *GPUDevice, fence *GPUFence) bool

	// SDL_ReleaseGPUFence => Releases a fence obtained from SDL_SubmitGPUCommandBufferAndAcquireFence.
	//
	//puregogen:function symbol=SDL_ReleaseGPUFence
	iReleaseGPUFence func(device *GPUDevice, fence *GPUFence)

	// SDL_GPUTextureFormatTexelBlockSize => Obtains the texel block size for a texture format.
	//
	//puregogen:function symbol=SDL_GPUTextureFormatTexelBlockSize
	iGPUTextureFormatTexelBlockSize func(format GPUTextureFormat) uint32

	// SDL_GPUTextureSupportsFormat => Determines whether a texture format is supported for a given type and usage.
	//
	//puregogen:function symbol=SDL_GPUTextureSupportsFormat
	iGPUTextureSupportsFormat func(device *GPUDevice, format GPUTextureFormat, typ GPUTextureType, usage GPUTextureUsageFlags) bool

	// SDL_GPUTextureSupportsSampleCount => Determines if a sample count for a texture format is supported.
	//
	//puregogen:function symbol=SDL_GPUTextureSupportsSampleCount
	iGPUTextureSupportsSampleCount func(device *GPUDevice, format GPUTextureFormat, sample_count GPUSampleCount) bool

	// SDL_CalculateGPUTextureFormatSize => Calculate the size in bytes of a texture format with dimensions.
	//
	//puregogen:function symbol=SDL_CalculateGPUTextureFormatSize
	iCalculateGPUTextureFormatSize func(format GPUTextureFormat, width uint32, height uint32, depth_or_layer_count uint32) uint32

	// SDL_GetHaptics => Get a list of currently connected haptic devices.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetHaptics
	iGetHaptics func(count *int32) uintptr

	// SDL_GetHapticNameForID => Get the implementation dependent name of a haptic device.
	//
	//puregogen:function symbol=SDL_GetHapticNameForID
	iGetHapticNameForID func(instance_id HapticID) string

	// SDL_OpenHaptic => Open a haptic device for use.
	//
	//puregogen:function symbol=SDL_OpenHaptic
	iOpenHaptic func(instance_id HapticID) *Haptic

	// SDL_GetHapticFromID => Get the SDL_Haptic associated with an instance ID, if it has been opened.
	//
	//puregogen:function symbol=SDL_GetHapticFromID
	iGetHapticFromID func(instance_id HapticID) *Haptic

	// SDL_GetHapticID => Get the instance ID of an opened haptic device.
	//
	//puregogen:function symbol=SDL_GetHapticID
	iGetHapticID func(haptic *Haptic) HapticID

	// SDL_GetHapticName => Get the implementation dependent name of a haptic device.
	//
	//puregogen:function symbol=SDL_GetHapticName
	iGetHapticName func(haptic *Haptic) string

	// SDL_IsMouseHaptic => Query whether or not the current mouse has haptic capabilities.
	//
	//puregogen:function symbol=SDL_IsMouseHaptic
	iIsMouseHaptic func() bool

	// SDL_OpenHapticFromMouse => Try to open a haptic device from the current mouse.
	//
	//puregogen:function symbol=SDL_OpenHapticFromMouse
	iOpenHapticFromMouse func() *Haptic

	// SDL_IsJoystickHaptic => Query if a joystick has haptic features.
	//
	//puregogen:function symbol=SDL_IsJoystickHaptic
	iIsJoystickHaptic func(joystick *Joystick) bool

	// SDL_OpenHapticFromJoystick => Open a haptic device for use from a joystick device.
	//
	//puregogen:function symbol=SDL_OpenHapticFromJoystick
	iOpenHapticFromJoystick func(joystick *Joystick) *Haptic

	// SDL_CloseHaptic => Close a haptic device previously opened with SDL_OpenHaptic().
	//
	//puregogen:function symbol=SDL_CloseHaptic
	iCloseHaptic func(haptic *Haptic)

	// SDL_GetMaxHapticEffects => Get the number of effects a haptic device can store.
	//
	//puregogen:function symbol=SDL_GetMaxHapticEffects
	iGetMaxHapticEffects func(haptic *Haptic) int32

	// SDL_GetMaxHapticEffectsPlaying => Get the number of effects a haptic device can play at the same time.
	//
	//puregogen:function symbol=SDL_GetMaxHapticEffectsPlaying
	iGetMaxHapticEffectsPlaying func(haptic *Haptic) int32

	// SDL_GetHapticFeatures => Get the haptic device's supported features in bitwise manner.
	//
	//puregogen:function symbol=SDL_GetHapticFeatures
	iGetHapticFeatures func(haptic *Haptic) uint32

	// SDL_GetNumHapticAxes => Get the number of haptic axes the device has.
	//
	//puregogen:function symbol=SDL_GetNumHapticAxes
	iGetNumHapticAxes func(haptic *Haptic) int32

	// SDL_HapticEffectSupported => Check to see if an effect is supported by a haptic device.
	//
	//puregogen:function symbol=SDL_HapticEffectSupported
	iHapticEffectSupported func(haptic *Haptic, effect *HapticEffect) bool

	// SDL_CreateHapticEffect => Create a new haptic effect on a specified device.
	//
	//puregogen:function symbol=SDL_CreateHapticEffect
	iCreateHapticEffect func(haptic *Haptic, effect *HapticEffect) int32

	// SDL_UpdateHapticEffect => Update the properties of an effect.
	//
	//puregogen:function symbol=SDL_UpdateHapticEffect
	iUpdateHapticEffect func(haptic *Haptic, effect int32, data *HapticEffect) bool

	// SDL_RunHapticEffect => Run the haptic effect on its associated haptic device.
	//
	//puregogen:function symbol=SDL_RunHapticEffect
	iRunHapticEffect func(haptic *Haptic, effect int32, iterations uint32) bool

	// SDL_StopHapticEffect => Stop the haptic effect on its associated haptic device.
	//
	//puregogen:function symbol=SDL_StopHapticEffect
	iStopHapticEffect func(haptic *Haptic, effect int32) bool

	// SDL_DestroyHapticEffect => Destroy a haptic effect on the device.
	//
	//puregogen:function symbol=SDL_DestroyHapticEffect
	iDestroyHapticEffect func(haptic *Haptic, effect int32)

	// SDL_GetHapticEffectStatus => Get the status of the current effect on the specified haptic device.
	//
	//puregogen:function symbol=SDL_GetHapticEffectStatus
	iGetHapticEffectStatus func(haptic *Haptic, effect int32) bool

	// SDL_SetHapticGain => Set the global gain of the specified haptic device.
	//
	//puregogen:function symbol=SDL_SetHapticGain
	iSetHapticGain func(haptic *Haptic, gain int32) bool

	// SDL_SetHapticAutocenter => Set the global autocenter of the device.
	//
	//puregogen:function symbol=SDL_SetHapticAutocenter
	iSetHapticAutocenter func(haptic *Haptic, autocenter int32) bool

	// SDL_PauseHaptic => Pause a haptic device.
	//
	//puregogen:function symbol=SDL_PauseHaptic
	iPauseHaptic func(haptic *Haptic) bool

	// SDL_ResumeHaptic => Resume a haptic device.
	//
	//puregogen:function symbol=SDL_ResumeHaptic
	iResumeHaptic func(haptic *Haptic) bool

	// SDL_StopHapticEffects => Stop all the currently playing effects on a haptic device.
	//
	//puregogen:function symbol=SDL_StopHapticEffects
	iStopHapticEffects func(haptic *Haptic) bool

	// SDL_HapticRumbleSupported => Check whether rumble is supported on a haptic device.
	//
	//puregogen:function symbol=SDL_HapticRumbleSupported
	iHapticRumbleSupported func(haptic *Haptic) bool

	// SDL_InitHapticRumble => Initialize a haptic device for simple rumble playback.
	//
	//puregogen:function symbol=SDL_InitHapticRumble
	iInitHapticRumble func(haptic *Haptic) bool

	// SDL_PlayHapticRumble => Run a simple rumble effect on a haptic device.
	//
	//puregogen:function symbol=SDL_PlayHapticRumble
	iPlayHapticRumble func(haptic *Haptic, strength float32, length uint32) bool

	// SDL_StopHapticRumble => Stop the simple rumble on a haptic device.
	//
	//puregogen:function symbol=SDL_StopHapticRumble
	iStopHapticRumble func(haptic *Haptic) bool

	// SDL_SetHintWithPriority => Set a hint with a specific priority.
	//
	//puregogen:function symbol=SDL_SetHintWithPriority
	iSetHintWithPriority func(name string, value string, priority HintPriority) bool

	// SDL_SetHint => Set a hint with normal priority.
	//
	//puregogen:function symbol=SDL_SetHint
	iSetHint func(name string, value string) bool

	// SDL_ResetHint => Reset a hint to the default value.
	//
	//puregogen:function symbol=SDL_ResetHint
	iResetHint func(name string) bool

	// SDL_ResetHints => Reset all hints to the default values.
	//
	//puregogen:function symbol=SDL_ResetHints
	iResetHints func()

	// SDL_GetHint => Get the value of a hint.
	//
	//puregogen:function symbol=SDL_GetHint
	iGetHint func(name string) string

	// SDL_GetHintBoolean => Get the boolean value of a hint variable.
	//
	//puregogen:function symbol=SDL_GetHintBoolean
	iGetHintBoolean func(name string, default_value bool) bool

	// SDL_AddHintCallback => Add a function to watch a particular hint.
	//
	//puregogen:function symbol=SDL_AddHintCallback
	iAddHintCallback func(name string, callback HintCallback, userdata uintptr) bool

	// SDL_RemoveHintCallback => Remove a function watching a particular hint.
	//
	//puregogen:function symbol=SDL_RemoveHintCallback
	iRemoveHintCallback func(name string, callback HintCallback, userdata uintptr)

	// SDL_Init => Initialize the SDL library.
	//
	//puregogen:function symbol=SDL_Init
	iInit func(flags InitFlags) bool

	// SDL_InitSubSystem => Compatibility function to initialize the SDL library.
	//
	//puregogen:function symbol=SDL_InitSubSystem
	iInitSubSystem func(flags InitFlags) bool

	// SDL_QuitSubSystem => Shut down specific SDL subsystems.
	//
	//puregogen:function symbol=SDL_QuitSubSystem
	iQuitSubSystem func(flags InitFlags)

	// SDL_WasInit => Get a mask of the specified subsystems which are currently initialized.
	//
	//puregogen:function symbol=SDL_WasInit
	iWasInit func(flags InitFlags) InitFlags

	// SDL_Quit => Clean up all initialized subsystems.
	//
	//puregogen:function symbol=SDL_Quit
	iQuit func()

	// SDL_IsMainThread => Return whether this is the main thread.
	//
	//puregogen:function symbol=SDL_IsMainThread
	iIsMainThread func() bool

	// SDL_RunOnMainThread => Call a function on the main thread during event processing.
	//
	//puregogen:function symbol=SDL_RunOnMainThread
	iRunOnMainThread func(callback MainThreadCallback, userdata uintptr, wait_complete bool) bool

	// SDL_SetAppMetadata => Specify basic metadata about your app.
	//
	//puregogen:function symbol=SDL_SetAppMetadata
	iSetAppMetadata func(appname string, appversion string, appidentifier string) bool

	// SDL_SetAppMetadataProperty => Specify metadata about your app through a set of properties.
	//
	//puregogen:function symbol=SDL_SetAppMetadataProperty
	iSetAppMetadataProperty func(name string, value string) bool

	// SDL_GetAppMetadataProperty => Get metadata about your app.
	//
	//puregogen:function symbol=SDL_GetAppMetadataProperty
	iGetAppMetadataProperty func(name string) string

	// SDL_LoadObject => Dynamically load a shared object.
	//
	//puregogen:function symbol=SDL_LoadObject
	iLoadObject func(sofile string) *SharedObject

	// SDL_LoadFunction => Look up the address of the named function in a shared object.
	//
	//puregogen:function symbol=SDL_LoadFunction
	iLoadFunction func(handle *SharedObject, name string) FunctionPointer

	// SDL_UnloadObject => Unload a shared object from memory.
	//
	//puregogen:function symbol=SDL_UnloadObject
	iUnloadObject func(handle *SharedObject)

	// SDL_GetPreferredLocales => Report the user's preferred locale.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GetPreferredLocales
	iGetPreferredLocales func(count *int32) uintptr

	// SDL_SetLogPriorities => Set the priority of all log categories.
	//
	//puregogen:function symbol=SDL_SetLogPriorities
	iSetLogPriorities func(priority LogPriority)

	// SDL_SetLogPriority => Set the priority of a particular log category.
	//
	//puregogen:function symbol=SDL_SetLogPriority
	iSetLogPriority func(category int32, priority LogPriority)

	// SDL_GetLogPriority => Get the priority of a particular log category.
	//
	//puregogen:function symbol=SDL_GetLogPriority
	iGetLogPriority func(category int32) LogPriority

	// SDL_ResetLogPriorities => Reset all priorities to default.
	//
	//puregogen:function symbol=SDL_ResetLogPriorities
	iResetLogPriorities func()

	// SDL_SetLogPriorityPrefix => Set the text prepended to log messages of a given priority.
	//
	//puregogen:function symbol=SDL_SetLogPriorityPrefix
	iSetLogPriorityPrefix func(priority LogPriority, prefix string) bool

	// SDL_Log => Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.
	//
	//puregogen:function symbol=SDL_Log
	iLog func(fmt string)

	// SDL_LogTrace => Log a message with SDL_LOG_PRIORITY_TRACE.
	//
	//puregogen:function symbol=SDL_LogTrace
	iLogTrace func(category int32, fmt string)

	// SDL_LogVerbose => Log a message with SDL_LOG_PRIORITY_VERBOSE.
	//
	//puregogen:function symbol=SDL_LogVerbose
	iLogVerbose func(category int32, fmt string)

	// SDL_LogDebug => Log a message with SDL_LOG_PRIORITY_DEBUG.
	//
	//puregogen:function symbol=SDL_LogDebug
	iLogDebug func(category int32, fmt string)

	// SDL_LogInfo => Log a message with SDL_LOG_PRIORITY_INFO.
	//
	//puregogen:function symbol=SDL_LogInfo
	iLogInfo func(category int32, fmt string)

	// SDL_LogWarn => Log a message with SDL_LOG_PRIORITY_WARN.
	//
	//puregogen:function symbol=SDL_LogWarn
	iLogWarn func(category int32, fmt string)

	// SDL_LogError => Log a message with SDL_LOG_PRIORITY_ERROR.
	//
	//puregogen:function symbol=SDL_LogError
	iLogError func(category int32, fmt string)

	// SDL_LogCritical => Log a message with SDL_LOG_PRIORITY_CRITICAL.
	//
	//puregogen:function symbol=SDL_LogCritical
	iLogCritical func(category int32, fmt string)

	// SDL_LogMessage => Log a message with the specified category and priority.
	//
	//puregogen:function symbol=SDL_LogMessage
	iLogMessage func(category int32, priority LogPriority, fmt string)

	// SDL_LogMessageV => Log a message with the specified category and priority.
	//
	//puregogen:function symbol=SDL_LogMessageV
	iLogMessageV func(category int32, priority LogPriority, fmt string, ap va_list)

	// SDL_GetDefaultLogOutputFunction => Get the default log output function.
	//
	//puregogen:function symbol=SDL_GetDefaultLogOutputFunction
	iGetDefaultLogOutputFunction func() LogOutputFunction

	// SDL_GetLogOutputFunction => Get the current log output function.
	//
	//puregogen:function symbol=SDL_GetLogOutputFunction
	iGetLogOutputFunction func(callback *LogOutputFunction, userdata *uintptr)

	// SDL_SetLogOutputFunction => Replace the default log output function with one of your own.
	//
	//puregogen:function symbol=SDL_SetLogOutputFunction
	iSetLogOutputFunction func(callback LogOutputFunction, userdata uintptr)

	// SDL_ShowSimpleMessageBox => Display a simple modal message box.
	//
	//puregogen:function symbol=SDL_ShowSimpleMessageBox
	iShowSimpleMessageBox func(flags MessageBoxFlags, title string, message string, window *Window) bool

	// SDL_Metal_CreateView => Create a CAMetalLayer-backed NSView/UIView and attach it to the specified window.
	//
	//puregogen:function symbol=SDL_Metal_CreateView
	iMetal_CreateView func(window *Window) MetalView

	// SDL_Metal_DestroyView => Destroy an existing SDL_MetalView object.
	//
	//puregogen:function symbol=SDL_Metal_DestroyView
	iMetal_DestroyView func(view MetalView)

	// SDL_Metal_GetLayer => Get a pointer to the backing CAMetalLayer for the given view.
	//
	//puregogen:function symbol=SDL_Metal_GetLayer
	iMetal_GetLayer func(view MetalView) uintptr

	// SDL_OpenURL => Open a URL/URI in the browser or other appropriate external application.
	//
	//puregogen:function symbol=SDL_OpenURL
	iOpenURL func(url string) bool

	// SDL_CreateProcess => Create a new process.
	//
	//puregogen:function symbol=SDL_CreateProcess
	iCreateProcess func(args *string, pipe_stdio bool) *Process

	// SDL_CreateProcessWithProperties => Create a new process with the specified properties.
	//
	//puregogen:function symbol=SDL_CreateProcessWithProperties
	iCreateProcessWithProperties func(props PropertiesID) *Process

	// SDL_GetProcessProperties => Get the properties associated with a process.
	//
	//puregogen:function symbol=SDL_GetProcessProperties
	iGetProcessProperties func(process *Process) PropertiesID

	// SDL_ReadProcess => Read all the output from a process.
	//
	//puregogen:function symbol=SDL_ReadProcess
	iReadProcess func(process *Process, datasize *uintptr, exitcode *int32) uintptr

	// SDL_GetProcessInput => Get the SDL_IOStream associated with process standard input.
	//
	//puregogen:function symbol=SDL_GetProcessInput
	iGetProcessInput func(process *Process) *IOStream

	// SDL_GetProcessOutput => Get the SDL_IOStream associated with process standard output.
	//
	//puregogen:function symbol=SDL_GetProcessOutput
	iGetProcessOutput func(process *Process) *IOStream

	// SDL_KillProcess => Stop a process.
	//
	//puregogen:function symbol=SDL_KillProcess
	iKillProcess func(process *Process, force bool) bool

	// SDL_WaitProcess => Wait for a process to finish.
	//
	//puregogen:function symbol=SDL_WaitProcess
	iWaitProcess func(process *Process, block bool, exitcode *int32) bool

	// SDL_DestroyProcess => Destroy a previously created process object.
	//
	//puregogen:function symbol=SDL_DestroyProcess
	iDestroyProcess func(process *Process)

	// SDL_GetNumRenderDrivers => Get the number of 2D rendering drivers available for the current display.
	//
	//puregogen:function symbol=SDL_GetNumRenderDrivers
	iGetNumRenderDrivers func() int32

	// SDL_GetRenderDriver => Use this function to get the name of a built in 2D rendering driver.
	//
	//puregogen:function symbol=SDL_GetRenderDriver
	iGetRenderDriver func(index int32) string

	// SDL_CreateWindowAndRenderer => Create a window and default renderer.
	//
	//puregogen:function symbol=SDL_CreateWindowAndRenderer
	iCreateWindowAndRenderer func(title string, width int32, height int32, window_flags WindowFlags, window **Window, renderer **Renderer) bool

	// SDL_CreateRenderer => Create a 2D rendering context for a window.
	//
	//puregogen:function symbol=SDL_CreateRenderer
	iCreateRenderer func(window *Window, name string) *Renderer

	// SDL_CreateRendererWithProperties => Create a 2D rendering context for a window, with the specified properties.
	//
	//puregogen:function symbol=SDL_CreateRendererWithProperties
	iCreateRendererWithProperties func(props PropertiesID) *Renderer

	// SDL_CreateSoftwareRenderer => Create a 2D software rendering context for a surface.
	//
	//puregogen:function symbol=SDL_CreateSoftwareRenderer
	iCreateSoftwareRenderer func(surface *Surface) *Renderer

	// SDL_GetRenderer => Get the renderer associated with a window.
	//
	//puregogen:function symbol=SDL_GetRenderer
	iGetRenderer func(window *Window) *Renderer

	// SDL_GetRenderWindow => Get the window associated with a renderer.
	//
	//puregogen:function symbol=SDL_GetRenderWindow
	iGetRenderWindow func(renderer *Renderer) *Window

	// SDL_GetRendererName => Get the name of a renderer.
	//
	//puregogen:function symbol=SDL_GetRendererName
	iGetRendererName func(renderer *Renderer) string

	// SDL_GetRendererProperties => Get the properties associated with a renderer.
	//
	//puregogen:function symbol=SDL_GetRendererProperties
	iGetRendererProperties func(renderer *Renderer) PropertiesID

	// SDL_GetRenderOutputSize => Get the output size in pixels of a rendering context.
	//
	//puregogen:function symbol=SDL_GetRenderOutputSize
	iGetRenderOutputSize func(renderer *Renderer, w *int32, h *int32) bool

	// SDL_GetCurrentRenderOutputSize => Get the current output size in pixels of a rendering context.
	//
	//puregogen:function symbol=SDL_GetCurrentRenderOutputSize
	iGetCurrentRenderOutputSize func(renderer *Renderer, w *int32, h *int32) bool

	// SDL_CreateTexture => Create a texture for a rendering context.
	//
	//puregogen:function symbol=SDL_CreateTexture
	iCreateTexture func(renderer *Renderer, format PixelFormat, access TextureAccess, w int32, h int32) *Texture

	// SDL_CreateTextureFromSurface => Create a texture from an existing surface.
	//
	//puregogen:function symbol=SDL_CreateTextureFromSurface
	iCreateTextureFromSurface func(renderer *Renderer, surface *Surface) *Texture

	// SDL_CreateTextureWithProperties => Create a texture for a rendering context with the specified properties.
	//
	//puregogen:function symbol=SDL_CreateTextureWithProperties
	iCreateTextureWithProperties func(renderer *Renderer, props PropertiesID) *Texture

	// SDL_GetTextureProperties => Get the properties associated with a texture.
	//
	//puregogen:function symbol=SDL_GetTextureProperties
	iGetTextureProperties func(texture *Texture) PropertiesID

	// SDL_GetRendererFromTexture => Get the renderer that created an SDL_Texture.
	//
	//puregogen:function symbol=SDL_GetRendererFromTexture
	iGetRendererFromTexture func(texture *Texture) *Renderer

	// SDL_GetTextureSize => Get the size of a texture, as floating point values.
	//
	//puregogen:function symbol=SDL_GetTextureSize
	iGetTextureSize func(texture *Texture, w *float32, h *float32) bool

	// SDL_SetTextureColorMod => Set an additional color value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_SetTextureColorMod
	iSetTextureColorMod func(texture *Texture, r uint8, g uint8, b uint8) bool

	// SDL_SetTextureColorModFloat => Set an additional color value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_SetTextureColorModFloat
	iSetTextureColorModFloat func(texture *Texture, r float32, g float32, b float32) bool

	// SDL_GetTextureColorMod => Get the additional color value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_GetTextureColorMod
	iGetTextureColorMod func(texture *Texture, r *uint8, g *uint8, b *uint8) bool

	// SDL_GetTextureColorModFloat => Get the additional color value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_GetTextureColorModFloat
	iGetTextureColorModFloat func(texture *Texture, r *float32, g *float32, b *float32) bool

	// SDL_SetTextureAlphaMod => Set an additional alpha value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_SetTextureAlphaMod
	iSetTextureAlphaMod func(texture *Texture, alpha uint8) bool

	// SDL_SetTextureAlphaModFloat => Set an additional alpha value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_SetTextureAlphaModFloat
	iSetTextureAlphaModFloat func(texture *Texture, alpha float32) bool

	// SDL_GetTextureAlphaMod => Get the additional alpha value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_GetTextureAlphaMod
	iGetTextureAlphaMod func(texture *Texture, alpha *uint8) bool

	// SDL_GetTextureAlphaModFloat => Get the additional alpha value multiplied into render copy operations.
	//
	//puregogen:function symbol=SDL_GetTextureAlphaModFloat
	iGetTextureAlphaModFloat func(texture *Texture, alpha *float32) bool

	// SDL_SetTextureBlendMode => Set the blend mode for a texture, used by SDL_RenderTexture().
	//
	//puregogen:function symbol=SDL_SetTextureBlendMode
	iSetTextureBlendMode func(texture *Texture, blendMode BlendMode) bool

	// SDL_GetTextureBlendMode => Get the blend mode used for texture copy operations.
	//
	//puregogen:function symbol=SDL_GetTextureBlendMode
	iGetTextureBlendMode func(texture *Texture, blendMode *BlendMode) bool

	// SDL_SetTextureScaleMode => Set the scale mode used for texture scale operations.
	//
	//puregogen:function symbol=SDL_SetTextureScaleMode
	iSetTextureScaleMode func(texture *Texture, scaleMode ScaleMode) bool

	// SDL_GetTextureScaleMode => Get the scale mode used for texture scale operations.
	//
	//puregogen:function symbol=SDL_GetTextureScaleMode
	iGetTextureScaleMode func(texture *Texture, scaleMode *ScaleMode) bool

	// SDL_UpdateTexture => Update the given texture rectangle with new pixel data.
	//
	//puregogen:function symbol=SDL_UpdateTexture
	iUpdateTexture func(texture *Texture, rect *Rect, pixels uintptr, pitch int32) bool

	// SDL_UpdateYUVTexture => Update a rectangle within a planar YV12 or IYUV texture with new pixel data.
	//
	//puregogen:function symbol=SDL_UpdateYUVTexture
	iUpdateYUVTexture func(texture *Texture, rect *Rect, Yplane *uint8, Ypitch int32, Uplane *uint8, Upitch int32, Vplane *uint8, Vpitch int32) bool

	// SDL_UpdateNVTexture => Update a rectangle within a planar NV12 or NV21 texture with new pixels.
	//
	//puregogen:function symbol=SDL_UpdateNVTexture
	iUpdateNVTexture func(texture *Texture, rect *Rect, Yplane *uint8, Ypitch int32, UVplane *uint8, UVpitch int32) bool

	// SDL_LockTexture => Lock a portion of the texture for **write-only** pixel access.
	//
	//puregogen:function symbol=SDL_LockTexture
	iLockTexture func(texture *Texture, rect *Rect, pixels *uintptr, pitch *int32) bool

	// SDL_LockTextureToSurface => Lock a portion of the texture for **write-only** pixel access, and expose it as a SDL surface.
	//
	//puregogen:function symbol=SDL_LockTextureToSurface
	iLockTextureToSurface func(texture *Texture, rect *Rect, surface **Surface) bool

	// SDL_UnlockTexture => Unlock a texture, uploading the changes to video memory, if needed.
	//
	//puregogen:function symbol=SDL_UnlockTexture
	iUnlockTexture func(texture *Texture)

	// SDL_SetRenderTarget => Set a texture as the current rendering target.
	//
	//puregogen:function symbol=SDL_SetRenderTarget
	iSetRenderTarget func(renderer *Renderer, texture *Texture) bool

	// SDL_GetRenderTarget => Get the current render target.
	//
	//puregogen:function symbol=SDL_GetRenderTarget
	iGetRenderTarget func(renderer *Renderer) *Texture

	// SDL_SetRenderLogicalPresentation => Set a device-independent resolution and presentation mode for rendering.
	//
	//puregogen:function symbol=SDL_SetRenderLogicalPresentation
	iSetRenderLogicalPresentation func(renderer *Renderer, w int32, h int32, mode RendererLogicalPresentation) bool

	// SDL_GetRenderLogicalPresentation => Get device independent resolution and presentation mode for rendering.
	//
	//puregogen:function symbol=SDL_GetRenderLogicalPresentation
	iGetRenderLogicalPresentation func(renderer *Renderer, w *int32, h *int32, mode *RendererLogicalPresentation) bool

	// SDL_GetRenderLogicalPresentationRect => Get the final presentation rectangle for rendering.
	//
	//puregogen:function symbol=SDL_GetRenderLogicalPresentationRect
	iGetRenderLogicalPresentationRect func(renderer *Renderer, rect *FRect) bool

	// SDL_RenderCoordinatesFromWindow => Get a point in render coordinates when given a point in window coordinates.
	//
	//puregogen:function symbol=SDL_RenderCoordinatesFromWindow
	iRenderCoordinatesFromWindow func(renderer *Renderer, window_x float32, window_y float32, x *float32, y *float32) bool

	// SDL_RenderCoordinatesToWindow => Get a point in window coordinates when given a point in render coordinates.
	//
	//puregogen:function symbol=SDL_RenderCoordinatesToWindow
	iRenderCoordinatesToWindow func(renderer *Renderer, x float32, y float32, window_x *float32, window_y *float32) bool

	// SDL_ConvertEventToRenderCoordinates => Convert the coordinates in an event to render coordinates.
	//
	//puregogen:function symbol=SDL_ConvertEventToRenderCoordinates
	iConvertEventToRenderCoordinates func(renderer *Renderer, event *Event) bool

	// SDL_SetRenderViewport => Set the drawing area for rendering on the current target.
	//
	//puregogen:function symbol=SDL_SetRenderViewport
	iSetRenderViewport func(renderer *Renderer, rect *Rect) bool

	// SDL_GetRenderViewport => Get the drawing area for the current target.
	//
	//puregogen:function symbol=SDL_GetRenderViewport
	iGetRenderViewport func(renderer *Renderer, rect *Rect) bool

	// SDL_RenderViewportSet => Return whether an explicit rectangle was set as the viewport.
	//
	//puregogen:function symbol=SDL_RenderViewportSet
	iRenderViewportSet func(renderer *Renderer) bool

	// SDL_GetRenderSafeArea => Get the safe area for rendering within the current viewport.
	//
	//puregogen:function symbol=SDL_GetRenderSafeArea
	iGetRenderSafeArea func(renderer *Renderer, rect *Rect) bool

	// SDL_SetRenderClipRect => Set the clip rectangle for rendering on the specified target.
	//
	//puregogen:function symbol=SDL_SetRenderClipRect
	iSetRenderClipRect func(renderer *Renderer, rect *Rect) bool

	// SDL_GetRenderClipRect => Get the clip rectangle for the current target.
	//
	//puregogen:function symbol=SDL_GetRenderClipRect
	iGetRenderClipRect func(renderer *Renderer, rect *Rect) bool

	// SDL_RenderClipEnabled => Get whether clipping is enabled on the given render target.
	//
	//puregogen:function symbol=SDL_RenderClipEnabled
	iRenderClipEnabled func(renderer *Renderer) bool

	// SDL_SetRenderScale => Set the drawing scale for rendering on the current target.
	//
	//puregogen:function symbol=SDL_SetRenderScale
	iSetRenderScale func(renderer *Renderer, scaleX float32, scaleY float32) bool

	// SDL_GetRenderScale => Get the drawing scale for the current target.
	//
	//puregogen:function symbol=SDL_GetRenderScale
	iGetRenderScale func(renderer *Renderer, scaleX *float32, scaleY *float32) bool

	// SDL_SetRenderDrawColor => Set the color used for drawing operations.
	//
	//puregogen:function symbol=SDL_SetRenderDrawColor
	iSetRenderDrawColor func(renderer *Renderer, r uint8, g uint8, b uint8, a uint8) bool

	// SDL_SetRenderDrawColorFloat => Set the color used for drawing operations (Rect, Line and Clear).
	//
	//puregogen:function symbol=SDL_SetRenderDrawColorFloat
	iSetRenderDrawColorFloat func(renderer *Renderer, r float32, g float32, b float32, a float32) bool

	// SDL_GetRenderDrawColor => Get the color used for drawing operations (Rect, Line and Clear).
	//
	//puregogen:function symbol=SDL_GetRenderDrawColor
	iGetRenderDrawColor func(renderer *Renderer, r *uint8, g *uint8, b *uint8, a *uint8) bool

	// SDL_GetRenderDrawColorFloat => Get the color used for drawing operations (Rect, Line and Clear).
	//
	//puregogen:function symbol=SDL_GetRenderDrawColorFloat
	iGetRenderDrawColorFloat func(renderer *Renderer, r *float32, g *float32, b *float32, a *float32) bool

	// SDL_SetRenderColorScale => Set the color scale used for render operations.
	//
	//puregogen:function symbol=SDL_SetRenderColorScale
	iSetRenderColorScale func(renderer *Renderer, scale float32) bool

	// SDL_GetRenderColorScale => Get the color scale used for render operations.
	//
	//puregogen:function symbol=SDL_GetRenderColorScale
	iGetRenderColorScale func(renderer *Renderer, scale *float32) bool

	// SDL_SetRenderDrawBlendMode => Set the blend mode used for drawing operations (Fill and Line).
	//
	//puregogen:function symbol=SDL_SetRenderDrawBlendMode
	iSetRenderDrawBlendMode func(renderer *Renderer, blendMode BlendMode) bool

	// SDL_GetRenderDrawBlendMode => Get the blend mode used for drawing operations.
	//
	//puregogen:function symbol=SDL_GetRenderDrawBlendMode
	iGetRenderDrawBlendMode func(renderer *Renderer, blendMode *BlendMode) bool

	// SDL_RenderClear => Clear the current rendering target with the drawing color.
	//
	//puregogen:function symbol=SDL_RenderClear
	iRenderClear func(renderer *Renderer) bool

	// SDL_RenderPoint => Draw a point on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderPoint
	iRenderPoint func(renderer *Renderer, x float32, y float32) bool

	// SDL_RenderPoints => Draw multiple points on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderPoints
	iRenderPoints func(renderer *Renderer, points *FPoint, count int32) bool

	// SDL_RenderLine => Draw a line on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderLine
	iRenderLine func(renderer *Renderer, x1 float32, y1 float32, x2 float32, y2 float32) bool

	// SDL_RenderLines => Draw a series of connected lines on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderLines
	iRenderLines func(renderer *Renderer, points *FPoint, count int32) bool

	// SDL_RenderRect => Draw a rectangle on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderRect
	iRenderRect func(renderer *Renderer, rect *FRect) bool

	// SDL_RenderRects => Draw some number of rectangles on the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderRects
	iRenderRects func(renderer *Renderer, rects *FRect, count int32) bool

	// SDL_RenderFillRect => Fill a rectangle on the current rendering target with the drawing color at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderFillRect
	iRenderFillRect func(renderer *Renderer, rect *FRect) bool

	// SDL_RenderFillRects => Fill some number of rectangles on the current rendering target with the drawing color at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderFillRects
	iRenderFillRects func(renderer *Renderer, rects *FRect, count int32) bool

	// SDL_RenderTexture => Copy a portion of the texture to the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderTexture
	iRenderTexture func(renderer *Renderer, texture *Texture, srcrect *FRect, dstrect *FRect) bool

	// SDL_RenderTextureRotated => Copy a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderTextureRotated
	iRenderTextureRotated func(renderer *Renderer, texture *Texture, srcrect *FRect, dstrect *FRect, angle float64, center *FPoint, flip FlipMode) bool

	// SDL_RenderTextureAffine => Copy a portion of the source texture to the current rendering target, with affine transform, at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderTextureAffine
	iRenderTextureAffine func(renderer *Renderer, texture *Texture, srcrect *FRect, origin *FPoint, right *FPoint, down *FPoint) bool

	// SDL_RenderTextureTiled => Tile a portion of the texture to the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderTextureTiled
	iRenderTextureTiled func(renderer *Renderer, texture *Texture, srcrect *FRect, scale float32, dstrect *FRect) bool

	// SDL_RenderTexture9Grid => Perform a scaled copy using the 9-grid algorithm to the current rendering target at subpixel precision.
	//
	//puregogen:function symbol=SDL_RenderTexture9Grid
	iRenderTexture9Grid func(renderer *Renderer, texture *Texture, srcrect *FRect, left_width float32, right_width float32, top_height float32, bottom_height float32, scale float32, dstrect *FRect) bool

	// SDL_RenderGeometry => Render a list of triangles, optionally using a texture and indices into the vertex array Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
	//
	//puregogen:function symbol=SDL_RenderGeometry
	iRenderGeometry func(renderer *Renderer, texture *Texture, vertices *Vertex, num_vertices int32, indices *int32, num_indices int32) bool

	// SDL_RenderGeometryRaw => Render a list of triangles, optionally using a texture and indices into the vertex arrays Color and alpha modulation is done per vertex (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).
	//
	//puregogen:function symbol=SDL_RenderGeometryRaw
	iRenderGeometryRaw func(renderer *Renderer, texture *Texture, xy *float32, xy_stride int32, color *FColor, color_stride int32, uv *float32, uv_stride int32, num_vertices int32, indices uintptr, num_indices int32, size_indices int32) bool

	// SDL_RenderReadPixels => Read pixels from the current rendering target.
	//
	//puregogen:function symbol=SDL_RenderReadPixels
	iRenderReadPixels func(renderer *Renderer, rect *Rect) *Surface

	// SDL_RenderPresent => Update the screen with any rendering performed since the previous call.
	//
	//puregogen:function symbol=SDL_RenderPresent
	iRenderPresent func(renderer *Renderer) bool

	// SDL_DestroyTexture => Destroy the specified texture.
	//
	//puregogen:function symbol=SDL_DestroyTexture
	iDestroyTexture func(texture *Texture)

	// SDL_DestroyRenderer => Destroy the rendering context for a window and free all associated textures.
	//
	//puregogen:function symbol=SDL_DestroyRenderer
	iDestroyRenderer func(renderer *Renderer)

	// SDL_FlushRenderer => Force the rendering context to flush any pending commands and state.
	//
	//puregogen:function symbol=SDL_FlushRenderer
	iFlushRenderer func(renderer *Renderer) bool

	// SDL_GetRenderMetalLayer => Get the CAMetalLayer associated with the given Metal renderer.
	//
	//puregogen:function symbol=SDL_GetRenderMetalLayer
	iGetRenderMetalLayer func(renderer *Renderer) uintptr

	// SDL_GetRenderMetalCommandEncoder => Get the Metal command encoder for the current frame.
	//
	//puregogen:function symbol=SDL_GetRenderMetalCommandEncoder
	iGetRenderMetalCommandEncoder func(renderer *Renderer) uintptr

	// SDL_AddVulkanRenderSemaphores => Add a set of synchronization semaphores for the current frame.
	//
	//puregogen:function symbol=SDL_AddVulkanRenderSemaphores
	iAddVulkanRenderSemaphores func(renderer *Renderer, wait_stage_mask uint32, wait_semaphore int64, signal_semaphore int64) bool

	// SDL_SetRenderVSync => Toggle VSync of the given renderer.
	//
	//puregogen:function symbol=SDL_SetRenderVSync
	iSetRenderVSync func(renderer *Renderer, vsync int32) bool

	// SDL_GetRenderVSync => Get VSync of the given renderer.
	//
	//puregogen:function symbol=SDL_GetRenderVSync
	iGetRenderVSync func(renderer *Renderer, vsync *int32) bool

	// SDL_RenderDebugText => Draw debug text to an SDL_Renderer.
	//
	//puregogen:function symbol=SDL_RenderDebugText
	iRenderDebugText func(renderer *Renderer, x float32, y float32, str string) bool

	// SDL_RenderDebugTextFormat => Draw debug text to an SDL_Renderer.
	//
	//puregogen:function symbol=SDL_RenderDebugTextFormat
	iRenderDebugTextFormat func(renderer *Renderer, x float32, y float32, fmt string) bool

	// SDL_OpenTitleStorage => Opens up a read-only container for the application's filesystem.
	//
	//puregogen:function symbol=SDL_OpenTitleStorage
	iOpenTitleStorage func(override string, props PropertiesID) *Storage

	// SDL_OpenUserStorage => Opens up a container for a user's unique read/write filesystem.
	//
	//puregogen:function symbol=SDL_OpenUserStorage
	iOpenUserStorage func(org string, app string, props PropertiesID) *Storage

	// SDL_OpenFileStorage => Opens up a container for local filesystem storage.
	//
	//puregogen:function symbol=SDL_OpenFileStorage
	iOpenFileStorage func(path string) *Storage

	// SDL_OpenStorage => Opens up a container using a client-provided storage interface.
	//
	//puregogen:function symbol=SDL_OpenStorage
	iOpenStorage func(iface *StorageInterface, userdata uintptr) *Storage

	// SDL_CloseStorage => Closes and frees a storage container.
	//
	//puregogen:function symbol=SDL_CloseStorage
	iCloseStorage func(storage *Storage) bool

	// SDL_StorageReady => Checks if the storage container is ready to use.
	//
	//puregogen:function symbol=SDL_StorageReady
	iStorageReady func(storage *Storage) bool

	// SDL_GetStorageFileSize => Query the size of a file within a storage container.
	//
	//puregogen:function symbol=SDL_GetStorageFileSize
	iGetStorageFileSize func(storage *Storage, path string, length *uint64) bool

	// SDL_ReadStorageFile => Synchronously read a file from a storage container into a client-provided buffer.
	//
	//puregogen:function symbol=SDL_ReadStorageFile
	iReadStorageFile func(storage *Storage, path string, destination uintptr, length uint64) bool

	// SDL_WriteStorageFile => Synchronously write a file from client memory into a storage container.
	//
	//puregogen:function symbol=SDL_WriteStorageFile
	iWriteStorageFile func(storage *Storage, path string, source uintptr, length uint64) bool

	// SDL_CreateStorageDirectory => Create a directory in a writable storage container.
	//
	//puregogen:function symbol=SDL_CreateStorageDirectory
	iCreateStorageDirectory func(storage *Storage, path string) bool

	// SDL_EnumerateStorageDirectory => Enumerate a directory in a storage container through a callback function.
	//
	//puregogen:function symbol=SDL_EnumerateStorageDirectory
	iEnumerateStorageDirectory func(storage *Storage, path string, callback EnumerateDirectoryCallback, userdata uintptr) bool

	// SDL_RemoveStoragePath => Remove a file or an empty directory in a writable storage container.
	//
	//puregogen:function symbol=SDL_RemoveStoragePath
	iRemoveStoragePath func(storage *Storage, path string) bool

	// SDL_RenameStoragePath => Rename a file or directory in a writable storage container.
	//
	//puregogen:function symbol=SDL_RenameStoragePath
	iRenameStoragePath func(storage *Storage, oldpath string, newpath string) bool

	// SDL_CopyStorageFile => Copy a file in a writable storage container.
	//
	//puregogen:function symbol=SDL_CopyStorageFile
	iCopyStorageFile func(storage *Storage, oldpath string, newpath string) bool

	// SDL_GetStoragePathInfo => Get information about a filesystem path in a storage container.
	//
	//puregogen:function symbol=SDL_GetStoragePathInfo
	iGetStoragePathInfo func(storage *Storage, path string, info *PathInfo) bool

	// SDL_GetStorageSpaceRemaining => Queries the remaining space in a storage container.
	//
	//puregogen:function symbol=SDL_GetStorageSpaceRemaining
	iGetStorageSpaceRemaining func(storage *Storage) uint64

	// SDL_GlobStorageDirectory => Enumerate a directory tree, filtered by pattern, and return a list.
	// SDL_free() must be called on the returned pointer.
	//
	//puregogen:function symbol=SDL_GlobStorageDirectory
	iGlobStorageDirectory func(storage *Storage, path string, pattern string, flags GlobFlags, count *int32) uintptr

	// SDL_SetX11EventHook => Set a callback for every X11 event.
	//
	//puregogen:function symbol=SDL_SetX11EventHook
	iSetX11EventHook func(callback X11EventHook, userdata uintptr)

	// SDL_IsTablet => Query if the current device is a tablet.
	//
	//puregogen:function symbol=SDL_IsTablet
	iIsTablet func() bool

	// SDL_IsTV => Query if the current device is a TV.
	//
	//puregogen:function symbol=SDL_IsTV
	iIsTV func() bool

	// SDL_GetSandbox => Get the application sandbox environment, if any.
	//
	//puregogen:function symbol=SDL_GetSandbox
	iGetSandbox func() Sandbox

	// SDL_OnApplicationWillTerminate => Let iOS apps with external event handling report onApplicationWillTerminate.
	//
	//puregogen:function symbol=SDL_OnApplicationWillTerminate
	iOnApplicationWillTerminate func()

	// SDL_OnApplicationDidReceiveMemoryWarning => Let iOS apps with external event handling report onApplicationDidReceiveMemoryWarning.
	//
	//puregogen:function symbol=SDL_OnApplicationDidReceiveMemoryWarning
	iOnApplicationDidReceiveMemoryWarning func()

	// SDL_OnApplicationWillEnterBackground => Let iOS apps with external event handling report onApplicationWillResignActive.
	//
	//puregogen:function symbol=SDL_OnApplicationWillEnterBackground
	iOnApplicationWillEnterBackground func()

	// SDL_OnApplicationDidEnterBackground => Let iOS apps with external event handling report onApplicationDidEnterBackground.
	//
	//puregogen:function symbol=SDL_OnApplicationDidEnterBackground
	iOnApplicationDidEnterBackground func()

	// SDL_OnApplicationWillEnterForeground => Let iOS apps with external event handling report onApplicationWillEnterForeground.
	//
	//puregogen:function symbol=SDL_OnApplicationWillEnterForeground
	iOnApplicationWillEnterForeground func()

	// SDL_OnApplicationDidEnterForeground => Let iOS apps with external event handling report onApplicationDidBecomeActive.
	//
	//puregogen:function symbol=SDL_OnApplicationDidEnterForeground
	iOnApplicationDidEnterForeground func()

	// SDL_GetDateTimeLocalePreferences => Gets the current preferred date and time format for the system locale.
	//
	//puregogen:function symbol=SDL_GetDateTimeLocalePreferences
	iGetDateTimeLocalePreferences func(dateFormat *DateFormat, timeFormat *TimeFormat) bool

	// SDL_GetCurrentTime => Gets the current value of the system realtime clock in nanoseconds since Jan 1, 1970 in Universal Coordinated Time (UTC).
	//
	//puregogen:function symbol=SDL_GetCurrentTime
	iGetCurrentTime func(ticks *Time) bool

	// SDL_TimeToDateTime => Converts an SDL_Time in nanoseconds since the epoch to a calendar time in the SDL_DateTime format.
	//
	//puregogen:function symbol=SDL_TimeToDateTime
	iTimeToDateTime func(ticks Time, dt *DateTime, localTime bool) bool

	// SDL_DateTimeToTime => Converts a calendar time to an SDL_Time in nanoseconds since the epoch.
	//
	//puregogen:function symbol=SDL_DateTimeToTime
	iDateTimeToTime func(dt *DateTime, ticks *Time) bool

	// SDL_TimeToWindows => Converts an SDL time into a Windows FILETIME (100-nanosecond intervals since January 1, 1601).
	//
	//puregogen:function symbol=SDL_TimeToWindows
	iTimeToWindows func(ticks Time, dwLowDateTime *uint32, dwHighDateTime *uint32)

	// SDL_TimeFromWindows => Converts a Windows FILETIME (100-nanosecond intervals since January 1, 1601) to an SDL time.
	//
	//puregogen:function symbol=SDL_TimeFromWindows
	iTimeFromWindows func(dwLowDateTime uint32, dwHighDateTime uint32) Time

	// SDL_GetDaysInMonth => Get the number of days in a month for a given year.
	//
	//puregogen:function symbol=SDL_GetDaysInMonth
	iGetDaysInMonth func(year int32, month int32) int32

	// SDL_GetDayOfYear => Get the day of year for a calendar date.
	//
	//puregogen:function symbol=SDL_GetDayOfYear
	iGetDayOfYear func(year int32, month int32, day int32) int32

	// SDL_GetDayOfWeek => Get the day of week for a calendar date.
	//
	//puregogen:function symbol=SDL_GetDayOfWeek
	iGetDayOfWeek func(year int32, month int32, day int32) int32

	// SDL_GetTicks => Get the number of milliseconds that have elapsed since the SDL library initialization.
	//
	//puregogen:function symbol=SDL_GetTicks
	iGetTicks func() uint64

	// SDL_GetTicksNS => Get the number of nanoseconds since SDL library initialization.
	//
	//puregogen:function symbol=SDL_GetTicksNS
	iGetTicksNS func() uint64

	// SDL_GetPerformanceCounter => Get the current value of the high resolution counter.
	//
	//puregogen:function symbol=SDL_GetPerformanceCounter
	iGetPerformanceCounter func() uint64

	// SDL_GetPerformanceFrequency => Get the count per second of the high resolution counter.
	//
	//puregogen:function symbol=SDL_GetPerformanceFrequency
	iGetPerformanceFrequency func() uint64

	// SDL_Delay => Wait a specified number of milliseconds before returning.
	//
	//puregogen:function symbol=SDL_Delay
	iDelay func(ms uint32)

	// SDL_DelayNS => Wait a specified number of nanoseconds before returning.
	//
	//puregogen:function symbol=SDL_DelayNS
	iDelayNS func(ns uint64)

	// SDL_DelayPrecise => Wait a specified number of nanoseconds before returning.
	//
	//puregogen:function symbol=SDL_DelayPrecise
	iDelayPrecise func(ns uint64)

	// SDL_AddTimer => Call a callback function at a future time.
	//
	//puregogen:function symbol=SDL_AddTimer
	iAddTimer func(interval uint32, callback TimerCallback, userdata uintptr) TimerID

	// SDL_AddTimerNS => Call a callback function at a future time.
	//
	//puregogen:function symbol=SDL_AddTimerNS
	iAddTimerNS func(interval uint64, callback NSTimerCallback, userdata uintptr) TimerID

	// SDL_RemoveTimer => Remove a timer created with SDL_AddTimer().
	//
	//puregogen:function symbol=SDL_RemoveTimer
	iRemoveTimer func(id TimerID) bool

	// SDL_CreateTray => Create an icon to be placed in the operating system's tray, or equivalent.
	//
	//puregogen:function symbol=SDL_CreateTray
	iCreateTray func(icon *Surface, tooltip string) *Tray

	// SDL_SetTrayIcon => Updates the system tray icon's icon.
	//
	//puregogen:function symbol=SDL_SetTrayIcon
	iSetTrayIcon func(tray *Tray, icon *Surface)

	// SDL_SetTrayTooltip => Updates the system tray icon's tooltip.
	//
	//puregogen:function symbol=SDL_SetTrayTooltip
	iSetTrayTooltip func(tray *Tray, tooltip string)

	// SDL_CreateTrayMenu => Create a menu for a system tray.
	//
	//puregogen:function symbol=SDL_CreateTrayMenu
	iCreateTrayMenu func(tray *Tray) *TrayMenu

	// SDL_CreateTraySubmenu => Create a submenu for a system tray entry.
	//
	//puregogen:function symbol=SDL_CreateTraySubmenu
	iCreateTraySubmenu func(entry *TrayEntry) *TrayMenu

	// SDL_GetTrayMenu => Gets a previously created tray menu.
	//
	//puregogen:function symbol=SDL_GetTrayMenu
	iGetTrayMenu func(tray *Tray) *TrayMenu

	// SDL_GetTraySubmenu => Gets a previously created tray entry submenu.
	//
	//puregogen:function symbol=SDL_GetTraySubmenu
	iGetTraySubmenu func(entry *TrayEntry) *TrayMenu

	// SDL_GetTrayEntries => Returns a list of entries in the menu, in order.
	//
	//puregogen:function symbol=SDL_GetTrayEntries
	iGetTrayEntries func(menu *TrayMenu, count *int32) **TrayEntry

	// SDL_RemoveTrayEntry => Removes a tray entry.
	//
	//puregogen:function symbol=SDL_RemoveTrayEntry
	iRemoveTrayEntry func(entry *TrayEntry)

	// SDL_InsertTrayEntryAt => Insert a tray entry at a given position.
	//
	//puregogen:function symbol=SDL_InsertTrayEntryAt
	iInsertTrayEntryAt func(menu *TrayMenu, pos int32, label string, flags TrayEntryFlags) *TrayEntry

	// SDL_SetTrayEntryLabel => Sets the label of an entry.
	//
	//puregogen:function symbol=SDL_SetTrayEntryLabel
	iSetTrayEntryLabel func(entry *TrayEntry, label string)

	// SDL_GetTrayEntryLabel => Gets the label of an entry.
	//
	//puregogen:function symbol=SDL_GetTrayEntryLabel
	iGetTrayEntryLabel func(entry *TrayEntry) string

	// SDL_SetTrayEntryChecked => Sets whether or not an entry is checked.
	//
	//puregogen:function symbol=SDL_SetTrayEntryChecked
	iSetTrayEntryChecked func(entry *TrayEntry, checked bool)

	// SDL_GetTrayEntryChecked => Gets whether or not an entry is checked.
	//
	//puregogen:function symbol=SDL_GetTrayEntryChecked
	iGetTrayEntryChecked func(entry *TrayEntry) bool

	// SDL_SetTrayEntryEnabled => Sets whether or not an entry is enabled.
	//
	//puregogen:function symbol=SDL_SetTrayEntryEnabled
	iSetTrayEntryEnabled func(entry *TrayEntry, enabled bool)

	// SDL_GetTrayEntryEnabled => Gets whether or not an entry is enabled.
	//
	//puregogen:function symbol=SDL_GetTrayEntryEnabled
	iGetTrayEntryEnabled func(entry *TrayEntry) bool

	// SDL_ClickTrayEntry => Simulate a click on a tray entry.
	//
	//puregogen:function symbol=SDL_ClickTrayEntry
	iClickTrayEntry func(entry *TrayEntry)

	// SDL_DestroyTray => Destroys a tray object.
	//
	//puregogen:function symbol=SDL_DestroyTray
	iDestroyTray func(tray *Tray)

	// SDL_GetTrayEntryParent => Gets the menu containing a certain tray entry.
	//
	//puregogen:function symbol=SDL_GetTrayEntryParent
	iGetTrayEntryParent func(entry *TrayEntry) *TrayMenu

	// SDL_GetTrayMenuParentEntry => Gets the entry for which the menu is a submenu, if the current menu is a submenu.
	//
	//puregogen:function symbol=SDL_GetTrayMenuParentEntry
	iGetTrayMenuParentEntry func(menu *TrayMenu) *TrayEntry

	// SDL_GetTrayMenuParentTray => Gets the tray for which this menu is the first-level menu, if the current menu isn't a submenu.
	//
	//puregogen:function symbol=SDL_GetTrayMenuParentTray
	iGetTrayMenuParentTray func(menu *TrayMenu) *Tray

	// SDL_UpdateTrays => Update the trays.
	//
	//puregogen:function symbol=SDL_UpdateTrays
	iUpdateTrays func()

	// SDL_SetMainReady => Circumvent failure of SDL_Init() when not using SDL_main() as an entry point.
	//
	//puregogen:function symbol=SDL_SetMainReady
	iSetMainReady func()

	// SDL_RunApp => Initializes and launches an SDL application, by doing platform-specific initialization before calling your mainFunction and cleanups after it returns, if that is needed for a specific platform, otherwise it just calls mainFunction.
	//
	//puregogen:function symbol=SDL_RunApp
	iRunApp func(argc int32, argv *string, mainFunction main_func, reserved uintptr) int32

	// SDL_EnterAppMainCallbacks => An entry point for SDL's use in SDL_MAIN_USE_CALLBACKS.
	//
	//puregogen:function symbol=SDL_EnterAppMainCallbacks
	iEnterAppMainCallbacks func(argc int32, argv *string, appinit AppInit_func, appiter AppIterate_func, appevent AppEvent_func, appquit AppQuit_func) int32

	// SDL_GDKSuspendComplete => Callback from the application to let the suspend continue.
	//
	//puregogen:function symbol=SDL_GDKSuspendComplete
	iGDKSuspendComplete func()
)
