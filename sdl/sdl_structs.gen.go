package sdl

// Code generated by cmd/ffi2go. DO NOT EDIT.

// SDL_AsyncIO - The asynchronous I/O operation structure.
// (https://wiki.libsdl.org/SDL3/SDL_AsyncIO)
type AsyncIO struct{}

// SDL_AsyncIOOutcome - Information about a completed asynchronous I/O request.
// (https://wiki.libsdl.org/SDL3/SDL_AsyncIOOutcome)
type AsyncIOOutcome struct {
	Asyncio          *AsyncIO
	Type             AsyncIOTaskType
	Result           AsyncIOResult
	Buffer           Pointer
	Offset           uint64
	BytesRequested   uint64
	BytesTransferred uint64
	Userdata         Pointer
}

// SDL_AsyncIOQueue - A queue of completed asynchronous I/O tasks.
// (https://wiki.libsdl.org/SDL3/SDL_AsyncIOQueue)
type AsyncIOQueue struct{}

// SDL_AtomicInt - A type representing an atomic integer value.
// (https://wiki.libsdl.org/SDL3/SDL_AtomicInt)
type AtomicInt struct {
	Value int32
}

// SDL_AtomicU32 - A type representing an atomic unsigned 32-bit value.
// (https://wiki.libsdl.org/SDL3/SDL_AtomicU32)
type AtomicU32 struct {
	Value uint32
}

// SDL_Thread - The SDL thread object.
// (https://wiki.libsdl.org/SDL3/SDL_Thread)
type Thread struct{}

// SDL_Mutex - A means to serialize access to a resource between threads.
// (https://wiki.libsdl.org/SDL3/SDL_Mutex)
type Mutex struct{}

// SDL_RWLock - A mutex that allows read-only threads to run in parallel.
// (https://wiki.libsdl.org/SDL3/SDL_RWLock)
type RWLock struct{}

// SDL_Semaphore - A means to manage access to a resource, by count, between threads.
// (https://wiki.libsdl.org/SDL3/SDL_Semaphore)
type Semaphore struct{}

// SDL_Condition - A means to block multiple threads until a condition is satisfied.
// (https://wiki.libsdl.org/SDL3/SDL_Condition)
type Condition struct{}

// SDL_InitState - A structure used for thread-safe initialization and shutdown.
// (https://wiki.libsdl.org/SDL3/SDL_InitState)
type InitState struct {
	Status   AtomicInt
	Thread   ThreadID
	Reserved Pointer
}

// SDL_IOStreamInterface - The function pointers that drive an [SDL_IOStream](SDL_IOStream).
// (https://wiki.libsdl.org/SDL3/SDL_IOStreamInterface)
type IOStreamInterface struct {
	Version uint32
	Size    Pointer
	Seek    Pointer
	Read    Pointer
	Write   Pointer
	Flush   Pointer
	Close   Pointer
}

// SDL_IOStream - The read/write operation structure.
// (https://wiki.libsdl.org/SDL3/SDL_IOStream)
type IOStream struct{}

// SDL_AudioSpec - Format specifier for audio data.
// (https://wiki.libsdl.org/SDL3/SDL_AudioSpec)
type AudioSpec struct {
	Format   AudioFormat
	Channels int32
	Freq     int32
}

// SDL_AudioStream - The opaque handle that represents an audio stream.
// (https://wiki.libsdl.org/SDL3/SDL_AudioStream)
type AudioStream struct{}

// SDL_Color - A structure that represents a color as RGBA components.
// (https://wiki.libsdl.org/SDL3/SDL_Color)
type Color struct {
	R uint8
	G uint8
	B uint8
	A uint8
}

// SDL_FColor - The bits of this structure can be directly reinterpreted as a float-packed color which uses the [SDL_PIXELFORMAT_RGBA128_FLOAT](SDL_PIXELFORMAT_RGBA128_FLOAT) format
// (https://wiki.libsdl.org/SDL3/SDL_FColor)
type FColor struct {
	R float32
	G float32
	B float32
	A float32
}

// SDL_PixelFormatDetails - Details about the format of a pixel.
// (https://wiki.libsdl.org/SDL3/SDL_PixelFormatDetails)
type PixelFormatDetails struct {
	Format        PixelFormat
	BitsPerPixel  uint8
	BytesPerPixel uint8
	Padding       [2]uint8
	Rmask         uint32
	Gmask         uint32
	Bmask         uint32
	Amask         uint32
	Rbits         uint8
	Gbits         uint8
	Bbits         uint8
	Abits         uint8
	Rshift        uint8
	Gshift        uint8
	Bshift        uint8
	Ashift        uint8
}

// SDL_Point - The structure that defines a point (using integers).
// (https://wiki.libsdl.org/SDL3/SDL_Point)
type Point struct {
	X int32
	Y int32
}

// SDL_FPoint - The structure that defines a point (using floating point values).
// (https://wiki.libsdl.org/SDL3/SDL_FPoint)
type FPoint struct {
	X float32
	Y float32
}

// SDL_Rect - A rectangle, with the origin at the upper left (using integers).
// (https://wiki.libsdl.org/SDL3/SDL_Rect)
type Rect struct {
	X int32
	Y int32
	W int32
	H int32
}

// SDL_FRect - A rectangle stored using floating point values.
// (https://wiki.libsdl.org/SDL3/SDL_FRect)
type FRect struct {
	X float32
	Y float32
	W float32
	H float32
}

// SDL_Camera - The opaque structure used to identify an opened SDL camera.
// (https://wiki.libsdl.org/SDL3/SDL_Camera)
type Camera struct{}

// SDL_CameraSpec - The details of an output format for a camera device.
// (https://wiki.libsdl.org/SDL3/SDL_CameraSpec)
type CameraSpec struct {
	Format               PixelFormat
	Colorspace           Colorspace
	Width                int32
	Height               int32
	FramerateNumerator   int32
	FramerateDenominator int32
}

// SDL_DisplayModeData - Internal display mode data.
// (https://wiki.libsdl.org/SDL3/SDL_DisplayModeData)
type DisplayModeData struct{}

// SDL_DisplayMode - The structure that defines a display mode.
// (https://wiki.libsdl.org/SDL3/SDL_DisplayMode)
type DisplayMode struct {
	DisplayID              DisplayID
	Format                 PixelFormat
	W                      int32
	H                      int32
	PixelDensity           float32
	RefreshRate            float32
	RefreshRateNumerator   int32
	RefreshRateDenominator int32
	Internal               *DisplayModeData
}

// SDL_Window - The struct used as an opaque handle to a window.
// (https://wiki.libsdl.org/SDL3/SDL_Window)
type Window struct{}

type GLContextState struct{}

// SDL_DialogFileFilter - An entry for filters for file dialogs.
// (https://wiki.libsdl.org/SDL3/SDL_DialogFileFilter)
type DialogFileFilter struct {
	Name    string
	Pattern string
}

// SDL_Sensor - The opaque structure used to identify an opened SDL sensor.
// (https://wiki.libsdl.org/SDL3/SDL_Sensor)
type Sensor struct{}

// SDL_Joystick - The joystick structure used to identify an SDL joystick.
// (https://wiki.libsdl.org/SDL3/SDL_Joystick)
type Joystick struct{}

// SDL_VirtualJoystickTouchpadDesc - The structure that describes a virtual joystick touchpad.
// (https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickTouchpadDesc)
type VirtualJoystickTouchpadDesc struct {
	Nfingers uint16
	Padding  [3]uint16
}

// SDL_VirtualJoystickSensorDesc - The structure that describes a virtual joystick sensor.
// (https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickSensorDesc)
type VirtualJoystickSensorDesc struct {
	Type SensorType
	Rate float32
}

// SDL_VirtualJoystickDesc - The structure that describes a virtual joystick.
// (https://wiki.libsdl.org/SDL3/SDL_VirtualJoystickDesc)
type VirtualJoystickDesc struct {
	Version           uint32
	Type              uint16
	Padding           uint16
	VendorId          uint16
	ProductId         uint16
	Naxes             uint16
	Nbuttons          uint16
	Nballs            uint16
	Nhats             uint16
	Ntouchpads        uint16
	Nsensors          uint16
	Padding2          [2]uint16
	ButtonMask        uint32
	AxisMask          uint32
	Name              string
	Touchpads         *VirtualJoystickTouchpadDesc
	Sensors           *VirtualJoystickSensorDesc
	Userdata          Pointer
	Update            Pointer
	SetPlayerIndex    Pointer
	Rumble            Pointer
	RumbleTriggers    Pointer
	SetLED            Pointer
	SendEffect        Pointer
	SetSensorsEnabled Pointer
	Cleanup           Pointer
}

// SDL_Gamepad - The structure used to identify an SDL gamepad
// (https://wiki.libsdl.org/SDL3/SDL_Gamepad)
type Gamepad struct{}

// SDL_Cursor - The structure used to identify an SDL cursor.
// (https://wiki.libsdl.org/SDL3/SDL_Cursor)
type Cursor struct{}

// SDL_Finger - Data about a single finger in a multitouch event.
// (https://wiki.libsdl.org/SDL3/SDL_Finger)
type Finger struct {
	Id       FingerID
	X        float32
	Y        float32
	Pressure float32
}

// SDL_CommonEvent - Fields shared by every event
// (https://wiki.libsdl.org/SDL3/SDL_CommonEvent)
type CommonEvent struct {
	Type      uint32
	Reserved  uint32
	Timestamp uint64
}

// SDL_DisplayEvent - Display state change event data (event.display.*)
// (https://wiki.libsdl.org/SDL3/SDL_DisplayEvent)
type DisplayEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	DisplayID DisplayID
	Data1     int32
	Data2     int32
}

// SDL_WindowEvent - Window state change event data (event.window.*)
// (https://wiki.libsdl.org/SDL3/SDL_WindowEvent)
type WindowEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Data1     int32
	Data2     int32
}

// SDL_KeyboardDeviceEvent - Keyboard device event structure (event.kdevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_KeyboardDeviceEvent)
type KeyboardDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     KeyboardID
}

// SDL_KeyboardEvent - Keyboard button event structure (event.key.*)
// (https://wiki.libsdl.org/SDL3/SDL_KeyboardEvent)
type KeyboardEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     KeyboardID
	Scancode  Scancode
	Key       Keycode
	Mod       Keymod
	Raw       uint16
	Down      bool
	Repeat    bool
}

// SDL_TextEditingEvent - Keyboard text editing event structure (event.edit.*)
// (https://wiki.libsdl.org/SDL3/SDL_TextEditingEvent)
type TextEditingEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Text      string
	Start     int32
	Length    int32
}

// SDL_TextInputEvent - Keyboard text input event structure (event.text.*)
// (https://wiki.libsdl.org/SDL3/SDL_TextInputEvent)
type TextInputEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Text      string
}

// SDL_MouseDeviceEvent - Mouse device event structure (event.mdevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_MouseDeviceEvent)
type MouseDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     MouseID
}

// SDL_MouseMotionEvent - Mouse motion event structure (event.motion.*)
// (https://wiki.libsdl.org/SDL3/SDL_MouseMotionEvent)
type MouseMotionEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     MouseID
	State     MouseButtonFlags
	X         float32
	Y         float32
	Xrel      float32
	Yrel      float32
}

// SDL_MouseButtonEvent - Mouse button event structure (event.button.*)
// (https://wiki.libsdl.org/SDL3/SDL_MouseButtonEvent)
type MouseButtonEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     MouseID
	Button    uint8
	Down      bool
	Clicks    uint8
	Padding   uint8
	X         float32
	Y         float32
}

// SDL_MouseWheelEvent - Mouse wheel event structure (event.wheel.*)
// (https://wiki.libsdl.org/SDL3/SDL_MouseWheelEvent)
type MouseWheelEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     MouseID
	X         float32
	Y         float32
	Direction MouseWheelDirection
	MouseX    float32
	MouseY    float32
	IntegerX  int32
	IntegerY  int32
}

// SDL_JoyAxisEvent - Joystick axis motion event structure (event.jaxis.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyAxisEvent)
type JoyAxisEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Axis      uint8
	Padding1  uint8
	Padding2  uint8
	Padding3  uint8
	Value     int16
	Padding4  uint16
}

// SDL_JoyBallEvent - Joystick trackball motion event structure (event.jball.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyBallEvent)
type JoyBallEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Ball      uint8
	Padding1  uint8
	Padding2  uint8
	Padding3  uint8
	Xrel      int16
	Yrel      int16
}

// SDL_JoyHatEvent - Joystick hat position change event structure (event.jhat.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyHatEvent)
type JoyHatEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Hat       uint8
	Value     uint8
	Padding1  uint8
	Padding2  uint8
}

// SDL_JoyButtonEvent - Joystick button event structure (event.jbutton.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyButtonEvent)
type JoyButtonEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Button    uint8
	Down      bool
	Padding1  uint8
	Padding2  uint8
}

// SDL_JoyDeviceEvent - Joystick device event structure (event.jdevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyDeviceEvent)
type JoyDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
}

// SDL_JoyBatteryEvent - Joystick battery level change event structure (event.jbattery.*)
// (https://wiki.libsdl.org/SDL3/SDL_JoyBatteryEvent)
type JoyBatteryEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	State     PowerState
	Percent   int32
}

// SDL_GamepadAxisEvent - Gamepad axis motion event structure (event.gaxis.*)
// (https://wiki.libsdl.org/SDL3/SDL_GamepadAxisEvent)
type GamepadAxisEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Axis      uint8
	Padding1  uint8
	Padding2  uint8
	Padding3  uint8
	Value     int16
	Padding4  uint16
}

// SDL_GamepadButtonEvent - Gamepad button event structure (event.gbutton.*)
// (https://wiki.libsdl.org/SDL3/SDL_GamepadButtonEvent)
type GamepadButtonEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Button    uint8
	Down      bool
	Padding1  uint8
	Padding2  uint8
}

// SDL_GamepadDeviceEvent - Gamepad device event structure (event.gdevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_GamepadDeviceEvent)
type GamepadDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
}

// SDL_GamepadTouchpadEvent - Gamepad touchpad event structure (event.gtouchpad.*)
// (https://wiki.libsdl.org/SDL3/SDL_GamepadTouchpadEvent)
type GamepadTouchpadEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     JoystickID
	Touchpad  int32
	Finger    int32
	X         float32
	Y         float32
	Pressure  float32
}

// SDL_GamepadSensorEvent - Gamepad sensor event structure (event.gsensor.*)
// (https://wiki.libsdl.org/SDL3/SDL_GamepadSensorEvent)
type GamepadSensorEvent struct {
	Type            EventType
	Reserved        uint32
	Timestamp       uint64
	Which           JoystickID
	Sensor          int32
	Data            [3]float32
	SensorTimestamp uint64
}

// SDL_AudioDeviceEvent - Audio device event structure (event.adevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_AudioDeviceEvent)
type AudioDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     AudioDeviceID
	Recording bool
	Padding1  uint8
	Padding2  uint8
	Padding3  uint8
}

// SDL_CameraDeviceEvent - Camera device event structure (event.cdevice.*)
// (https://wiki.libsdl.org/SDL3/SDL_CameraDeviceEvent)
type CameraDeviceEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	Which     CameraID
}

// SDL_RenderEvent - Renderer event structure (event.render.*)
// (https://wiki.libsdl.org/SDL3/SDL_RenderEvent)
type RenderEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
}

// SDL_TouchFingerEvent - Touch finger event structure (event.tfinger.*)
// (https://wiki.libsdl.org/SDL3/SDL_TouchFingerEvent)
type TouchFingerEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	TouchID   TouchID
	FingerID  FingerID
	X         float32
	Y         float32
	Dx        float32
	Dy        float32
	Pressure  float32
	WindowID  WindowID
}

// SDL_PenProximityEvent - Pressure-sensitive pen proximity event structure (event.pproximity.*)
// (https://wiki.libsdl.org/SDL3/SDL_PenProximityEvent)
type PenProximityEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     PenID
}

// SDL_PenMotionEvent - Pressure-sensitive pen motion event structure (event.pmotion.*)
// (https://wiki.libsdl.org/SDL3/SDL_PenMotionEvent)
type PenMotionEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     PenID
	PenState  PenInputFlags
	X         float32
	Y         float32
}

// SDL_PenTouchEvent - Pressure-sensitive pen touched event structure (event.ptouch.*)
// (https://wiki.libsdl.org/SDL3/SDL_PenTouchEvent)
type PenTouchEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     PenID
	PenState  PenInputFlags
	X         float32
	Y         float32
	Eraser    bool
	Down      bool
}

// SDL_PenButtonEvent - Pressure-sensitive pen button event structure (event.pbutton.*)
// (https://wiki.libsdl.org/SDL3/SDL_PenButtonEvent)
type PenButtonEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     PenID
	PenState  PenInputFlags
	X         float32
	Y         float32
	Button    uint8
	Down      bool
}

// SDL_PenAxisEvent - Pressure-sensitive pen pressure / angle event structure (event.paxis.*)
// (https://wiki.libsdl.org/SDL3/SDL_PenAxisEvent)
type PenAxisEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Which     PenID
	PenState  PenInputFlags
	X         float32
	Y         float32
	Axis      PenAxis
	Value     float32
}

// SDL_DropEvent - An event used to drop text or request a file open by the system (event.drop.*)
// (https://wiki.libsdl.org/SDL3/SDL_DropEvent)
type DropEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	X         float32
	Y         float32
	Source    string
	Data      string
}

// SDL_SensorEvent - Sensor event structure (event.sensor.*)
// (https://wiki.libsdl.org/SDL3/SDL_SensorEvent)
type SensorEvent struct {
	Type            EventType
	Reserved        uint32
	Timestamp       uint64
	Which           SensorID
	Data            [6]float32
	SensorTimestamp uint64
}

// SDL_QuitEvent - The "quit requested" event
// (https://wiki.libsdl.org/SDL3/SDL_QuitEvent)
type QuitEvent struct {
	Type      EventType
	Reserved  uint32
	Timestamp uint64
}

// SDL_UserEvent - A user-defined event type (event.user.*)
// (https://wiki.libsdl.org/SDL3/SDL_UserEvent)
type UserEvent struct {
	Type      uint32
	Reserved  uint32
	Timestamp uint64
	WindowID  WindowID
	Code      int32
	Data1     Pointer
	Data2     Pointer
}

// SDL_PathInfo - Information about a path on the filesystem.
// (https://wiki.libsdl.org/SDL3/SDL_PathInfo)
type PathInfo struct {
	Type       PathType
	Size       uint64
	CreateTime Time
	ModifyTime Time
	AccessTime Time
}

// SDL_GPUDevice - An opaque handle representing the [SDL_GPU](SDL_GPU) context.
// (https://wiki.libsdl.org/SDL3/SDL_GPUDevice)
type GPUDevice struct{}

// SDL_GPUBuffer - An opaque handle representing a buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBuffer)
type GPUBuffer struct{}

// SDL_GPUTransferBuffer - An opaque handle representing a transfer buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTransferBuffer)
type GPUTransferBuffer struct{}

// SDL_GPUTexture - An opaque handle representing a texture.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTexture)
type GPUTexture struct{}

// SDL_GPUSampler - An opaque handle representing a sampler.
// (https://wiki.libsdl.org/SDL3/SDL_GPUSampler)
type GPUSampler struct{}

// SDL_GPUShader - An opaque handle representing a compiled shader object.
// (https://wiki.libsdl.org/SDL3/SDL_GPUShader)
type GPUShader struct{}

// SDL_GPUComputePipeline - An opaque handle representing a compute pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUComputePipeline)
type GPUComputePipeline struct{}

// SDL_GPUGraphicsPipeline - An opaque handle representing a graphics pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUGraphicsPipeline)
type GPUGraphicsPipeline struct{}

// SDL_GPUCommandBuffer - An opaque handle representing a command buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUCommandBuffer)
type GPUCommandBuffer struct{}

// SDL_GPURenderPass - An opaque handle representing a render pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPURenderPass)
type GPURenderPass struct{}

// SDL_GPUComputePass - An opaque handle representing a compute pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUComputePass)
type GPUComputePass struct{}

// SDL_GPUCopyPass - An opaque handle representing a copy pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUCopyPass)
type GPUCopyPass struct{}

// SDL_GPUFence - An opaque handle representing a fence.
// (https://wiki.libsdl.org/SDL3/SDL_GPUFence)
type GPUFence struct{}

// SDL_GPUViewport - A structure specifying a viewport.
// (https://wiki.libsdl.org/SDL3/SDL_GPUViewport)
type GPUViewport struct {
	X        float32
	Y        float32
	W        float32
	H        float32
	MinDepth float32
	MaxDepth float32
}

// SDL_GPUTextureTransferInfo - A structure specifying parameters related to transferring data to or from a texture.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTextureTransferInfo)
type GPUTextureTransferInfo struct {
	TransferBuffer *GPUTransferBuffer
	Offset         uint32
	PixelsPerRow   uint32
	RowsPerLayer   uint32
}

// SDL_GPUTransferBufferLocation - A structure specifying a location in a transfer buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTransferBufferLocation)
type GPUTransferBufferLocation struct {
	TransferBuffer *GPUTransferBuffer
	Offset         uint32
}

// SDL_GPUTextureLocation - A structure specifying a location in a texture.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTextureLocation)
type GPUTextureLocation struct {
	Texture  *GPUTexture
	MipLevel uint32
	Layer    uint32
	X        uint32
	Y        uint32
	Z        uint32
}

// SDL_GPUTextureRegion - A structure specifying a region of a texture.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTextureRegion)
type GPUTextureRegion struct {
	Texture  *GPUTexture
	MipLevel uint32
	Layer    uint32
	X        uint32
	Y        uint32
	Z        uint32
	W        uint32
	H        uint32
	D        uint32
}

// SDL_GPUBlitRegion - A structure specifying a region of a texture used in the blit operation.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBlitRegion)
type GPUBlitRegion struct {
	Texture           *GPUTexture
	MipLevel          uint32
	LayerOrDepthPlane uint32
	X                 uint32
	Y                 uint32
	W                 uint32
	H                 uint32
}

// SDL_GPUBufferLocation - A structure specifying a location in a buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBufferLocation)
type GPUBufferLocation struct {
	Buffer *GPUBuffer
	Offset uint32
}

// SDL_GPUBufferRegion - A structure specifying a region of a buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBufferRegion)
type GPUBufferRegion struct {
	Buffer *GPUBuffer
	Offset uint32
	Size   uint32
}

// SDL_GPUIndirectDrawCommand - A structure specifying the parameters of an indirect draw command.
// (https://wiki.libsdl.org/SDL3/SDL_GPUIndirectDrawCommand)
type GPUIndirectDrawCommand struct {
	NumVertices   uint32
	NumInstances  uint32
	FirstVertex   uint32
	FirstInstance uint32
}

// SDL_GPUIndexedIndirectDrawCommand - A structure specifying the parameters of an indexed indirect draw command.
// (https://wiki.libsdl.org/SDL3/SDL_GPUIndexedIndirectDrawCommand)
type GPUIndexedIndirectDrawCommand struct {
	NumIndices    uint32
	NumInstances  uint32
	FirstIndex    uint32
	VertexOffset  int32
	FirstInstance uint32
}

// SDL_GPUIndirectDispatchCommand - A structure specifying the parameters of an indexed dispatch command.
// (https://wiki.libsdl.org/SDL3/SDL_GPUIndirectDispatchCommand)
type GPUIndirectDispatchCommand struct {
	GroupcountX uint32
	GroupcountY uint32
	GroupcountZ uint32
}

// SDL_GPUSamplerCreateInfo - A structure specifying the parameters of a sampler.
// (https://wiki.libsdl.org/SDL3/SDL_GPUSamplerCreateInfo)
type GPUSamplerCreateInfo struct {
	MinFilter        GPUFilter
	MagFilter        GPUFilter
	MipmapMode       GPUSamplerMipmapMode
	AddressModeU     GPUSamplerAddressMode
	AddressModeV     GPUSamplerAddressMode
	AddressModeW     GPUSamplerAddressMode
	MipLodBias       float32
	MaxAnisotropy    float32
	CompareOp        GPUCompareOp
	MinLod           float32
	MaxLod           float32
	EnableAnisotropy bool
	EnableCompare    bool
	Padding1         uint8
	Padding2         uint8
	Props            PropertiesID
}

// SDL_GPUVertexBufferDescription - A structure specifying the parameters of vertex buffers used in a graphics pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUVertexBufferDescription)
type GPUVertexBufferDescription struct {
	Slot             uint32
	Pitch            uint32
	InputRate        GPUVertexInputRate
	InstanceStepRate uint32
}

// SDL_GPUVertexAttribute - A structure specifying a vertex attribute.
// (https://wiki.libsdl.org/SDL3/SDL_GPUVertexAttribute)
type GPUVertexAttribute struct {
	Location   uint32
	BufferSlot uint32
	Format     GPUVertexElementFormat
	Offset     uint32
}

// SDL_GPUVertexInputState - A structure specifying the parameters of a graphics pipeline vertex input state.
// (https://wiki.libsdl.org/SDL3/SDL_GPUVertexInputState)
type GPUVertexInputState struct {
	VertexBufferDescriptions *GPUVertexBufferDescription
	NumVertexBuffers         uint32
	VertexAttributes         *GPUVertexAttribute
	NumVertexAttributes      uint32
}

// SDL_GPUStencilOpState - A structure specifying the stencil operation state of a graphics pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUStencilOpState)
type GPUStencilOpState struct {
	FailOp      GPUStencilOp
	PassOp      GPUStencilOp
	DepthFailOp GPUStencilOp
	CompareOp   GPUCompareOp
}

// SDL_GPUColorTargetBlendState - A structure specifying the blend state of a color target.
// (https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetBlendState)
type GPUColorTargetBlendState struct {
	SrcColorBlendfactor  GPUBlendFactor
	DstColorBlendfactor  GPUBlendFactor
	ColorBlendOp         GPUBlendOp
	SrcAlphaBlendfactor  GPUBlendFactor
	DstAlphaBlendfactor  GPUBlendFactor
	AlphaBlendOp         GPUBlendOp
	ColorWriteMask       GPUColorComponentFlags
	EnableBlend          bool
	EnableColorWriteMask bool
	Padding1             uint8
	Padding2             uint8
}

// SDL_GPUTextureCreateInfo - A structure specifying the parameters of a texture.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTextureCreateInfo)
type GPUTextureCreateInfo struct {
	Type              GPUTextureType
	Format            GPUTextureFormat
	Usage             GPUTextureUsageFlags
	Width             uint32
	Height            uint32
	LayerCountOrDepth uint32
	NumLevels         uint32
	SampleCount       GPUSampleCount
	Props             PropertiesID
}

// SDL_GPUBufferCreateInfo - A structure specifying the parameters of a buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBufferCreateInfo)
type GPUBufferCreateInfo struct {
	Usage GPUBufferUsageFlags
	Size  uint32
	Props PropertiesID
}

// SDL_GPUTransferBufferCreateInfo - A structure specifying the parameters of a transfer buffer.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTransferBufferCreateInfo)
type GPUTransferBufferCreateInfo struct {
	Usage GPUTransferBufferUsage
	Size  uint32
	Props PropertiesID
}

// SDL_GPURasterizerState - A structure specifying the parameters of the graphics pipeline rasterizer state.
// (https://wiki.libsdl.org/SDL3/SDL_GPURasterizerState)
type GPURasterizerState struct {
	FillMode                GPUFillMode
	CullMode                GPUCullMode
	FrontFace               GPUFrontFace
	DepthBiasConstantFactor float32
	DepthBiasClamp          float32
	DepthBiasSlopeFactor    float32
	EnableDepthBias         bool
	EnableDepthClip         bool
	Padding1                uint8
	Padding2                uint8
}

// SDL_GPUMultisampleState - A structure specifying the parameters of the graphics pipeline multisample state.
// (https://wiki.libsdl.org/SDL3/SDL_GPUMultisampleState)
type GPUMultisampleState struct {
	SampleCount GPUSampleCount
	SampleMask  uint32
	EnableMask  bool
	Padding1    uint8
	Padding2    uint8
	Padding3    uint8
}

// SDL_GPUDepthStencilState - A structure specifying the parameters of the graphics pipeline depth stencil state.
// (https://wiki.libsdl.org/SDL3/SDL_GPUDepthStencilState)
type GPUDepthStencilState struct {
	CompareOp         GPUCompareOp
	BackStencilState  GPUStencilOpState
	FrontStencilState GPUStencilOpState
	CompareMask       uint8
	WriteMask         uint8
	EnableDepthTest   bool
	EnableDepthWrite  bool
	EnableStencilTest bool
	Padding1          uint8
	Padding2          uint8
	Padding3          uint8
}

// SDL_GPUColorTargetDescription - A structure specifying the parameters of color targets used in a graphics pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetDescription)
type GPUColorTargetDescription struct {
	Format     GPUTextureFormat
	BlendState GPUColorTargetBlendState
}

// SDL_GPUGraphicsPipelineTargetInfo - A structure specifying the descriptions of render targets used in a graphics pipeline.
// (https://wiki.libsdl.org/SDL3/SDL_GPUGraphicsPipelineTargetInfo)
type GPUGraphicsPipelineTargetInfo struct {
	ColorTargetDescriptions *GPUColorTargetDescription
	NumColorTargets         uint32
	DepthStencilFormat      GPUTextureFormat
	HasDepthStencilTarget   bool
	Padding1                uint8
	Padding2                uint8
	Padding3                uint8
}

// SDL_GPUGraphicsPipelineCreateInfo - A structure specifying the parameters of a graphics pipeline state.
// (https://wiki.libsdl.org/SDL3/SDL_GPUGraphicsPipelineCreateInfo)
type GPUGraphicsPipelineCreateInfo struct {
	VertexShader      *GPUShader
	FragmentShader    *GPUShader
	VertexInputState  GPUVertexInputState
	PrimitiveType     GPUPrimitiveType
	RasterizerState   GPURasterizerState
	MultisampleState  GPUMultisampleState
	DepthStencilState GPUDepthStencilState
	TargetInfo        GPUGraphicsPipelineTargetInfo
	Props             PropertiesID
}

// SDL_GPUColorTargetInfo - A structure specifying the parameters of a color target used by a render pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUColorTargetInfo)
type GPUColorTargetInfo struct {
	Texture             *GPUTexture
	MipLevel            uint32
	LayerOrDepthPlane   uint32
	ClearColor          FColor
	LoadOp              GPULoadOp
	StoreOp             GPUStoreOp
	ResolveTexture      *GPUTexture
	ResolveMipLevel     uint32
	ResolveLayer        uint32
	Cycle               bool
	CycleResolveTexture bool
	Padding1            uint8
	Padding2            uint8
}

// SDL_GPUDepthStencilTargetInfo - A structure specifying the parameters of a depth-stencil target used by a render pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUDepthStencilTargetInfo)
type GPUDepthStencilTargetInfo struct {
	Texture        *GPUTexture
	ClearDepth     float32
	LoadOp         GPULoadOp
	StoreOp        GPUStoreOp
	StencilLoadOp  GPULoadOp
	StencilStoreOp GPUStoreOp
	Cycle          bool
	ClearStencil   uint8
	Padding1       uint8
	Padding2       uint8
}

// SDL_GPUBlitInfo - A structure containing parameters for a blit command.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBlitInfo)
type GPUBlitInfo struct {
	Source      GPUBlitRegion
	Destination GPUBlitRegion
	LoadOp      GPULoadOp
	ClearColor  FColor
	FlipMode    FlipMode
	Filter      GPUFilter
	Cycle       bool
	Padding1    uint8
	Padding2    uint8
	Padding3    uint8
}

// SDL_GPUBufferBinding - A structure specifying parameters in a buffer binding call.
// (https://wiki.libsdl.org/SDL3/SDL_GPUBufferBinding)
type GPUBufferBinding struct {
	Buffer *GPUBuffer
	Offset uint32
}

// SDL_GPUTextureSamplerBinding - A structure specifying parameters in a sampler binding call.
// (https://wiki.libsdl.org/SDL3/SDL_GPUTextureSamplerBinding)
type GPUTextureSamplerBinding struct {
	Texture *GPUTexture
	Sampler *GPUSampler
}

// SDL_GPUStorageBufferReadWriteBinding - A structure specifying parameters related to binding buffers in a compute pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUStorageBufferReadWriteBinding)
type GPUStorageBufferReadWriteBinding struct {
	Buffer   *GPUBuffer
	Cycle    bool
	Padding1 uint8
	Padding2 uint8
	Padding3 uint8
}

// SDL_GPUStorageTextureReadWriteBinding - A structure specifying parameters related to binding textures in a compute pass.
// (https://wiki.libsdl.org/SDL3/SDL_GPUStorageTextureReadWriteBinding)
type GPUStorageTextureReadWriteBinding struct {
	Texture  *GPUTexture
	MipLevel uint32
	Layer    uint32
	Cycle    bool
	Padding1 uint8
	Padding2 uint8
	Padding3 uint8
}

// SDL_Haptic - The haptic structure used to identify an SDL haptic.
// (https://wiki.libsdl.org/SDL3/SDL_Haptic)
type Haptic struct{}

// SDL_HapticDirection - Structure that represents a haptic direction.
// (https://wiki.libsdl.org/SDL3/SDL_HapticDirection)
type HapticDirection struct {
	Type uint8
	Dir  [3]int32
}

// SDL_HapticConstant - A structure containing a template for a Constant effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticConstant)
type HapticConstant struct {
	Type         uint16
	Direction    HapticDirection
	Length       uint32
	Delay        uint16
	Button       uint16
	Interval     uint16
	Level        int16
	AttackLength uint16
	AttackLevel  uint16
	FadeLength   uint16
	FadeLevel    uint16
}

// SDL_HapticPeriodic - A structure containing a template for a Periodic effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticPeriodic)
type HapticPeriodic struct {
	Type         uint16
	Direction    HapticDirection
	Length       uint32
	Delay        uint16
	Button       uint16
	Interval     uint16
	Period       uint16
	Magnitude    int16
	Offset       int16
	Phase        uint16
	AttackLength uint16
	AttackLevel  uint16
	FadeLength   uint16
	FadeLevel    uint16
}

// SDL_HapticCondition - A structure containing a template for a Condition effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticCondition)
type HapticCondition struct {
	Type       uint16
	Direction  HapticDirection
	Length     uint32
	Delay      uint16
	Button     uint16
	Interval   uint16
	RightSat   [3]uint16
	LeftSat    [3]uint16
	RightCoeff [3]int16
	LeftCoeff  [3]int16
	Deadband   [3]uint16
	Center     [3]int16
}

// SDL_HapticRamp - A structure containing a template for a Ramp effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticRamp)
type HapticRamp struct {
	Type         uint16
	Direction    HapticDirection
	Length       uint32
	Delay        uint16
	Button       uint16
	Interval     uint16
	Start        int16
	End          int16
	AttackLength uint16
	AttackLevel  uint16
	FadeLength   uint16
	FadeLevel    uint16
}

// SDL_HapticLeftRight - A structure containing a template for a Left/Right effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticLeftRight)
type HapticLeftRight struct {
	Type           uint16
	Length         uint32
	LargeMagnitude uint16
	SmallMagnitude uint16
}

// SDL_HapticCustom - A structure containing a template for the [SDL_HAPTIC_CUSTOM](SDL_HAPTIC_CUSTOM) effect.
// (https://wiki.libsdl.org/SDL3/SDL_HapticCustom)
type HapticCustom struct {
	Type         uint16
	Direction    HapticDirection
	Length       uint32
	Delay        uint16
	Button       uint16
	Interval     uint16
	Channels     uint8
	Period       uint16
	Samples      uint16
	Data         *uint16
	AttackLength uint16
	AttackLevel  uint16
	FadeLength   uint16
	FadeLevel    uint16
}

// SDL_SharedObject - An opaque datatype that represents a loaded shared object.
// (https://wiki.libsdl.org/SDL3/SDL_SharedObject)
type SharedObject struct{}

// SDL_Locale - A struct to provide locale data.
// (https://wiki.libsdl.org/SDL3/SDL_Locale)
type Locale struct {
	Language string
	Country  string
}

// SDL_MessageBoxButtonData - Individual button data.
// (https://wiki.libsdl.org/SDL3/SDL_MessageBoxButtonData)
type MessageBoxButtonData struct {
	Flags    MessageBoxButtonFlags
	ButtonID int32
	Text     string
}

// SDL_MessageBoxColor - RGB value used in a message box color scheme
// (https://wiki.libsdl.org/SDL3/SDL_MessageBoxColor)
type MessageBoxColor struct {
	R uint8
	G uint8
	B uint8
}

// SDL_MessageBoxColorScheme - A set of colors to use for message box dialogs
// (https://wiki.libsdl.org/SDL3/SDL_MessageBoxColorScheme)
type MessageBoxColorScheme struct {
	Colors [5]MessageBoxColor
}

// SDL_Process - An opaque handle representing a system process.
// (https://wiki.libsdl.org/SDL3/SDL_Process)
type Process struct{}

// SDL_Vertex - Vertex structure.
// (https://wiki.libsdl.org/SDL3/SDL_Vertex)
type Vertex struct {
	Position FPoint
	Color    FColor
	TexCoord FPoint
}

// SDL_Renderer - A structure representing rendering state
// (https://wiki.libsdl.org/SDL3/SDL_Renderer)
type Renderer struct{}

// SDL_Texture - An efficient driver-specific representation of pixel data
// (https://wiki.libsdl.org/SDL3/SDL_Texture)
type Texture struct {
	Format   PixelFormat
	W        int32
	H        int32
	Refcount int32
}

// SDL_StorageInterface - Function interface for [SDL_Storage](SDL_Storage).
// (https://wiki.libsdl.org/SDL3/SDL_StorageInterface)
type StorageInterface struct {
	Version        uint32
	Close          Pointer
	Ready          Pointer
	Enumerate      Pointer
	Info           Pointer
	ReadFile       Pointer
	WriteFile      Pointer
	Mkdir          Pointer
	Remove         Pointer
	Rename         Pointer
	Copy           Pointer
	SpaceRemaining Pointer
}

// SDL_Storage - An abstract interface for filesystem access.
// (https://wiki.libsdl.org/SDL3/SDL_Storage)
type Storage struct{}

// SDL_DateTime - A structure holding a calendar date and time broken down into its components.
// (https://wiki.libsdl.org/SDL3/SDL_DateTime)
type DateTime struct {
	Year       int32
	Month      int32
	Day        int32
	Hour       int32
	Minute     int32
	Second     int32
	Nanosecond int32
	DayOfWeek  int32
	UtcOffset  int32
}

// SDL_Tray - An opaque handle representing a toplevel system tray object.
// (https://wiki.libsdl.org/SDL3/SDL_Tray)
type Tray struct{}

// SDL_TrayMenu - An opaque handle representing a menu/submenu on a system tray object.
// (https://wiki.libsdl.org/SDL3/SDL_TrayMenu)
type TrayMenu struct{}

// SDL_TrayEntry - An opaque handle representing an entry on a system tray object.
// (https://wiki.libsdl.org/SDL3/SDL_TrayEntry)
type TrayEntry struct{}
