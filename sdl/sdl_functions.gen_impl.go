//go:build windows || unix

package sdl

import (
	puregogen "github.com/Zyko0/purego-gen"
	purego "github.com/ebitengine/purego"
	"runtime"
	"unsafe"
)

// File generated by github.com/Zyko0/purego-gen. DO NOT EDIT.

var (
	// Library handles
	_hnd_sdl uintptr
	// Symbols
	// sdl
	_addr_SDL_free                                  uintptr
	_addr_SDL_AsyncIOFromFile                       uintptr
	_addr_SDL_GetAsyncIOSize                        uintptr
	_addr_SDL_ReadAsyncIO                           uintptr
	_addr_SDL_WriteAsyncIO                          uintptr
	_addr_SDL_CloseAsyncIO                          uintptr
	_addr_SDL_CreateAsyncIOQueue                    uintptr
	_addr_SDL_DestroyAsyncIOQueue                   uintptr
	_addr_SDL_GetAsyncIOResult                      uintptr
	_addr_SDL_WaitAsyncIOResult                     uintptr
	_addr_SDL_SignalAsyncIOQueue                    uintptr
	_addr_SDL_LoadFileAsync                         uintptr
	_addr_SDL_TryLockSpinlock                       uintptr
	_addr_SDL_LockSpinlock                          uintptr
	_addr_SDL_UnlockSpinlock                        uintptr
	_addr_SDL_MemoryBarrierReleaseFunction          uintptr
	_addr_SDL_MemoryBarrierAcquireFunction          uintptr
	_addr_SDL_CompareAndSwapAtomicInt               uintptr
	_addr_SDL_SetAtomicInt                          uintptr
	_addr_SDL_GetAtomicInt                          uintptr
	_addr_SDL_AddAtomicInt                          uintptr
	_addr_SDL_CompareAndSwapAtomicU32               uintptr
	_addr_SDL_SetAtomicU32                          uintptr
	_addr_SDL_GetAtomicU32                          uintptr
	_addr_SDL_CompareAndSwapAtomicPointer           uintptr
	_addr_SDL_SetAtomicPointer                      uintptr
	_addr_SDL_GetAtomicPointer                      uintptr
	_addr_SDL_SetError                              uintptr
	_addr_SDL_SetErrorV                             uintptr
	_addr_SDL_OutOfMemory                           uintptr
	_addr_SDL_GetError                              uintptr
	_addr_SDL_ClearError                            uintptr
	_addr_SDL_GetGlobalProperties                   uintptr
	_addr_SDL_CreateProperties                      uintptr
	_addr_SDL_CopyProperties                        uintptr
	_addr_SDL_LockProperties                        uintptr
	_addr_SDL_UnlockProperties                      uintptr
	_addr_SDL_SetPointerPropertyWithCleanup         uintptr
	_addr_SDL_SetPointerProperty                    uintptr
	_addr_SDL_SetStringProperty                     uintptr
	_addr_SDL_SetNumberProperty                     uintptr
	_addr_SDL_SetBooleanProperty                    uintptr
	_addr_SDL_HasProperty                           uintptr
	_addr_SDL_GetPropertyType                       uintptr
	_addr_SDL_GetPointerProperty                    uintptr
	_addr_SDL_GetStringProperty                     uintptr
	_addr_SDL_GetNumberProperty                     uintptr
	_addr_SDL_GetBooleanProperty                    uintptr
	_addr_SDL_ClearProperty                         uintptr
	_addr_SDL_EnumerateProperties                   uintptr
	_addr_SDL_DestroyProperties                     uintptr
	_addr_SDL_GetThreadName                         uintptr
	_addr_SDL_GetCurrentThreadID                    uintptr
	_addr_SDL_GetThreadID                           uintptr
	_addr_SDL_SetCurrentThreadPriority              uintptr
	_addr_SDL_WaitThread                            uintptr
	_addr_SDL_GetThreadState                        uintptr
	_addr_SDL_DetachThread                          uintptr
	_addr_SDL_GetTLS                                uintptr
	_addr_SDL_SetTLS                                uintptr
	_addr_SDL_CleanupTLS                            uintptr
	_addr_SDL_CreateMutex                           uintptr
	_addr_SDL_LockMutex                             uintptr
	_addr_SDL_TryLockMutex                          uintptr
	_addr_SDL_UnlockMutex                           uintptr
	_addr_SDL_DestroyMutex                          uintptr
	_addr_SDL_CreateRWLock                          uintptr
	_addr_SDL_LockRWLockForReading                  uintptr
	_addr_SDL_LockRWLockForWriting                  uintptr
	_addr_SDL_TryLockRWLockForReading               uintptr
	_addr_SDL_TryLockRWLockForWriting               uintptr
	_addr_SDL_UnlockRWLock                          uintptr
	_addr_SDL_DestroyRWLock                         uintptr
	_addr_SDL_CreateSemaphore                       uintptr
	_addr_SDL_DestroySemaphore                      uintptr
	_addr_SDL_WaitSemaphore                         uintptr
	_addr_SDL_TryWaitSemaphore                      uintptr
	_addr_SDL_WaitSemaphoreTimeout                  uintptr
	_addr_SDL_SignalSemaphore                       uintptr
	_addr_SDL_GetSemaphoreValue                     uintptr
	_addr_SDL_CreateCondition                       uintptr
	_addr_SDL_DestroyCondition                      uintptr
	_addr_SDL_SignalCondition                       uintptr
	_addr_SDL_BroadcastCondition                    uintptr
	_addr_SDL_WaitCondition                         uintptr
	_addr_SDL_WaitConditionTimeout                  uintptr
	_addr_SDL_ShouldInit                            uintptr
	_addr_SDL_ShouldQuit                            uintptr
	_addr_SDL_SetInitialized                        uintptr
	_addr_SDL_IOFromFile                            uintptr
	_addr_SDL_IOFromMem                             uintptr
	_addr_SDL_IOFromConstMem                        uintptr
	_addr_SDL_IOFromDynamicMem                      uintptr
	_addr_SDL_OpenIO                                uintptr
	_addr_SDL_CloseIO                               uintptr
	_addr_SDL_GetIOProperties                       uintptr
	_addr_SDL_GetIOStatus                           uintptr
	_addr_SDL_GetIOSize                             uintptr
	_addr_SDL_SeekIO                                uintptr
	_addr_SDL_TellIO                                uintptr
	_addr_SDL_ReadIO                                uintptr
	_addr_SDL_WriteIO                               uintptr
	_addr_SDL_IOprintf                              uintptr
	_addr_SDL_IOvprintf                             uintptr
	_addr_SDL_FlushIO                               uintptr
	_addr_SDL_LoadFile_IO                           uintptr
	_addr_SDL_LoadFile                              uintptr
	_addr_SDL_SaveFile_IO                           uintptr
	_addr_SDL_SaveFile                              uintptr
	_addr_SDL_ReadU8                                uintptr
	_addr_SDL_ReadS8                                uintptr
	_addr_SDL_ReadU16LE                             uintptr
	_addr_SDL_ReadS16LE                             uintptr
	_addr_SDL_ReadU16BE                             uintptr
	_addr_SDL_ReadS16BE                             uintptr
	_addr_SDL_ReadU32LE                             uintptr
	_addr_SDL_ReadS32LE                             uintptr
	_addr_SDL_ReadU32BE                             uintptr
	_addr_SDL_ReadS32BE                             uintptr
	_addr_SDL_ReadU64LE                             uintptr
	_addr_SDL_ReadS64LE                             uintptr
	_addr_SDL_ReadU64BE                             uintptr
	_addr_SDL_ReadS64BE                             uintptr
	_addr_SDL_WriteU8                               uintptr
	_addr_SDL_WriteS8                               uintptr
	_addr_SDL_WriteU16LE                            uintptr
	_addr_SDL_WriteS16LE                            uintptr
	_addr_SDL_WriteU16BE                            uintptr
	_addr_SDL_WriteS16BE                            uintptr
	_addr_SDL_WriteU32LE                            uintptr
	_addr_SDL_WriteS32LE                            uintptr
	_addr_SDL_WriteU32BE                            uintptr
	_addr_SDL_WriteS32BE                            uintptr
	_addr_SDL_WriteU64LE                            uintptr
	_addr_SDL_WriteS64LE                            uintptr
	_addr_SDL_WriteU64BE                            uintptr
	_addr_SDL_WriteS64BE                            uintptr
	_addr_SDL_GetNumAudioDrivers                    uintptr
	_addr_SDL_GetAudioDriver                        uintptr
	_addr_SDL_GetCurrentAudioDriver                 uintptr
	_addr_SDL_GetAudioPlaybackDevices               uintptr
	_addr_SDL_GetAudioRecordingDevices              uintptr
	_addr_SDL_GetAudioDeviceName                    uintptr
	_addr_SDL_GetAudioDeviceFormat                  uintptr
	_addr_SDL_GetAudioDeviceChannelMap              uintptr
	_addr_SDL_OpenAudioDevice                       uintptr
	_addr_SDL_IsAudioDevicePhysical                 uintptr
	_addr_SDL_IsAudioDevicePlayback                 uintptr
	_addr_SDL_PauseAudioDevice                      uintptr
	_addr_SDL_ResumeAudioDevice                     uintptr
	_addr_SDL_AudioDevicePaused                     uintptr
	_addr_SDL_CloseAudioDevice                      uintptr
	_addr_SDL_BindAudioStreams                      uintptr
	_addr_SDL_BindAudioStream                       uintptr
	_addr_SDL_UnbindAudioStreams                    uintptr
	_addr_SDL_UnbindAudioStream                     uintptr
	_addr_SDL_GetAudioStreamDevice                  uintptr
	_addr_SDL_CreateAudioStream                     uintptr
	_addr_SDL_GetAudioStreamProperties              uintptr
	_addr_SDL_GetAudioStreamFormat                  uintptr
	_addr_SDL_SetAudioStreamFormat                  uintptr
	_addr_SDL_GetAudioStreamInputChannelMap         uintptr
	_addr_SDL_GetAudioStreamOutputChannelMap        uintptr
	_addr_SDL_SetAudioStreamInputChannelMap         uintptr
	_addr_SDL_SetAudioStreamOutputChannelMap        uintptr
	_addr_SDL_PutAudioStreamData                    uintptr
	_addr_SDL_GetAudioStreamData                    uintptr
	_addr_SDL_GetAudioStreamAvailable               uintptr
	_addr_SDL_GetAudioStreamQueued                  uintptr
	_addr_SDL_FlushAudioStream                      uintptr
	_addr_SDL_ClearAudioStream                      uintptr
	_addr_SDL_PauseAudioStreamDevice                uintptr
	_addr_SDL_ResumeAudioStreamDevice               uintptr
	_addr_SDL_AudioStreamDevicePaused               uintptr
	_addr_SDL_LockAudioStream                       uintptr
	_addr_SDL_UnlockAudioStream                     uintptr
	_addr_SDL_SetAudioStreamGetCallback             uintptr
	_addr_SDL_SetAudioStreamPutCallback             uintptr
	_addr_SDL_DestroyAudioStream                    uintptr
	_addr_SDL_OpenAudioDeviceStream                 uintptr
	_addr_SDL_SetAudioPostmixCallback               uintptr
	_addr_SDL_LoadWAV_IO                            uintptr
	_addr_SDL_LoadWAV                               uintptr
	_addr_SDL_ConvertAudioSamples                   uintptr
	_addr_SDL_GetAudioFormatName                    uintptr
	_addr_SDL_GetSilenceValueForFormat              uintptr
	_addr_SDL_ComposeCustomBlendMode                uintptr
	_addr_SDL_GetPixelFormatName                    uintptr
	_addr_SDL_GetMasksForPixelFormat                uintptr
	_addr_SDL_GetPixelFormatForMasks                uintptr
	_addr_SDL_GetPixelFormatDetails                 uintptr
	_addr_SDL_CreatePalette                         uintptr
	_addr_SDL_SetPaletteColors                      uintptr
	_addr_SDL_DestroyPalette                        uintptr
	_addr_SDL_MapRGB                                uintptr
	_addr_SDL_MapRGBA                               uintptr
	_addr_SDL_GetRGB                                uintptr
	_addr_SDL_GetRGBA                               uintptr
	_addr_SDL_HasRectIntersection                   uintptr
	_addr_SDL_GetRectIntersection                   uintptr
	_addr_SDL_GetRectUnion                          uintptr
	_addr_SDL_GetRectEnclosingPoints                uintptr
	_addr_SDL_GetRectAndLineIntersection            uintptr
	_addr_SDL_HasRectIntersectionFloat              uintptr
	_addr_SDL_GetRectIntersectionFloat              uintptr
	_addr_SDL_GetRectUnionFloat                     uintptr
	_addr_SDL_GetRectEnclosingPointsFloat           uintptr
	_addr_SDL_GetRectAndLineIntersectionFloat       uintptr
	_addr_SDL_CreateSurface                         uintptr
	_addr_SDL_CreateSurfaceFrom                     uintptr
	_addr_SDL_DestroySurface                        uintptr
	_addr_SDL_GetSurfaceProperties                  uintptr
	_addr_SDL_SetSurfaceColorspace                  uintptr
	_addr_SDL_GetSurfaceColorspace                  uintptr
	_addr_SDL_CreateSurfacePalette                  uintptr
	_addr_SDL_SetSurfacePalette                     uintptr
	_addr_SDL_GetSurfacePalette                     uintptr
	_addr_SDL_AddSurfaceAlternateImage              uintptr
	_addr_SDL_SurfaceHasAlternateImages             uintptr
	_addr_SDL_GetSurfaceImages                      uintptr
	_addr_SDL_RemoveSurfaceAlternateImages          uintptr
	_addr_SDL_LockSurface                           uintptr
	_addr_SDL_UnlockSurface                         uintptr
	_addr_SDL_LoadBMP_IO                            uintptr
	_addr_SDL_LoadBMP                               uintptr
	_addr_SDL_SaveBMP_IO                            uintptr
	_addr_SDL_SaveBMP                               uintptr
	_addr_SDL_SetSurfaceRLE                         uintptr
	_addr_SDL_SurfaceHasRLE                         uintptr
	_addr_SDL_SetSurfaceColorKey                    uintptr
	_addr_SDL_SurfaceHasColorKey                    uintptr
	_addr_SDL_GetSurfaceColorKey                    uintptr
	_addr_SDL_SetSurfaceColorMod                    uintptr
	_addr_SDL_GetSurfaceColorMod                    uintptr
	_addr_SDL_SetSurfaceAlphaMod                    uintptr
	_addr_SDL_GetSurfaceAlphaMod                    uintptr
	_addr_SDL_SetSurfaceBlendMode                   uintptr
	_addr_SDL_GetSurfaceBlendMode                   uintptr
	_addr_SDL_SetSurfaceClipRect                    uintptr
	_addr_SDL_GetSurfaceClipRect                    uintptr
	_addr_SDL_FlipSurface                           uintptr
	_addr_SDL_DuplicateSurface                      uintptr
	_addr_SDL_ScaleSurface                          uintptr
	_addr_SDL_ConvertSurface                        uintptr
	_addr_SDL_ConvertSurfaceAndColorspace           uintptr
	_addr_SDL_ConvertPixels                         uintptr
	_addr_SDL_ConvertPixelsAndColorspace            uintptr
	_addr_SDL_PremultiplyAlpha                      uintptr
	_addr_SDL_PremultiplySurfaceAlpha               uintptr
	_addr_SDL_FillSurfaceRect                       uintptr
	_addr_SDL_FillSurfaceRects                      uintptr
	_addr_SDL_BlitSurface                           uintptr
	_addr_SDL_BlitSurfaceUnchecked                  uintptr
	_addr_SDL_BlitSurfaceScaled                     uintptr
	_addr_SDL_BlitSurfaceUncheckedScaled            uintptr
	_addr_SDL_StretchSurface                        uintptr
	_addr_SDL_BlitSurfaceTiled                      uintptr
	_addr_SDL_MapSurfaceRGB                         uintptr
	_addr_SDL_MapSurfaceRGBA                        uintptr
	_addr_SDL_ReadSurfacePixel                      uintptr
	_addr_SDL_ReadSurfacePixelFloat                 uintptr
	_addr_SDL_WriteSurfacePixel                     uintptr
	_addr_SDL_GetNumCameraDrivers                   uintptr
	_addr_SDL_GetCameraDriver                       uintptr
	_addr_SDL_GetCurrentCameraDriver                uintptr
	_addr_SDL_GetCameras                            uintptr
	_addr_SDL_GetCameraSupportedFormats             uintptr
	_addr_SDL_GetCameraName                         uintptr
	_addr_SDL_GetCameraPosition                     uintptr
	_addr_SDL_OpenCamera                            uintptr
	_addr_SDL_GetCameraPermissionState              uintptr
	_addr_SDL_GetCameraID                           uintptr
	_addr_SDL_GetCameraProperties                   uintptr
	_addr_SDL_GetCameraFormat                       uintptr
	_addr_SDL_AcquireCameraFrame                    uintptr
	_addr_SDL_ReleaseCameraFrame                    uintptr
	_addr_SDL_CloseCamera                           uintptr
	_addr_SDL_SetClipboardText                      uintptr
	_addr_SDL_GetClipboardText                      uintptr
	_addr_SDL_HasClipboardText                      uintptr
	_addr_SDL_SetPrimarySelectionText               uintptr
	_addr_SDL_GetPrimarySelectionText               uintptr
	_addr_SDL_HasPrimarySelectionText               uintptr
	_addr_SDL_SetClipboardData                      uintptr
	_addr_SDL_ClearClipboardData                    uintptr
	_addr_SDL_GetClipboardData                      uintptr
	_addr_SDL_HasClipboardData                      uintptr
	_addr_SDL_GetClipboardMimeTypes                 uintptr
	_addr_SDL_GetNumLogicalCPUCores                 uintptr
	_addr_SDL_GetCPUCacheLineSize                   uintptr
	_addr_SDL_HasAltiVec                            uintptr
	_addr_SDL_HasMMX                                uintptr
	_addr_SDL_HasSSE                                uintptr
	_addr_SDL_HasSSE2                               uintptr
	_addr_SDL_HasSSE3                               uintptr
	_addr_SDL_HasSSE41                              uintptr
	_addr_SDL_HasSSE42                              uintptr
	_addr_SDL_HasAVX                                uintptr
	_addr_SDL_HasAVX2                               uintptr
	_addr_SDL_HasAVX512F                            uintptr
	_addr_SDL_HasARMSIMD                            uintptr
	_addr_SDL_HasNEON                               uintptr
	_addr_SDL_HasLSX                                uintptr
	_addr_SDL_HasLASX                               uintptr
	_addr_SDL_GetSystemRAM                          uintptr
	_addr_SDL_GetSIMDAlignment                      uintptr
	_addr_SDL_GetNumVideoDrivers                    uintptr
	_addr_SDL_GetVideoDriver                        uintptr
	_addr_SDL_GetCurrentVideoDriver                 uintptr
	_addr_SDL_GetSystemTheme                        uintptr
	_addr_SDL_GetDisplays                           uintptr
	_addr_SDL_GetPrimaryDisplay                     uintptr
	_addr_SDL_GetDisplayProperties                  uintptr
	_addr_SDL_GetDisplayName                        uintptr
	_addr_SDL_GetDisplayBounds                      uintptr
	_addr_SDL_GetDisplayUsableBounds                uintptr
	_addr_SDL_GetNaturalDisplayOrientation          uintptr
	_addr_SDL_GetCurrentDisplayOrientation          uintptr
	_addr_SDL_GetFullscreenDisplayModes             uintptr
	_addr_SDL_GetDesktopDisplayMode                 uintptr
	_addr_SDL_GetCurrentDisplayMode                 uintptr
	_addr_SDL_GetDisplayForPoint                    uintptr
	_addr_SDL_GetDisplayForRect                     uintptr
	_addr_SDL_GetDisplayForWindow                   uintptr
	_addr_SDL_SetWindowFullscreenMode               uintptr
	_addr_SDL_GetWindowFullscreenMode               uintptr
	_addr_SDL_GetWindowICCProfile                   uintptr
	_addr_SDL_GetWindowPixelFormat                  uintptr
	_addr_SDL_GetWindows                            uintptr
	_addr_SDL_CreateWindow                          uintptr
	_addr_SDL_CreatePopupWindow                     uintptr
	_addr_SDL_CreateWindowWithProperties            uintptr
	_addr_SDL_GetWindowID                           uintptr
	_addr_SDL_GetWindowFromID                       uintptr
	_addr_SDL_GetWindowParent                       uintptr
	_addr_SDL_GetWindowProperties                   uintptr
	_addr_SDL_GetWindowFlags                        uintptr
	_addr_SDL_SetWindowTitle                        uintptr
	_addr_SDL_GetWindowTitle                        uintptr
	_addr_SDL_SetWindowIcon                         uintptr
	_addr_SDL_SetWindowPosition                     uintptr
	_addr_SDL_GetWindowPosition                     uintptr
	_addr_SDL_SetWindowSize                         uintptr
	_addr_SDL_GetWindowSize                         uintptr
	_addr_SDL_GetWindowSafeArea                     uintptr
	_addr_SDL_GetWindowAspectRatio                  uintptr
	_addr_SDL_GetWindowBordersSize                  uintptr
	_addr_SDL_GetWindowSizeInPixels                 uintptr
	_addr_SDL_SetWindowMinimumSize                  uintptr
	_addr_SDL_GetWindowMinimumSize                  uintptr
	_addr_SDL_SetWindowMaximumSize                  uintptr
	_addr_SDL_GetWindowMaximumSize                  uintptr
	_addr_SDL_SetWindowBordered                     uintptr
	_addr_SDL_SetWindowResizable                    uintptr
	_addr_SDL_SetWindowAlwaysOnTop                  uintptr
	_addr_SDL_ShowWindow                            uintptr
	_addr_SDL_HideWindow                            uintptr
	_addr_SDL_RaiseWindow                           uintptr
	_addr_SDL_MaximizeWindow                        uintptr
	_addr_SDL_MinimizeWindow                        uintptr
	_addr_SDL_RestoreWindow                         uintptr
	_addr_SDL_SetWindowFullscreen                   uintptr
	_addr_SDL_SyncWindow                            uintptr
	_addr_SDL_WindowHasSurface                      uintptr
	_addr_SDL_GetWindowSurface                      uintptr
	_addr_SDL_SetWindowSurfaceVSync                 uintptr
	_addr_SDL_GetWindowSurfaceVSync                 uintptr
	_addr_SDL_UpdateWindowSurface                   uintptr
	_addr_SDL_UpdateWindowSurfaceRects              uintptr
	_addr_SDL_DestroyWindowSurface                  uintptr
	_addr_SDL_SetWindowKeyboardGrab                 uintptr
	_addr_SDL_SetWindowMouseGrab                    uintptr
	_addr_SDL_GetWindowKeyboardGrab                 uintptr
	_addr_SDL_GetWindowMouseGrab                    uintptr
	_addr_SDL_GetGrabbedWindow                      uintptr
	_addr_SDL_SetWindowMouseRect                    uintptr
	_addr_SDL_GetWindowMouseRect                    uintptr
	_addr_SDL_SetWindowParent                       uintptr
	_addr_SDL_SetWindowModal                        uintptr
	_addr_SDL_SetWindowFocusable                    uintptr
	_addr_SDL_ShowWindowSystemMenu                  uintptr
	_addr_SDL_SetWindowHitTest                      uintptr
	_addr_SDL_SetWindowShape                        uintptr
	_addr_SDL_FlashWindow                           uintptr
	_addr_SDL_DestroyWindow                         uintptr
	_addr_SDL_ScreenSaverEnabled                    uintptr
	_addr_SDL_EnableScreenSaver                     uintptr
	_addr_SDL_DisableScreenSaver                    uintptr
	_addr_SDL_GL_LoadLibrary                        uintptr
	_addr_SDL_GL_GetProcAddress                     uintptr
	_addr_SDL_EGL_GetProcAddress                    uintptr
	_addr_SDL_GL_UnloadLibrary                      uintptr
	_addr_SDL_GL_ExtensionSupported                 uintptr
	_addr_SDL_GL_ResetAttributes                    uintptr
	_addr_SDL_GL_SetAttribute                       uintptr
	_addr_SDL_GL_GetAttribute                       uintptr
	_addr_SDL_GL_CreateContext                      uintptr
	_addr_SDL_GL_MakeCurrent                        uintptr
	_addr_SDL_GL_GetCurrentWindow                   uintptr
	_addr_SDL_GL_GetCurrentContext                  uintptr
	_addr_SDL_EGL_GetCurrentDisplay                 uintptr
	_addr_SDL_EGL_GetCurrentConfig                  uintptr
	_addr_SDL_EGL_GetWindowSurface                  uintptr
	_addr_SDL_EGL_SetAttributeCallbacks             uintptr
	_addr_SDL_GL_SetSwapInterval                    uintptr
	_addr_SDL_GL_GetSwapInterval                    uintptr
	_addr_SDL_GL_SwapWindow                         uintptr
	_addr_SDL_GL_DestroyContext                     uintptr
	_addr_SDL_ShowOpenFileDialog                    uintptr
	_addr_SDL_ShowSaveFileDialog                    uintptr
	_addr_SDL_ShowOpenFolderDialog                  uintptr
	_addr_SDL_ShowFileDialogWithProperties          uintptr
	_addr_SDL_GUIDToString                          uintptr
	_addr_SDL_StringToGUID                          uintptr
	_addr_SDL_GetPowerInfo                          uintptr
	_addr_SDL_GetSensors                            uintptr
	_addr_SDL_GetSensorNameForID                    uintptr
	_addr_SDL_GetSensorTypeForID                    uintptr
	_addr_SDL_GetSensorNonPortableTypeForID         uintptr
	_addr_SDL_OpenSensor                            uintptr
	_addr_SDL_GetSensorFromID                       uintptr
	_addr_SDL_GetSensorProperties                   uintptr
	_addr_SDL_GetSensorName                         uintptr
	_addr_SDL_GetSensorType                         uintptr
	_addr_SDL_GetSensorNonPortableType              uintptr
	_addr_SDL_GetSensorID                           uintptr
	_addr_SDL_GetSensorData                         uintptr
	_addr_SDL_CloseSensor                           uintptr
	_addr_SDL_UpdateSensors                         uintptr
	_addr_SDL_LockJoysticks                         uintptr
	_addr_SDL_UnlockJoysticks                       uintptr
	_addr_SDL_HasJoystick                           uintptr
	_addr_SDL_GetJoysticks                          uintptr
	_addr_SDL_GetJoystickNameForID                  uintptr
	_addr_SDL_GetJoystickPathForID                  uintptr
	_addr_SDL_GetJoystickPlayerIndexForID           uintptr
	_addr_SDL_GetJoystickGUIDForID                  uintptr
	_addr_SDL_GetJoystickVendorForID                uintptr
	_addr_SDL_GetJoystickProductForID               uintptr
	_addr_SDL_GetJoystickProductVersionForID        uintptr
	_addr_SDL_GetJoystickTypeForID                  uintptr
	_addr_SDL_OpenJoystick                          uintptr
	_addr_SDL_GetJoystickFromID                     uintptr
	_addr_SDL_GetJoystickFromPlayerIndex            uintptr
	_addr_SDL_AttachVirtualJoystick                 uintptr
	_addr_SDL_DetachVirtualJoystick                 uintptr
	_addr_SDL_IsJoystickVirtual                     uintptr
	_addr_SDL_SetJoystickVirtualAxis                uintptr
	_addr_SDL_SetJoystickVirtualBall                uintptr
	_addr_SDL_SetJoystickVirtualButton              uintptr
	_addr_SDL_SetJoystickVirtualHat                 uintptr
	_addr_SDL_SendJoystickVirtualSensorData         uintptr
	_addr_SDL_GetJoystickProperties                 uintptr
	_addr_SDL_GetJoystickName                       uintptr
	_addr_SDL_GetJoystickPath                       uintptr
	_addr_SDL_GetJoystickPlayerIndex                uintptr
	_addr_SDL_SetJoystickPlayerIndex                uintptr
	_addr_SDL_GetJoystickGUID                       uintptr
	_addr_SDL_GetJoystickVendor                     uintptr
	_addr_SDL_GetJoystickProduct                    uintptr
	_addr_SDL_GetJoystickProductVersion             uintptr
	_addr_SDL_GetJoystickFirmwareVersion            uintptr
	_addr_SDL_GetJoystickSerial                     uintptr
	_addr_SDL_GetJoystickType                       uintptr
	_addr_SDL_GetJoystickGUIDInfo                   uintptr
	_addr_SDL_JoystickConnected                     uintptr
	_addr_SDL_GetJoystickID                         uintptr
	_addr_SDL_GetNumJoystickAxes                    uintptr
	_addr_SDL_GetNumJoystickBalls                   uintptr
	_addr_SDL_GetNumJoystickHats                    uintptr
	_addr_SDL_GetNumJoystickButtons                 uintptr
	_addr_SDL_SetJoystickEventsEnabled              uintptr
	_addr_SDL_JoystickEventsEnabled                 uintptr
	_addr_SDL_UpdateJoysticks                       uintptr
	_addr_SDL_GetJoystickAxis                       uintptr
	_addr_SDL_GetJoystickAxisInitialState           uintptr
	_addr_SDL_GetJoystickBall                       uintptr
	_addr_SDL_GetJoystickHat                        uintptr
	_addr_SDL_GetJoystickButton                     uintptr
	_addr_SDL_RumbleJoystick                        uintptr
	_addr_SDL_RumbleJoystickTriggers                uintptr
	_addr_SDL_SetJoystickLED                        uintptr
	_addr_SDL_SendJoystickEffect                    uintptr
	_addr_SDL_CloseJoystick                         uintptr
	_addr_SDL_GetJoystickConnectionState            uintptr
	_addr_SDL_GetJoystickPowerInfo                  uintptr
	_addr_SDL_AddGamepadMapping                     uintptr
	_addr_SDL_AddGamepadMappingsFromIO              uintptr
	_addr_SDL_AddGamepadMappingsFromFile            uintptr
	_addr_SDL_ReloadGamepadMappings                 uintptr
	_addr_SDL_GetGamepadMappings                    uintptr
	_addr_SDL_GetGamepadMappingForGUID              uintptr
	_addr_SDL_GetGamepadMapping                     uintptr
	_addr_SDL_SetGamepadMapping                     uintptr
	_addr_SDL_HasGamepad                            uintptr
	_addr_SDL_GetGamepads                           uintptr
	_addr_SDL_IsGamepad                             uintptr
	_addr_SDL_GetGamepadNameForID                   uintptr
	_addr_SDL_GetGamepadPathForID                   uintptr
	_addr_SDL_GetGamepadPlayerIndexForID            uintptr
	_addr_SDL_GetGamepadGUIDForID                   uintptr
	_addr_SDL_GetGamepadVendorForID                 uintptr
	_addr_SDL_GetGamepadProductForID                uintptr
	_addr_SDL_GetGamepadProductVersionForID         uintptr
	_addr_SDL_GetGamepadTypeForID                   uintptr
	_addr_SDL_GetRealGamepadTypeForID               uintptr
	_addr_SDL_GetGamepadMappingForID                uintptr
	_addr_SDL_OpenGamepad                           uintptr
	_addr_SDL_GetGamepadFromID                      uintptr
	_addr_SDL_GetGamepadFromPlayerIndex             uintptr
	_addr_SDL_GetGamepadProperties                  uintptr
	_addr_SDL_GetGamepadID                          uintptr
	_addr_SDL_GetGamepadName                        uintptr
	_addr_SDL_GetGamepadPath                        uintptr
	_addr_SDL_GetGamepadType                        uintptr
	_addr_SDL_GetRealGamepadType                    uintptr
	_addr_SDL_GetGamepadPlayerIndex                 uintptr
	_addr_SDL_SetGamepadPlayerIndex                 uintptr
	_addr_SDL_GetGamepadVendor                      uintptr
	_addr_SDL_GetGamepadProduct                     uintptr
	_addr_SDL_GetGamepadProductVersion              uintptr
	_addr_SDL_GetGamepadFirmwareVersion             uintptr
	_addr_SDL_GetGamepadSerial                      uintptr
	_addr_SDL_GetGamepadSteamHandle                 uintptr
	_addr_SDL_GetGamepadConnectionState             uintptr
	_addr_SDL_GetGamepadPowerInfo                   uintptr
	_addr_SDL_GamepadConnected                      uintptr
	_addr_SDL_GetGamepadJoystick                    uintptr
	_addr_SDL_SetGamepadEventsEnabled               uintptr
	_addr_SDL_GamepadEventsEnabled                  uintptr
	_addr_SDL_GetGamepadBindings                    uintptr
	_addr_SDL_UpdateGamepads                        uintptr
	_addr_SDL_GetGamepadTypeFromString              uintptr
	_addr_SDL_GetGamepadStringForType               uintptr
	_addr_SDL_GetGamepadAxisFromString              uintptr
	_addr_SDL_GetGamepadStringForAxis               uintptr
	_addr_SDL_GamepadHasAxis                        uintptr
	_addr_SDL_GetGamepadAxis                        uintptr
	_addr_SDL_GetGamepadButtonFromString            uintptr
	_addr_SDL_GetGamepadStringForButton             uintptr
	_addr_SDL_GamepadHasButton                      uintptr
	_addr_SDL_GetGamepadButton                      uintptr
	_addr_SDL_GetGamepadButtonLabelForType          uintptr
	_addr_SDL_GetGamepadButtonLabel                 uintptr
	_addr_SDL_GetNumGamepadTouchpads                uintptr
	_addr_SDL_GetNumGamepadTouchpadFingers          uintptr
	_addr_SDL_GetGamepadTouchpadFinger              uintptr
	_addr_SDL_GamepadHasSensor                      uintptr
	_addr_SDL_SetGamepadSensorEnabled               uintptr
	_addr_SDL_GamepadSensorEnabled                  uintptr
	_addr_SDL_GetGamepadSensorData                  uintptr
	_addr_SDL_RumbleGamepad                         uintptr
	_addr_SDL_RumbleGamepadTriggers                 uintptr
	_addr_SDL_SetGamepadLED                         uintptr
	_addr_SDL_SendGamepadEffect                     uintptr
	_addr_SDL_CloseGamepad                          uintptr
	_addr_SDL_GetGamepadAppleSFSymbolsNameForButton uintptr
	_addr_SDL_GetGamepadAppleSFSymbolsNameForAxis   uintptr
	_addr_SDL_HasKeyboard                           uintptr
	_addr_SDL_GetKeyboards                          uintptr
	_addr_SDL_GetKeyboardNameForID                  uintptr
	_addr_SDL_GetKeyboardFocus                      uintptr
	_addr_SDL_GetKeyboardState                      uintptr
	_addr_SDL_ResetKeyboard                         uintptr
	_addr_SDL_GetModState                           uintptr
	_addr_SDL_SetModState                           uintptr
	_addr_SDL_GetKeyFromScancode                    uintptr
	_addr_SDL_GetScancodeFromKey                    uintptr
	_addr_SDL_SetScancodeName                       uintptr
	_addr_SDL_GetScancodeName                       uintptr
	_addr_SDL_GetScancodeFromName                   uintptr
	_addr_SDL_GetKeyName                            uintptr
	_addr_SDL_GetKeyFromName                        uintptr
	_addr_SDL_StartTextInput                        uintptr
	_addr_SDL_StartTextInputWithProperties          uintptr
	_addr_SDL_TextInputActive                       uintptr
	_addr_SDL_StopTextInput                         uintptr
	_addr_SDL_ClearComposition                      uintptr
	_addr_SDL_SetTextInputArea                      uintptr
	_addr_SDL_GetTextInputArea                      uintptr
	_addr_SDL_HasScreenKeyboardSupport              uintptr
	_addr_SDL_ScreenKeyboardShown                   uintptr
	_addr_SDL_HasMouse                              uintptr
	_addr_SDL_GetMice                               uintptr
	_addr_SDL_GetMouseNameForID                     uintptr
	_addr_SDL_GetMouseFocus                         uintptr
	_addr_SDL_GetMouseState                         uintptr
	_addr_SDL_GetGlobalMouseState                   uintptr
	_addr_SDL_GetRelativeMouseState                 uintptr
	_addr_SDL_SetWindowRelativeMouseMode            uintptr
	_addr_SDL_GetWindowRelativeMouseMode            uintptr
	_addr_SDL_CaptureMouse                          uintptr
	_addr_SDL_CreateCursor                          uintptr
	_addr_SDL_CreateColorCursor                     uintptr
	_addr_SDL_CreateSystemCursor                    uintptr
	_addr_SDL_SetCursor                             uintptr
	_addr_SDL_GetCursor                             uintptr
	_addr_SDL_GetDefaultCursor                      uintptr
	_addr_SDL_DestroyCursor                         uintptr
	_addr_SDL_ShowCursor                            uintptr
	_addr_SDL_HideCursor                            uintptr
	_addr_SDL_CursorVisible                         uintptr
	_addr_SDL_GetTouchDevices                       uintptr
	_addr_SDL_GetTouchDeviceName                    uintptr
	_addr_SDL_GetTouchDeviceType                    uintptr
	_addr_SDL_GetTouchFingers                       uintptr
	_addr_SDL_PumpEvents                            uintptr
	_addr_SDL_PeepEvents                            uintptr
	_addr_SDL_HasEvent                              uintptr
	_addr_SDL_HasEvents                             uintptr
	_addr_SDL_FlushEvent                            uintptr
	_addr_SDL_FlushEvents                           uintptr
	_addr_SDL_PollEvent                             uintptr
	_addr_SDL_WaitEvent                             uintptr
	_addr_SDL_WaitEventTimeout                      uintptr
	_addr_SDL_PushEvent                             uintptr
	_addr_SDL_SetEventFilter                        uintptr
	_addr_SDL_GetEventFilter                        uintptr
	_addr_SDL_AddEventWatch                         uintptr
	_addr_SDL_RemoveEventWatch                      uintptr
	_addr_SDL_FilterEvents                          uintptr
	_addr_SDL_SetEventEnabled                       uintptr
	_addr_SDL_EventEnabled                          uintptr
	_addr_SDL_RegisterEvents                        uintptr
	_addr_SDL_GetWindowFromEvent                    uintptr
	_addr_SDL_GetBasePath                           uintptr
	_addr_SDL_GetPrefPath                           uintptr
	_addr_SDL_GetUserFolder                         uintptr
	_addr_SDL_CreateDirectory                       uintptr
	_addr_SDL_EnumerateDirectory                    uintptr
	_addr_SDL_RemovePath                            uintptr
	_addr_SDL_RenamePath                            uintptr
	_addr_SDL_CopyFile                              uintptr
	_addr_SDL_GetPathInfo                           uintptr
	_addr_SDL_GlobDirectory                         uintptr
	_addr_SDL_GetCurrentDirectory                   uintptr
	_addr_SDL_GPUSupportsShaderFormats              uintptr
	_addr_SDL_GPUSupportsProperties                 uintptr
	_addr_SDL_CreateGPUDevice                       uintptr
	_addr_SDL_CreateGPUDeviceWithProperties         uintptr
	_addr_SDL_DestroyGPUDevice                      uintptr
	_addr_SDL_GetNumGPUDrivers                      uintptr
	_addr_SDL_GetGPUDriver                          uintptr
	_addr_SDL_GetGPUDeviceDriver                    uintptr
	_addr_SDL_GetGPUShaderFormats                   uintptr
	_addr_SDL_CreateGPUGraphicsPipeline             uintptr
	_addr_SDL_CreateGPUSampler                      uintptr
	_addr_SDL_CreateGPUTexture                      uintptr
	_addr_SDL_CreateGPUBuffer                       uintptr
	_addr_SDL_CreateGPUTransferBuffer               uintptr
	_addr_SDL_SetGPUBufferName                      uintptr
	_addr_SDL_SetGPUTextureName                     uintptr
	_addr_SDL_InsertGPUDebugLabel                   uintptr
	_addr_SDL_PushGPUDebugGroup                     uintptr
	_addr_SDL_PopGPUDebugGroup                      uintptr
	_addr_SDL_ReleaseGPUTexture                     uintptr
	_addr_SDL_ReleaseGPUSampler                     uintptr
	_addr_SDL_ReleaseGPUBuffer                      uintptr
	_addr_SDL_ReleaseGPUTransferBuffer              uintptr
	_addr_SDL_ReleaseGPUComputePipeline             uintptr
	_addr_SDL_ReleaseGPUShader                      uintptr
	_addr_SDL_ReleaseGPUGraphicsPipeline            uintptr
	_addr_SDL_AcquireGPUCommandBuffer               uintptr
	_addr_SDL_PushGPUVertexUniformData              uintptr
	_addr_SDL_PushGPUFragmentUniformData            uintptr
	_addr_SDL_PushGPUComputeUniformData             uintptr
	_addr_SDL_BeginGPURenderPass                    uintptr
	_addr_SDL_BindGPUGraphicsPipeline               uintptr
	_addr_SDL_SetGPUViewport                        uintptr
	_addr_SDL_SetGPUScissor                         uintptr
	_addr_SDL_SetGPUStencilReference                uintptr
	_addr_SDL_BindGPUVertexBuffers                  uintptr
	_addr_SDL_BindGPUIndexBuffer                    uintptr
	_addr_SDL_BindGPUVertexSamplers                 uintptr
	_addr_SDL_BindGPUVertexStorageTextures          uintptr
	_addr_SDL_BindGPUVertexStorageBuffers           uintptr
	_addr_SDL_BindGPUFragmentSamplers               uintptr
	_addr_SDL_BindGPUFragmentStorageTextures        uintptr
	_addr_SDL_BindGPUFragmentStorageBuffers         uintptr
	_addr_SDL_DrawGPUIndexedPrimitives              uintptr
	_addr_SDL_DrawGPUPrimitives                     uintptr
	_addr_SDL_DrawGPUPrimitivesIndirect             uintptr
	_addr_SDL_DrawGPUIndexedPrimitivesIndirect      uintptr
	_addr_SDL_EndGPURenderPass                      uintptr
	_addr_SDL_BeginGPUComputePass                   uintptr
	_addr_SDL_BindGPUComputePipeline                uintptr
	_addr_SDL_BindGPUComputeSamplers                uintptr
	_addr_SDL_BindGPUComputeStorageTextures         uintptr
	_addr_SDL_BindGPUComputeStorageBuffers          uintptr
	_addr_SDL_DispatchGPUCompute                    uintptr
	_addr_SDL_DispatchGPUComputeIndirect            uintptr
	_addr_SDL_EndGPUComputePass                     uintptr
	_addr_SDL_MapGPUTransferBuffer                  uintptr
	_addr_SDL_UnmapGPUTransferBuffer                uintptr
	_addr_SDL_BeginGPUCopyPass                      uintptr
	_addr_SDL_UploadToGPUTexture                    uintptr
	_addr_SDL_UploadToGPUBuffer                     uintptr
	_addr_SDL_CopyGPUTextureToTexture               uintptr
	_addr_SDL_CopyGPUBufferToBuffer                 uintptr
	_addr_SDL_DownloadFromGPUTexture                uintptr
	_addr_SDL_DownloadFromGPUBuffer                 uintptr
	_addr_SDL_EndGPUCopyPass                        uintptr
	_addr_SDL_GenerateMipmapsForGPUTexture          uintptr
	_addr_SDL_BlitGPUTexture                        uintptr
	_addr_SDL_WindowSupportsGPUSwapchainComposition uintptr
	_addr_SDL_WindowSupportsGPUPresentMode          uintptr
	_addr_SDL_ClaimWindowForGPUDevice               uintptr
	_addr_SDL_ReleaseWindowFromGPUDevice            uintptr
	_addr_SDL_SetGPUSwapchainParameters             uintptr
	_addr_SDL_SetGPUAllowedFramesInFlight           uintptr
	_addr_SDL_GetGPUSwapchainTextureFormat          uintptr
	_addr_SDL_AcquireGPUSwapchainTexture            uintptr
	_addr_SDL_WaitForGPUSwapchain                   uintptr
	_addr_SDL_WaitAndAcquireGPUSwapchainTexture     uintptr
	_addr_SDL_SubmitGPUCommandBuffer                uintptr
	_addr_SDL_SubmitGPUCommandBufferAndAcquireFence uintptr
	_addr_SDL_CancelGPUCommandBuffer                uintptr
	_addr_SDL_WaitForGPUIdle                        uintptr
	_addr_SDL_WaitForGPUFences                      uintptr
	_addr_SDL_QueryGPUFence                         uintptr
	_addr_SDL_ReleaseGPUFence                       uintptr
	_addr_SDL_GPUTextureFormatTexelBlockSize        uintptr
	_addr_SDL_GPUTextureSupportsFormat              uintptr
	_addr_SDL_GPUTextureSupportsSampleCount         uintptr
	_addr_SDL_CalculateGPUTextureFormatSize         uintptr
	_addr_SDL_GetHaptics                            uintptr
	_addr_SDL_GetHapticNameForID                    uintptr
	_addr_SDL_OpenHaptic                            uintptr
	_addr_SDL_GetHapticFromID                       uintptr
	_addr_SDL_GetHapticID                           uintptr
	_addr_SDL_GetHapticName                         uintptr
	_addr_SDL_IsMouseHaptic                         uintptr
	_addr_SDL_OpenHapticFromMouse                   uintptr
	_addr_SDL_IsJoystickHaptic                      uintptr
	_addr_SDL_OpenHapticFromJoystick                uintptr
	_addr_SDL_CloseHaptic                           uintptr
	_addr_SDL_GetMaxHapticEffects                   uintptr
	_addr_SDL_GetMaxHapticEffectsPlaying            uintptr
	_addr_SDL_GetHapticFeatures                     uintptr
	_addr_SDL_GetNumHapticAxes                      uintptr
	_addr_SDL_HapticEffectSupported                 uintptr
	_addr_SDL_CreateHapticEffect                    uintptr
	_addr_SDL_UpdateHapticEffect                    uintptr
	_addr_SDL_RunHapticEffect                       uintptr
	_addr_SDL_StopHapticEffect                      uintptr
	_addr_SDL_DestroyHapticEffect                   uintptr
	_addr_SDL_GetHapticEffectStatus                 uintptr
	_addr_SDL_SetHapticGain                         uintptr
	_addr_SDL_SetHapticAutocenter                   uintptr
	_addr_SDL_PauseHaptic                           uintptr
	_addr_SDL_ResumeHaptic                          uintptr
	_addr_SDL_StopHapticEffects                     uintptr
	_addr_SDL_HapticRumbleSupported                 uintptr
	_addr_SDL_InitHapticRumble                      uintptr
	_addr_SDL_StopHapticRumble                      uintptr
	_addr_SDL_SetHintWithPriority                   uintptr
	_addr_SDL_SetHint                               uintptr
	_addr_SDL_ResetHint                             uintptr
	_addr_SDL_ResetHints                            uintptr
	_addr_SDL_GetHint                               uintptr
	_addr_SDL_GetHintBoolean                        uintptr
	_addr_SDL_AddHintCallback                       uintptr
	_addr_SDL_RemoveHintCallback                    uintptr
	_addr_SDL_Init                                  uintptr
	_addr_SDL_InitSubSystem                         uintptr
	_addr_SDL_QuitSubSystem                         uintptr
	_addr_SDL_WasInit                               uintptr
	_addr_SDL_Quit                                  uintptr
	_addr_SDL_IsMainThread                          uintptr
	_addr_SDL_RunOnMainThread                       uintptr
	_addr_SDL_SetAppMetadata                        uintptr
	_addr_SDL_SetAppMetadataProperty                uintptr
	_addr_SDL_GetAppMetadataProperty                uintptr
	_addr_SDL_LoadObject                            uintptr
	_addr_SDL_LoadFunction                          uintptr
	_addr_SDL_UnloadObject                          uintptr
	_addr_SDL_GetPreferredLocales                   uintptr
	_addr_SDL_SetLogPriorities                      uintptr
	_addr_SDL_SetLogPriority                        uintptr
	_addr_SDL_GetLogPriority                        uintptr
	_addr_SDL_ResetLogPriorities                    uintptr
	_addr_SDL_SetLogPriorityPrefix                  uintptr
	_addr_SDL_Log                                   uintptr
	_addr_SDL_LogTrace                              uintptr
	_addr_SDL_LogVerbose                            uintptr
	_addr_SDL_LogDebug                              uintptr
	_addr_SDL_LogInfo                               uintptr
	_addr_SDL_LogWarn                               uintptr
	_addr_SDL_LogError                              uintptr
	_addr_SDL_LogCritical                           uintptr
	_addr_SDL_LogMessage                            uintptr
	_addr_SDL_LogMessageV                           uintptr
	_addr_SDL_GetDefaultLogOutputFunction           uintptr
	_addr_SDL_GetLogOutputFunction                  uintptr
	_addr_SDL_SetLogOutputFunction                  uintptr
	_addr_SDL_ShowSimpleMessageBox                  uintptr
	_addr_SDL_Metal_CreateView                      uintptr
	_addr_SDL_Metal_DestroyView                     uintptr
	_addr_SDL_Metal_GetLayer                        uintptr
	_addr_SDL_OpenURL                               uintptr
	_addr_SDL_CreateProcess                         uintptr
	_addr_SDL_CreateProcessWithProperties           uintptr
	_addr_SDL_GetProcessProperties                  uintptr
	_addr_SDL_ReadProcess                           uintptr
	_addr_SDL_GetProcessInput                       uintptr
	_addr_SDL_GetProcessOutput                      uintptr
	_addr_SDL_KillProcess                           uintptr
	_addr_SDL_WaitProcess                           uintptr
	_addr_SDL_DestroyProcess                        uintptr
	_addr_SDL_GetNumRenderDrivers                   uintptr
	_addr_SDL_GetRenderDriver                       uintptr
	_addr_SDL_CreateWindowAndRenderer               uintptr
	_addr_SDL_CreateRenderer                        uintptr
	_addr_SDL_CreateRendererWithProperties          uintptr
	_addr_SDL_CreateSoftwareRenderer                uintptr
	_addr_SDL_GetRenderer                           uintptr
	_addr_SDL_GetRenderWindow                       uintptr
	_addr_SDL_GetRendererName                       uintptr
	_addr_SDL_GetRendererProperties                 uintptr
	_addr_SDL_GetRenderOutputSize                   uintptr
	_addr_SDL_GetCurrentRenderOutputSize            uintptr
	_addr_SDL_CreateTexture                         uintptr
	_addr_SDL_CreateTextureFromSurface              uintptr
	_addr_SDL_CreateTextureWithProperties           uintptr
	_addr_SDL_GetTextureProperties                  uintptr
	_addr_SDL_GetRendererFromTexture                uintptr
	_addr_SDL_GetTextureSize                        uintptr
	_addr_SDL_SetTextureColorMod                    uintptr
	_addr_SDL_GetTextureColorMod                    uintptr
	_addr_SDL_GetTextureColorModFloat               uintptr
	_addr_SDL_SetTextureAlphaMod                    uintptr
	_addr_SDL_GetTextureAlphaMod                    uintptr
	_addr_SDL_GetTextureAlphaModFloat               uintptr
	_addr_SDL_SetTextureBlendMode                   uintptr
	_addr_SDL_GetTextureBlendMode                   uintptr
	_addr_SDL_SetTextureScaleMode                   uintptr
	_addr_SDL_GetTextureScaleMode                   uintptr
	_addr_SDL_UpdateTexture                         uintptr
	_addr_SDL_UpdateYUVTexture                      uintptr
	_addr_SDL_UpdateNVTexture                       uintptr
	_addr_SDL_LockTexture                           uintptr
	_addr_SDL_LockTextureToSurface                  uintptr
	_addr_SDL_UnlockTexture                         uintptr
	_addr_SDL_SetRenderTarget                       uintptr
	_addr_SDL_GetRenderTarget                       uintptr
	_addr_SDL_SetRenderLogicalPresentation          uintptr
	_addr_SDL_GetRenderLogicalPresentation          uintptr
	_addr_SDL_GetRenderLogicalPresentationRect      uintptr
	_addr_SDL_ConvertEventToRenderCoordinates       uintptr
	_addr_SDL_SetRenderViewport                     uintptr
	_addr_SDL_GetRenderViewport                     uintptr
	_addr_SDL_RenderViewportSet                     uintptr
	_addr_SDL_GetRenderSafeArea                     uintptr
	_addr_SDL_SetRenderClipRect                     uintptr
	_addr_SDL_GetRenderClipRect                     uintptr
	_addr_SDL_RenderClipEnabled                     uintptr
	_addr_SDL_GetRenderScale                        uintptr
	_addr_SDL_SetRenderDrawColor                    uintptr
	_addr_SDL_GetRenderDrawColor                    uintptr
	_addr_SDL_GetRenderDrawColorFloat               uintptr
	_addr_SDL_GetRenderColorScale                   uintptr
	_addr_SDL_SetRenderDrawBlendMode                uintptr
	_addr_SDL_GetRenderDrawBlendMode                uintptr
	_addr_SDL_RenderClear                           uintptr
	_addr_SDL_RenderPoints                          uintptr
	_addr_SDL_RenderLines                           uintptr
	_addr_SDL_RenderRect                            uintptr
	_addr_SDL_RenderRects                           uintptr
	_addr_SDL_RenderFillRect                        uintptr
	_addr_SDL_RenderFillRects                       uintptr
	_addr_SDL_RenderTexture                         uintptr
	_addr_SDL_RenderTextureAffine                   uintptr
	_addr_SDL_RenderGeometry                        uintptr
	_addr_SDL_RenderGeometryRaw                     uintptr
	_addr_SDL_RenderReadPixels                      uintptr
	_addr_SDL_RenderPresent                         uintptr
	_addr_SDL_DestroyTexture                        uintptr
	_addr_SDL_DestroyRenderer                       uintptr
	_addr_SDL_FlushRenderer                         uintptr
	_addr_SDL_GetRenderMetalLayer                   uintptr
	_addr_SDL_GetRenderMetalCommandEncoder          uintptr
	_addr_SDL_AddVulkanRenderSemaphores             uintptr
	_addr_SDL_SetRenderVSync                        uintptr
	_addr_SDL_GetRenderVSync                        uintptr
	_addr_SDL_OpenTitleStorage                      uintptr
	_addr_SDL_OpenUserStorage                       uintptr
	_addr_SDL_OpenFileStorage                       uintptr
	_addr_SDL_OpenStorage                           uintptr
	_addr_SDL_CloseStorage                          uintptr
	_addr_SDL_StorageReady                          uintptr
	_addr_SDL_GetStorageFileSize                    uintptr
	_addr_SDL_ReadStorageFile                       uintptr
	_addr_SDL_WriteStorageFile                      uintptr
	_addr_SDL_CreateStorageDirectory                uintptr
	_addr_SDL_EnumerateStorageDirectory             uintptr
	_addr_SDL_RemoveStoragePath                     uintptr
	_addr_SDL_RenameStoragePath                     uintptr
	_addr_SDL_CopyStorageFile                       uintptr
	_addr_SDL_GetStoragePathInfo                    uintptr
	_addr_SDL_GetStorageSpaceRemaining              uintptr
	_addr_SDL_GlobStorageDirectory                  uintptr
	_addr_SDL_SetX11EventHook                       uintptr
	_addr_SDL_IsTablet                              uintptr
	_addr_SDL_IsTV                                  uintptr
	_addr_SDL_GetSandbox                            uintptr
	_addr_SDL_OnApplicationWillTerminate            uintptr
	_addr_SDL_OnApplicationDidReceiveMemoryWarning  uintptr
	_addr_SDL_OnApplicationWillEnterBackground      uintptr
	_addr_SDL_OnApplicationDidEnterBackground       uintptr
	_addr_SDL_OnApplicationWillEnterForeground      uintptr
	_addr_SDL_OnApplicationDidEnterForeground       uintptr
	_addr_SDL_GetDateTimeLocalePreferences          uintptr
	_addr_SDL_GetCurrentTime                        uintptr
	_addr_SDL_TimeToDateTime                        uintptr
	_addr_SDL_DateTimeToTime                        uintptr
	_addr_SDL_TimeToWindows                         uintptr
	_addr_SDL_TimeFromWindows                       uintptr
	_addr_SDL_GetDaysInMonth                        uintptr
	_addr_SDL_GetDayOfYear                          uintptr
	_addr_SDL_GetDayOfWeek                          uintptr
	_addr_SDL_GetTicks                              uintptr
	_addr_SDL_GetTicksNS                            uintptr
	_addr_SDL_GetPerformanceCounter                 uintptr
	_addr_SDL_GetPerformanceFrequency               uintptr
	_addr_SDL_Delay                                 uintptr
	_addr_SDL_DelayNS                               uintptr
	_addr_SDL_DelayPrecise                          uintptr
	_addr_SDL_AddTimer                              uintptr
	_addr_SDL_AddTimerNS                            uintptr
	_addr_SDL_RemoveTimer                           uintptr
	_addr_SDL_CreateTray                            uintptr
	_addr_SDL_SetTrayIcon                           uintptr
	_addr_SDL_SetTrayTooltip                        uintptr
	_addr_SDL_CreateTrayMenu                        uintptr
	_addr_SDL_CreateTraySubmenu                     uintptr
	_addr_SDL_GetTrayMenu                           uintptr
	_addr_SDL_GetTraySubmenu                        uintptr
	_addr_SDL_GetTrayEntries                        uintptr
	_addr_SDL_RemoveTrayEntry                       uintptr
	_addr_SDL_InsertTrayEntryAt                     uintptr
	_addr_SDL_SetTrayEntryLabel                     uintptr
	_addr_SDL_GetTrayEntryLabel                     uintptr
	_addr_SDL_SetTrayEntryChecked                   uintptr
	_addr_SDL_GetTrayEntryChecked                   uintptr
	_addr_SDL_SetTrayEntryEnabled                   uintptr
	_addr_SDL_GetTrayEntryEnabled                   uintptr
	_addr_SDL_ClickTrayEntry                        uintptr
	_addr_SDL_DestroyTray                           uintptr
	_addr_SDL_GetTrayEntryParent                    uintptr
	_addr_SDL_GetTrayMenuParentEntry                uintptr
	_addr_SDL_GetTrayMenuParentTray                 uintptr
	_addr_SDL_UpdateTrays                           uintptr
	_addr_SDL_SetMainReady                          uintptr
	_addr_SDL_RunApp                                uintptr
	_addr_SDL_EnterAppMainCallbacks                 uintptr
	_addr_SDL_GDKSuspendComplete                    uintptr
)

func initialize() {
	var err error

	// Symbols sdl
	_addr_SDL_free, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_free")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_free")
	}
	_addr_SDL_AsyncIOFromFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AsyncIOFromFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AsyncIOFromFile")
	}
	_addr_SDL_GetAsyncIOSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAsyncIOSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAsyncIOSize")
	}
	_addr_SDL_ReadAsyncIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadAsyncIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadAsyncIO")
	}
	_addr_SDL_WriteAsyncIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteAsyncIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteAsyncIO")
	}
	_addr_SDL_CloseAsyncIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseAsyncIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseAsyncIO")
	}
	_addr_SDL_CreateAsyncIOQueue, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateAsyncIOQueue")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateAsyncIOQueue")
	}
	_addr_SDL_DestroyAsyncIOQueue, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyAsyncIOQueue")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyAsyncIOQueue")
	}
	_addr_SDL_GetAsyncIOResult, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAsyncIOResult")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAsyncIOResult")
	}
	_addr_SDL_WaitAsyncIOResult, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitAsyncIOResult")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitAsyncIOResult")
	}
	_addr_SDL_SignalAsyncIOQueue, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SignalAsyncIOQueue")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SignalAsyncIOQueue")
	}
	_addr_SDL_LoadFileAsync, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadFileAsync")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadFileAsync")
	}
	_addr_SDL_TryLockSpinlock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TryLockSpinlock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TryLockSpinlock")
	}
	_addr_SDL_LockSpinlock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockSpinlock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockSpinlock")
	}
	_addr_SDL_UnlockSpinlock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockSpinlock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockSpinlock")
	}
	_addr_SDL_MemoryBarrierReleaseFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MemoryBarrierReleaseFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MemoryBarrierReleaseFunction")
	}
	_addr_SDL_MemoryBarrierAcquireFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MemoryBarrierAcquireFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MemoryBarrierAcquireFunction")
	}
	_addr_SDL_CompareAndSwapAtomicInt, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CompareAndSwapAtomicInt")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CompareAndSwapAtomicInt")
	}
	_addr_SDL_SetAtomicInt, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAtomicInt")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAtomicInt")
	}
	_addr_SDL_GetAtomicInt, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAtomicInt")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAtomicInt")
	}
	_addr_SDL_AddAtomicInt, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddAtomicInt")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddAtomicInt")
	}
	_addr_SDL_CompareAndSwapAtomicU32, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CompareAndSwapAtomicU32")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CompareAndSwapAtomicU32")
	}
	_addr_SDL_SetAtomicU32, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAtomicU32")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAtomicU32")
	}
	_addr_SDL_GetAtomicU32, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAtomicU32")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAtomicU32")
	}
	_addr_SDL_CompareAndSwapAtomicPointer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CompareAndSwapAtomicPointer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CompareAndSwapAtomicPointer")
	}
	_addr_SDL_SetAtomicPointer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAtomicPointer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAtomicPointer")
	}
	_addr_SDL_GetAtomicPointer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAtomicPointer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAtomicPointer")
	}
	_addr_SDL_SetError, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetError")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetError")
	}
	_addr_SDL_SetErrorV, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetErrorV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetErrorV")
	}
	_addr_SDL_OutOfMemory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OutOfMemory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OutOfMemory")
	}
	_addr_SDL_GetError, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetError")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetError")
	}
	_addr_SDL_ClearError, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClearError")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClearError")
	}
	_addr_SDL_GetGlobalProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGlobalProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGlobalProperties")
	}
	_addr_SDL_CreateProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateProperties")
	}
	_addr_SDL_CopyProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CopyProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CopyProperties")
	}
	_addr_SDL_LockProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockProperties")
	}
	_addr_SDL_UnlockProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockProperties")
	}
	_addr_SDL_SetPointerPropertyWithCleanup, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetPointerPropertyWithCleanup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetPointerPropertyWithCleanup")
	}
	_addr_SDL_SetPointerProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetPointerProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetPointerProperty")
	}
	_addr_SDL_SetStringProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetStringProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetStringProperty")
	}
	_addr_SDL_SetNumberProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetNumberProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetNumberProperty")
	}
	_addr_SDL_SetBooleanProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetBooleanProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetBooleanProperty")
	}
	_addr_SDL_HasProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasProperty")
	}
	_addr_SDL_GetPropertyType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPropertyType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPropertyType")
	}
	_addr_SDL_GetPointerProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPointerProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPointerProperty")
	}
	_addr_SDL_GetStringProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetStringProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetStringProperty")
	}
	_addr_SDL_GetNumberProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumberProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumberProperty")
	}
	_addr_SDL_GetBooleanProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetBooleanProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetBooleanProperty")
	}
	_addr_SDL_ClearProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClearProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClearProperty")
	}
	_addr_SDL_EnumerateProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EnumerateProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EnumerateProperties")
	}
	_addr_SDL_DestroyProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyProperties")
	}
	_addr_SDL_GetThreadName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetThreadName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetThreadName")
	}
	_addr_SDL_GetCurrentThreadID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentThreadID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentThreadID")
	}
	_addr_SDL_GetThreadID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetThreadID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetThreadID")
	}
	_addr_SDL_SetCurrentThreadPriority, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetCurrentThreadPriority")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetCurrentThreadPriority")
	}
	_addr_SDL_WaitThread, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitThread")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitThread")
	}
	_addr_SDL_GetThreadState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetThreadState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetThreadState")
	}
	_addr_SDL_DetachThread, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DetachThread")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DetachThread")
	}
	_addr_SDL_GetTLS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTLS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTLS")
	}
	_addr_SDL_SetTLS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTLS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTLS")
	}
	_addr_SDL_CleanupTLS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CleanupTLS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CleanupTLS")
	}
	_addr_SDL_CreateMutex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateMutex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateMutex")
	}
	_addr_SDL_LockMutex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockMutex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockMutex")
	}
	_addr_SDL_TryLockMutex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TryLockMutex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TryLockMutex")
	}
	_addr_SDL_UnlockMutex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockMutex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockMutex")
	}
	_addr_SDL_DestroyMutex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyMutex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyMutex")
	}
	_addr_SDL_CreateRWLock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateRWLock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateRWLock")
	}
	_addr_SDL_LockRWLockForReading, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockRWLockForReading")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockRWLockForReading")
	}
	_addr_SDL_LockRWLockForWriting, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockRWLockForWriting")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockRWLockForWriting")
	}
	_addr_SDL_TryLockRWLockForReading, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TryLockRWLockForReading")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TryLockRWLockForReading")
	}
	_addr_SDL_TryLockRWLockForWriting, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TryLockRWLockForWriting")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TryLockRWLockForWriting")
	}
	_addr_SDL_UnlockRWLock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockRWLock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockRWLock")
	}
	_addr_SDL_DestroyRWLock, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyRWLock")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyRWLock")
	}
	_addr_SDL_CreateSemaphore, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSemaphore")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSemaphore")
	}
	_addr_SDL_DestroySemaphore, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroySemaphore")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroySemaphore")
	}
	_addr_SDL_WaitSemaphore, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitSemaphore")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitSemaphore")
	}
	_addr_SDL_TryWaitSemaphore, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TryWaitSemaphore")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TryWaitSemaphore")
	}
	_addr_SDL_WaitSemaphoreTimeout, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitSemaphoreTimeout")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitSemaphoreTimeout")
	}
	_addr_SDL_SignalSemaphore, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SignalSemaphore")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SignalSemaphore")
	}
	_addr_SDL_GetSemaphoreValue, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSemaphoreValue")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSemaphoreValue")
	}
	_addr_SDL_CreateCondition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateCondition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateCondition")
	}
	_addr_SDL_DestroyCondition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyCondition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyCondition")
	}
	_addr_SDL_SignalCondition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SignalCondition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SignalCondition")
	}
	_addr_SDL_BroadcastCondition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BroadcastCondition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BroadcastCondition")
	}
	_addr_SDL_WaitCondition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitCondition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitCondition")
	}
	_addr_SDL_WaitConditionTimeout, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitConditionTimeout")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitConditionTimeout")
	}
	_addr_SDL_ShouldInit, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShouldInit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShouldInit")
	}
	_addr_SDL_ShouldQuit, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShouldQuit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShouldQuit")
	}
	_addr_SDL_SetInitialized, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetInitialized")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetInitialized")
	}
	_addr_SDL_IOFromFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOFromFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOFromFile")
	}
	_addr_SDL_IOFromMem, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOFromMem")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOFromMem")
	}
	_addr_SDL_IOFromConstMem, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOFromConstMem")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOFromConstMem")
	}
	_addr_SDL_IOFromDynamicMem, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOFromDynamicMem")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOFromDynamicMem")
	}
	_addr_SDL_OpenIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenIO")
	}
	_addr_SDL_CloseIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseIO")
	}
	_addr_SDL_GetIOProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetIOProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetIOProperties")
	}
	_addr_SDL_GetIOStatus, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetIOStatus")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetIOStatus")
	}
	_addr_SDL_GetIOSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetIOSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetIOSize")
	}
	_addr_SDL_SeekIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SeekIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SeekIO")
	}
	_addr_SDL_TellIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TellIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TellIO")
	}
	_addr_SDL_ReadIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadIO")
	}
	_addr_SDL_WriteIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteIO")
	}
	_addr_SDL_IOprintf, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOprintf")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOprintf")
	}
	_addr_SDL_IOvprintf, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IOvprintf")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IOvprintf")
	}
	_addr_SDL_FlushIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlushIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlushIO")
	}
	_addr_SDL_LoadFile_IO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadFile_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadFile_IO")
	}
	_addr_SDL_LoadFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadFile")
	}
	_addr_SDL_SaveFile_IO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SaveFile_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SaveFile_IO")
	}
	_addr_SDL_SaveFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SaveFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SaveFile")
	}
	_addr_SDL_ReadU8, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU8")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU8")
	}
	_addr_SDL_ReadS8, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS8")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS8")
	}
	_addr_SDL_ReadU16LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU16LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU16LE")
	}
	_addr_SDL_ReadS16LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS16LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS16LE")
	}
	_addr_SDL_ReadU16BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU16BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU16BE")
	}
	_addr_SDL_ReadS16BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS16BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS16BE")
	}
	_addr_SDL_ReadU32LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU32LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU32LE")
	}
	_addr_SDL_ReadS32LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS32LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS32LE")
	}
	_addr_SDL_ReadU32BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU32BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU32BE")
	}
	_addr_SDL_ReadS32BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS32BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS32BE")
	}
	_addr_SDL_ReadU64LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU64LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU64LE")
	}
	_addr_SDL_ReadS64LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS64LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS64LE")
	}
	_addr_SDL_ReadU64BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadU64BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadU64BE")
	}
	_addr_SDL_ReadS64BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadS64BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadS64BE")
	}
	_addr_SDL_WriteU8, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU8")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU8")
	}
	_addr_SDL_WriteS8, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS8")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS8")
	}
	_addr_SDL_WriteU16LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU16LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU16LE")
	}
	_addr_SDL_WriteS16LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS16LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS16LE")
	}
	_addr_SDL_WriteU16BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU16BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU16BE")
	}
	_addr_SDL_WriteS16BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS16BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS16BE")
	}
	_addr_SDL_WriteU32LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU32LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU32LE")
	}
	_addr_SDL_WriteS32LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS32LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS32LE")
	}
	_addr_SDL_WriteU32BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU32BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU32BE")
	}
	_addr_SDL_WriteS32BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS32BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS32BE")
	}
	_addr_SDL_WriteU64LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU64LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU64LE")
	}
	_addr_SDL_WriteS64LE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS64LE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS64LE")
	}
	_addr_SDL_WriteU64BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteU64BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteU64BE")
	}
	_addr_SDL_WriteS64BE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteS64BE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteS64BE")
	}
	_addr_SDL_GetNumAudioDrivers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumAudioDrivers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumAudioDrivers")
	}
	_addr_SDL_GetAudioDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioDriver")
	}
	_addr_SDL_GetCurrentAudioDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentAudioDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentAudioDriver")
	}
	_addr_SDL_GetAudioPlaybackDevices, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioPlaybackDevices")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioPlaybackDevices")
	}
	_addr_SDL_GetAudioRecordingDevices, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioRecordingDevices")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioRecordingDevices")
	}
	_addr_SDL_GetAudioDeviceName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioDeviceName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioDeviceName")
	}
	_addr_SDL_GetAudioDeviceFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioDeviceFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioDeviceFormat")
	}
	_addr_SDL_GetAudioDeviceChannelMap, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioDeviceChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioDeviceChannelMap")
	}
	_addr_SDL_OpenAudioDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenAudioDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenAudioDevice")
	}
	_addr_SDL_IsAudioDevicePhysical, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsAudioDevicePhysical")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsAudioDevicePhysical")
	}
	_addr_SDL_IsAudioDevicePlayback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsAudioDevicePlayback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsAudioDevicePlayback")
	}
	_addr_SDL_PauseAudioDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PauseAudioDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PauseAudioDevice")
	}
	_addr_SDL_ResumeAudioDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResumeAudioDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResumeAudioDevice")
	}
	_addr_SDL_AudioDevicePaused, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AudioDevicePaused")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AudioDevicePaused")
	}
	_addr_SDL_CloseAudioDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseAudioDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseAudioDevice")
	}
	_addr_SDL_BindAudioStreams, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindAudioStreams")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindAudioStreams")
	}
	_addr_SDL_BindAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindAudioStream")
	}
	_addr_SDL_UnbindAudioStreams, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnbindAudioStreams")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnbindAudioStreams")
	}
	_addr_SDL_UnbindAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnbindAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnbindAudioStream")
	}
	_addr_SDL_GetAudioStreamDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamDevice")
	}
	_addr_SDL_CreateAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateAudioStream")
	}
	_addr_SDL_GetAudioStreamProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamProperties")
	}
	_addr_SDL_GetAudioStreamFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamFormat")
	}
	_addr_SDL_SetAudioStreamFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioStreamFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioStreamFormat")
	}
	_addr_SDL_GetAudioStreamInputChannelMap, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamInputChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamInputChannelMap")
	}
	_addr_SDL_GetAudioStreamOutputChannelMap, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamOutputChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamOutputChannelMap")
	}
	_addr_SDL_SetAudioStreamInputChannelMap, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioStreamInputChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioStreamInputChannelMap")
	}
	_addr_SDL_SetAudioStreamOutputChannelMap, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioStreamOutputChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioStreamOutputChannelMap")
	}
	_addr_SDL_PutAudioStreamData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PutAudioStreamData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PutAudioStreamData")
	}
	_addr_SDL_GetAudioStreamData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamData")
	}
	_addr_SDL_GetAudioStreamAvailable, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamAvailable")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamAvailable")
	}
	_addr_SDL_GetAudioStreamQueued, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioStreamQueued")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioStreamQueued")
	}
	_addr_SDL_FlushAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlushAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlushAudioStream")
	}
	_addr_SDL_ClearAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClearAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClearAudioStream")
	}
	_addr_SDL_PauseAudioStreamDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PauseAudioStreamDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PauseAudioStreamDevice")
	}
	_addr_SDL_ResumeAudioStreamDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResumeAudioStreamDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResumeAudioStreamDevice")
	}
	_addr_SDL_AudioStreamDevicePaused, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AudioStreamDevicePaused")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AudioStreamDevicePaused")
	}
	_addr_SDL_LockAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockAudioStream")
	}
	_addr_SDL_UnlockAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockAudioStream")
	}
	_addr_SDL_SetAudioStreamGetCallback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioStreamGetCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioStreamGetCallback")
	}
	_addr_SDL_SetAudioStreamPutCallback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioStreamPutCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioStreamPutCallback")
	}
	_addr_SDL_DestroyAudioStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyAudioStream")
	}
	_addr_SDL_OpenAudioDeviceStream, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenAudioDeviceStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenAudioDeviceStream")
	}
	_addr_SDL_SetAudioPostmixCallback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAudioPostmixCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAudioPostmixCallback")
	}
	_addr_SDL_LoadWAV_IO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadWAV_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadWAV_IO")
	}
	_addr_SDL_LoadWAV, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadWAV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadWAV")
	}
	_addr_SDL_ConvertAudioSamples, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertAudioSamples")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertAudioSamples")
	}
	_addr_SDL_GetAudioFormatName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAudioFormatName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAudioFormatName")
	}
	_addr_SDL_GetSilenceValueForFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSilenceValueForFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSilenceValueForFormat")
	}
	_addr_SDL_ComposeCustomBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ComposeCustomBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ComposeCustomBlendMode")
	}
	_addr_SDL_GetPixelFormatName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPixelFormatName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPixelFormatName")
	}
	_addr_SDL_GetMasksForPixelFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMasksForPixelFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMasksForPixelFormat")
	}
	_addr_SDL_GetPixelFormatForMasks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPixelFormatForMasks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPixelFormatForMasks")
	}
	_addr_SDL_GetPixelFormatDetails, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPixelFormatDetails")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPixelFormatDetails")
	}
	_addr_SDL_CreatePalette, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreatePalette")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreatePalette")
	}
	_addr_SDL_SetPaletteColors, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetPaletteColors")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetPaletteColors")
	}
	_addr_SDL_DestroyPalette, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyPalette")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyPalette")
	}
	_addr_SDL_MapRGB, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MapRGB")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MapRGB")
	}
	_addr_SDL_MapRGBA, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MapRGBA")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MapRGBA")
	}
	_addr_SDL_GetRGB, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRGB")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRGB")
	}
	_addr_SDL_GetRGBA, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRGBA")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRGBA")
	}
	_addr_SDL_HasRectIntersection, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasRectIntersection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasRectIntersection")
	}
	_addr_SDL_GetRectIntersection, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectIntersection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectIntersection")
	}
	_addr_SDL_GetRectUnion, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectUnion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectUnion")
	}
	_addr_SDL_GetRectEnclosingPoints, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectEnclosingPoints")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectEnclosingPoints")
	}
	_addr_SDL_GetRectAndLineIntersection, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectAndLineIntersection")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectAndLineIntersection")
	}
	_addr_SDL_HasRectIntersectionFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasRectIntersectionFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasRectIntersectionFloat")
	}
	_addr_SDL_GetRectIntersectionFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectIntersectionFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectIntersectionFloat")
	}
	_addr_SDL_GetRectUnionFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectUnionFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectUnionFloat")
	}
	_addr_SDL_GetRectEnclosingPointsFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectEnclosingPointsFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectEnclosingPointsFloat")
	}
	_addr_SDL_GetRectAndLineIntersectionFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRectAndLineIntersectionFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRectAndLineIntersectionFloat")
	}
	_addr_SDL_CreateSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSurface")
	}
	_addr_SDL_CreateSurfaceFrom, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSurfaceFrom")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSurfaceFrom")
	}
	_addr_SDL_DestroySurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroySurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroySurface")
	}
	_addr_SDL_GetSurfaceProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceProperties")
	}
	_addr_SDL_SetSurfaceColorspace, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceColorspace")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceColorspace")
	}
	_addr_SDL_GetSurfaceColorspace, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceColorspace")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceColorspace")
	}
	_addr_SDL_CreateSurfacePalette, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSurfacePalette")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSurfacePalette")
	}
	_addr_SDL_SetSurfacePalette, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfacePalette")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfacePalette")
	}
	_addr_SDL_GetSurfacePalette, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfacePalette")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfacePalette")
	}
	_addr_SDL_AddSurfaceAlternateImage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddSurfaceAlternateImage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddSurfaceAlternateImage")
	}
	_addr_SDL_SurfaceHasAlternateImages, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SurfaceHasAlternateImages")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SurfaceHasAlternateImages")
	}
	_addr_SDL_GetSurfaceImages, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceImages")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceImages")
	}
	_addr_SDL_RemoveSurfaceAlternateImages, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveSurfaceAlternateImages")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveSurfaceAlternateImages")
	}
	_addr_SDL_LockSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockSurface")
	}
	_addr_SDL_UnlockSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockSurface")
	}
	_addr_SDL_LoadBMP_IO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadBMP_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadBMP_IO")
	}
	_addr_SDL_LoadBMP, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadBMP")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadBMP")
	}
	_addr_SDL_SaveBMP_IO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SaveBMP_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SaveBMP_IO")
	}
	_addr_SDL_SaveBMP, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SaveBMP")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SaveBMP")
	}
	_addr_SDL_SetSurfaceRLE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceRLE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceRLE")
	}
	_addr_SDL_SurfaceHasRLE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SurfaceHasRLE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SurfaceHasRLE")
	}
	_addr_SDL_SetSurfaceColorKey, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceColorKey")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceColorKey")
	}
	_addr_SDL_SurfaceHasColorKey, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SurfaceHasColorKey")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SurfaceHasColorKey")
	}
	_addr_SDL_GetSurfaceColorKey, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceColorKey")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceColorKey")
	}
	_addr_SDL_SetSurfaceColorMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceColorMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceColorMod")
	}
	_addr_SDL_GetSurfaceColorMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceColorMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceColorMod")
	}
	_addr_SDL_SetSurfaceAlphaMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceAlphaMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceAlphaMod")
	}
	_addr_SDL_GetSurfaceAlphaMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceAlphaMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceAlphaMod")
	}
	_addr_SDL_SetSurfaceBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceBlendMode")
	}
	_addr_SDL_GetSurfaceBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceBlendMode")
	}
	_addr_SDL_SetSurfaceClipRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetSurfaceClipRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetSurfaceClipRect")
	}
	_addr_SDL_GetSurfaceClipRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSurfaceClipRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSurfaceClipRect")
	}
	_addr_SDL_FlipSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlipSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlipSurface")
	}
	_addr_SDL_DuplicateSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DuplicateSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DuplicateSurface")
	}
	_addr_SDL_ScaleSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ScaleSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ScaleSurface")
	}
	_addr_SDL_ConvertSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertSurface")
	}
	_addr_SDL_ConvertSurfaceAndColorspace, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertSurfaceAndColorspace")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertSurfaceAndColorspace")
	}
	_addr_SDL_ConvertPixels, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertPixels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertPixels")
	}
	_addr_SDL_ConvertPixelsAndColorspace, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertPixelsAndColorspace")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertPixelsAndColorspace")
	}
	_addr_SDL_PremultiplyAlpha, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PremultiplyAlpha")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PremultiplyAlpha")
	}
	_addr_SDL_PremultiplySurfaceAlpha, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PremultiplySurfaceAlpha")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PremultiplySurfaceAlpha")
	}
	_addr_SDL_FillSurfaceRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FillSurfaceRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FillSurfaceRect")
	}
	_addr_SDL_FillSurfaceRects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FillSurfaceRects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FillSurfaceRects")
	}
	_addr_SDL_BlitSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitSurface")
	}
	_addr_SDL_BlitSurfaceUnchecked, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitSurfaceUnchecked")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitSurfaceUnchecked")
	}
	_addr_SDL_BlitSurfaceScaled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitSurfaceScaled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitSurfaceScaled")
	}
	_addr_SDL_BlitSurfaceUncheckedScaled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitSurfaceUncheckedScaled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitSurfaceUncheckedScaled")
	}
	_addr_SDL_StretchSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StretchSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StretchSurface")
	}
	_addr_SDL_BlitSurfaceTiled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitSurfaceTiled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitSurfaceTiled")
	}
	_addr_SDL_MapSurfaceRGB, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MapSurfaceRGB")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MapSurfaceRGB")
	}
	_addr_SDL_MapSurfaceRGBA, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MapSurfaceRGBA")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MapSurfaceRGBA")
	}
	_addr_SDL_ReadSurfacePixel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadSurfacePixel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadSurfacePixel")
	}
	_addr_SDL_ReadSurfacePixelFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadSurfacePixelFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadSurfacePixelFloat")
	}
	_addr_SDL_WriteSurfacePixel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteSurfacePixel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteSurfacePixel")
	}
	_addr_SDL_GetNumCameraDrivers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumCameraDrivers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumCameraDrivers")
	}
	_addr_SDL_GetCameraDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraDriver")
	}
	_addr_SDL_GetCurrentCameraDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentCameraDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentCameraDriver")
	}
	_addr_SDL_GetCameras, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameras")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameras")
	}
	_addr_SDL_GetCameraSupportedFormats, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraSupportedFormats")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraSupportedFormats")
	}
	_addr_SDL_GetCameraName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraName")
	}
	_addr_SDL_GetCameraPosition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraPosition")
	}
	_addr_SDL_OpenCamera, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenCamera")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenCamera")
	}
	_addr_SDL_GetCameraPermissionState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraPermissionState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraPermissionState")
	}
	_addr_SDL_GetCameraID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraID")
	}
	_addr_SDL_GetCameraProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraProperties")
	}
	_addr_SDL_GetCameraFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCameraFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCameraFormat")
	}
	_addr_SDL_AcquireCameraFrame, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AcquireCameraFrame")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AcquireCameraFrame")
	}
	_addr_SDL_ReleaseCameraFrame, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseCameraFrame")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseCameraFrame")
	}
	_addr_SDL_CloseCamera, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseCamera")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseCamera")
	}
	_addr_SDL_SetClipboardText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetClipboardText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetClipboardText")
	}
	_addr_SDL_GetClipboardText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetClipboardText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetClipboardText")
	}
	_addr_SDL_HasClipboardText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasClipboardText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasClipboardText")
	}
	_addr_SDL_SetPrimarySelectionText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetPrimarySelectionText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetPrimarySelectionText")
	}
	_addr_SDL_GetPrimarySelectionText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPrimarySelectionText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPrimarySelectionText")
	}
	_addr_SDL_HasPrimarySelectionText, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasPrimarySelectionText")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasPrimarySelectionText")
	}
	_addr_SDL_SetClipboardData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetClipboardData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetClipboardData")
	}
	_addr_SDL_ClearClipboardData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClearClipboardData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClearClipboardData")
	}
	_addr_SDL_GetClipboardData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetClipboardData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetClipboardData")
	}
	_addr_SDL_HasClipboardData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasClipboardData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasClipboardData")
	}
	_addr_SDL_GetClipboardMimeTypes, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetClipboardMimeTypes")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetClipboardMimeTypes")
	}
	_addr_SDL_GetNumLogicalCPUCores, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumLogicalCPUCores")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumLogicalCPUCores")
	}
	_addr_SDL_GetCPUCacheLineSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCPUCacheLineSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCPUCacheLineSize")
	}
	_addr_SDL_HasAltiVec, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasAltiVec")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasAltiVec")
	}
	_addr_SDL_HasMMX, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasMMX")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasMMX")
	}
	_addr_SDL_HasSSE, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasSSE")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasSSE")
	}
	_addr_SDL_HasSSE2, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasSSE2")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasSSE2")
	}
	_addr_SDL_HasSSE3, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasSSE3")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasSSE3")
	}
	_addr_SDL_HasSSE41, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasSSE41")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasSSE41")
	}
	_addr_SDL_HasSSE42, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasSSE42")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasSSE42")
	}
	_addr_SDL_HasAVX, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasAVX")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasAVX")
	}
	_addr_SDL_HasAVX2, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasAVX2")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasAVX2")
	}
	_addr_SDL_HasAVX512F, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasAVX512F")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasAVX512F")
	}
	_addr_SDL_HasARMSIMD, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasARMSIMD")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasARMSIMD")
	}
	_addr_SDL_HasNEON, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasNEON")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasNEON")
	}
	_addr_SDL_HasLSX, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasLSX")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasLSX")
	}
	_addr_SDL_HasLASX, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasLASX")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasLASX")
	}
	_addr_SDL_GetSystemRAM, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSystemRAM")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSystemRAM")
	}
	_addr_SDL_GetSIMDAlignment, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSIMDAlignment")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSIMDAlignment")
	}
	_addr_SDL_GetNumVideoDrivers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumVideoDrivers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumVideoDrivers")
	}
	_addr_SDL_GetVideoDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetVideoDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetVideoDriver")
	}
	_addr_SDL_GetCurrentVideoDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentVideoDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentVideoDriver")
	}
	_addr_SDL_GetSystemTheme, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSystemTheme")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSystemTheme")
	}
	_addr_SDL_GetDisplays, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplays")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplays")
	}
	_addr_SDL_GetPrimaryDisplay, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPrimaryDisplay")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPrimaryDisplay")
	}
	_addr_SDL_GetDisplayProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayProperties")
	}
	_addr_SDL_GetDisplayName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayName")
	}
	_addr_SDL_GetDisplayBounds, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayBounds")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayBounds")
	}
	_addr_SDL_GetDisplayUsableBounds, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayUsableBounds")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayUsableBounds")
	}
	_addr_SDL_GetNaturalDisplayOrientation, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNaturalDisplayOrientation")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNaturalDisplayOrientation")
	}
	_addr_SDL_GetCurrentDisplayOrientation, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentDisplayOrientation")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentDisplayOrientation")
	}
	_addr_SDL_GetFullscreenDisplayModes, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetFullscreenDisplayModes")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetFullscreenDisplayModes")
	}
	_addr_SDL_GetDesktopDisplayMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDesktopDisplayMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDesktopDisplayMode")
	}
	_addr_SDL_GetCurrentDisplayMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentDisplayMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentDisplayMode")
	}
	_addr_SDL_GetDisplayForPoint, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayForPoint")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayForPoint")
	}
	_addr_SDL_GetDisplayForRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayForRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayForRect")
	}
	_addr_SDL_GetDisplayForWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDisplayForWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDisplayForWindow")
	}
	_addr_SDL_SetWindowFullscreenMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowFullscreenMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowFullscreenMode")
	}
	_addr_SDL_GetWindowFullscreenMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowFullscreenMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowFullscreenMode")
	}
	_addr_SDL_GetWindowICCProfile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowICCProfile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowICCProfile")
	}
	_addr_SDL_GetWindowPixelFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowPixelFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowPixelFormat")
	}
	_addr_SDL_GetWindows, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindows")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindows")
	}
	_addr_SDL_CreateWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateWindow")
	}
	_addr_SDL_CreatePopupWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreatePopupWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreatePopupWindow")
	}
	_addr_SDL_CreateWindowWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateWindowWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateWindowWithProperties")
	}
	_addr_SDL_GetWindowID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowID")
	}
	_addr_SDL_GetWindowFromID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowFromID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowFromID")
	}
	_addr_SDL_GetWindowParent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowParent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowParent")
	}
	_addr_SDL_GetWindowProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowProperties")
	}
	_addr_SDL_GetWindowFlags, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowFlags")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowFlags")
	}
	_addr_SDL_SetWindowTitle, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowTitle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowTitle")
	}
	_addr_SDL_GetWindowTitle, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowTitle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowTitle")
	}
	_addr_SDL_SetWindowIcon, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowIcon")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowIcon")
	}
	_addr_SDL_SetWindowPosition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowPosition")
	}
	_addr_SDL_GetWindowPosition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowPosition")
	}
	_addr_SDL_SetWindowSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowSize")
	}
	_addr_SDL_GetWindowSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowSize")
	}
	_addr_SDL_GetWindowSafeArea, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowSafeArea")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowSafeArea")
	}
	_addr_SDL_GetWindowAspectRatio, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowAspectRatio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowAspectRatio")
	}
	_addr_SDL_GetWindowBordersSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowBordersSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowBordersSize")
	}
	_addr_SDL_GetWindowSizeInPixels, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowSizeInPixels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowSizeInPixels")
	}
	_addr_SDL_SetWindowMinimumSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowMinimumSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowMinimumSize")
	}
	_addr_SDL_GetWindowMinimumSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowMinimumSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowMinimumSize")
	}
	_addr_SDL_SetWindowMaximumSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowMaximumSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowMaximumSize")
	}
	_addr_SDL_GetWindowMaximumSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowMaximumSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowMaximumSize")
	}
	_addr_SDL_SetWindowBordered, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowBordered")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowBordered")
	}
	_addr_SDL_SetWindowResizable, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowResizable")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowResizable")
	}
	_addr_SDL_SetWindowAlwaysOnTop, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowAlwaysOnTop")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowAlwaysOnTop")
	}
	_addr_SDL_ShowWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowWindow")
	}
	_addr_SDL_HideWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HideWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HideWindow")
	}
	_addr_SDL_RaiseWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RaiseWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RaiseWindow")
	}
	_addr_SDL_MaximizeWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MaximizeWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MaximizeWindow")
	}
	_addr_SDL_MinimizeWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MinimizeWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MinimizeWindow")
	}
	_addr_SDL_RestoreWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RestoreWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RestoreWindow")
	}
	_addr_SDL_SetWindowFullscreen, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowFullscreen")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowFullscreen")
	}
	_addr_SDL_SyncWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SyncWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SyncWindow")
	}
	_addr_SDL_WindowHasSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WindowHasSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WindowHasSurface")
	}
	_addr_SDL_GetWindowSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowSurface")
	}
	_addr_SDL_SetWindowSurfaceVSync, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowSurfaceVSync")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowSurfaceVSync")
	}
	_addr_SDL_GetWindowSurfaceVSync, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowSurfaceVSync")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowSurfaceVSync")
	}
	_addr_SDL_UpdateWindowSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateWindowSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateWindowSurface")
	}
	_addr_SDL_UpdateWindowSurfaceRects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateWindowSurfaceRects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateWindowSurfaceRects")
	}
	_addr_SDL_DestroyWindowSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyWindowSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyWindowSurface")
	}
	_addr_SDL_SetWindowKeyboardGrab, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowKeyboardGrab")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowKeyboardGrab")
	}
	_addr_SDL_SetWindowMouseGrab, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowMouseGrab")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowMouseGrab")
	}
	_addr_SDL_GetWindowKeyboardGrab, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowKeyboardGrab")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowKeyboardGrab")
	}
	_addr_SDL_GetWindowMouseGrab, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowMouseGrab")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowMouseGrab")
	}
	_addr_SDL_GetGrabbedWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGrabbedWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGrabbedWindow")
	}
	_addr_SDL_SetWindowMouseRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowMouseRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowMouseRect")
	}
	_addr_SDL_GetWindowMouseRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowMouseRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowMouseRect")
	}
	_addr_SDL_SetWindowParent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowParent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowParent")
	}
	_addr_SDL_SetWindowModal, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowModal")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowModal")
	}
	_addr_SDL_SetWindowFocusable, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowFocusable")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowFocusable")
	}
	_addr_SDL_ShowWindowSystemMenu, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowWindowSystemMenu")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowWindowSystemMenu")
	}
	_addr_SDL_SetWindowHitTest, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowHitTest")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowHitTest")
	}
	_addr_SDL_SetWindowShape, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowShape")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowShape")
	}
	_addr_SDL_FlashWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlashWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlashWindow")
	}
	_addr_SDL_DestroyWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyWindow")
	}
	_addr_SDL_ScreenSaverEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ScreenSaverEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ScreenSaverEnabled")
	}
	_addr_SDL_EnableScreenSaver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EnableScreenSaver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EnableScreenSaver")
	}
	_addr_SDL_DisableScreenSaver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DisableScreenSaver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DisableScreenSaver")
	}
	_addr_SDL_GL_LoadLibrary, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_LoadLibrary")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_LoadLibrary")
	}
	_addr_SDL_GL_GetProcAddress, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_GetProcAddress")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_GetProcAddress")
	}
	_addr_SDL_EGL_GetProcAddress, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EGL_GetProcAddress")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EGL_GetProcAddress")
	}
	_addr_SDL_GL_UnloadLibrary, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_UnloadLibrary")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_UnloadLibrary")
	}
	_addr_SDL_GL_ExtensionSupported, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_ExtensionSupported")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_ExtensionSupported")
	}
	_addr_SDL_GL_ResetAttributes, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_ResetAttributes")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_ResetAttributes")
	}
	_addr_SDL_GL_SetAttribute, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_SetAttribute")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_SetAttribute")
	}
	_addr_SDL_GL_GetAttribute, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_GetAttribute")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_GetAttribute")
	}
	_addr_SDL_GL_CreateContext, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_CreateContext")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_CreateContext")
	}
	_addr_SDL_GL_MakeCurrent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_MakeCurrent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_MakeCurrent")
	}
	_addr_SDL_GL_GetCurrentWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_GetCurrentWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_GetCurrentWindow")
	}
	_addr_SDL_GL_GetCurrentContext, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_GetCurrentContext")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_GetCurrentContext")
	}
	_addr_SDL_EGL_GetCurrentDisplay, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EGL_GetCurrentDisplay")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EGL_GetCurrentDisplay")
	}
	_addr_SDL_EGL_GetCurrentConfig, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EGL_GetCurrentConfig")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EGL_GetCurrentConfig")
	}
	_addr_SDL_EGL_GetWindowSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EGL_GetWindowSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EGL_GetWindowSurface")
	}
	_addr_SDL_EGL_SetAttributeCallbacks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EGL_SetAttributeCallbacks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EGL_SetAttributeCallbacks")
	}
	_addr_SDL_GL_SetSwapInterval, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_SetSwapInterval")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_SetSwapInterval")
	}
	_addr_SDL_GL_GetSwapInterval, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_GetSwapInterval")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_GetSwapInterval")
	}
	_addr_SDL_GL_SwapWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_SwapWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_SwapWindow")
	}
	_addr_SDL_GL_DestroyContext, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GL_DestroyContext")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GL_DestroyContext")
	}
	_addr_SDL_ShowOpenFileDialog, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowOpenFileDialog")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowOpenFileDialog")
	}
	_addr_SDL_ShowSaveFileDialog, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowSaveFileDialog")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowSaveFileDialog")
	}
	_addr_SDL_ShowOpenFolderDialog, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowOpenFolderDialog")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowOpenFolderDialog")
	}
	_addr_SDL_ShowFileDialogWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowFileDialogWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowFileDialogWithProperties")
	}
	_addr_SDL_GUIDToString, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GUIDToString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GUIDToString")
	}
	_addr_SDL_StringToGUID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StringToGUID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StringToGUID")
	}
	_addr_SDL_GetPowerInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPowerInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPowerInfo")
	}
	_addr_SDL_GetSensors, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensors")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensors")
	}
	_addr_SDL_GetSensorNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorNameForID")
	}
	_addr_SDL_GetSensorTypeForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorTypeForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorTypeForID")
	}
	_addr_SDL_GetSensorNonPortableTypeForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorNonPortableTypeForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorNonPortableTypeForID")
	}
	_addr_SDL_OpenSensor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenSensor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenSensor")
	}
	_addr_SDL_GetSensorFromID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorFromID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorFromID")
	}
	_addr_SDL_GetSensorProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorProperties")
	}
	_addr_SDL_GetSensorName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorName")
	}
	_addr_SDL_GetSensorType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorType")
	}
	_addr_SDL_GetSensorNonPortableType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorNonPortableType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorNonPortableType")
	}
	_addr_SDL_GetSensorID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorID")
	}
	_addr_SDL_GetSensorData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSensorData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSensorData")
	}
	_addr_SDL_CloseSensor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseSensor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseSensor")
	}
	_addr_SDL_UpdateSensors, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateSensors")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateSensors")
	}
	_addr_SDL_LockJoysticks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockJoysticks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockJoysticks")
	}
	_addr_SDL_UnlockJoysticks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockJoysticks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockJoysticks")
	}
	_addr_SDL_HasJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasJoystick")
	}
	_addr_SDL_GetJoysticks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoysticks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoysticks")
	}
	_addr_SDL_GetJoystickNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickNameForID")
	}
	_addr_SDL_GetJoystickPathForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickPathForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickPathForID")
	}
	_addr_SDL_GetJoystickPlayerIndexForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickPlayerIndexForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickPlayerIndexForID")
	}
	_addr_SDL_GetJoystickGUIDForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickGUIDForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickGUIDForID")
	}
	_addr_SDL_GetJoystickVendorForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickVendorForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickVendorForID")
	}
	_addr_SDL_GetJoystickProductForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickProductForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickProductForID")
	}
	_addr_SDL_GetJoystickProductVersionForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickProductVersionForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickProductVersionForID")
	}
	_addr_SDL_GetJoystickTypeForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickTypeForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickTypeForID")
	}
	_addr_SDL_OpenJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenJoystick")
	}
	_addr_SDL_GetJoystickFromID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickFromID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickFromID")
	}
	_addr_SDL_GetJoystickFromPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickFromPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickFromPlayerIndex")
	}
	_addr_SDL_AttachVirtualJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AttachVirtualJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AttachVirtualJoystick")
	}
	_addr_SDL_DetachVirtualJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DetachVirtualJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DetachVirtualJoystick")
	}
	_addr_SDL_IsJoystickVirtual, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsJoystickVirtual")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsJoystickVirtual")
	}
	_addr_SDL_SetJoystickVirtualAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickVirtualAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickVirtualAxis")
	}
	_addr_SDL_SetJoystickVirtualBall, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickVirtualBall")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickVirtualBall")
	}
	_addr_SDL_SetJoystickVirtualButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickVirtualButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickVirtualButton")
	}
	_addr_SDL_SetJoystickVirtualHat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickVirtualHat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickVirtualHat")
	}
	_addr_SDL_SendJoystickVirtualSensorData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SendJoystickVirtualSensorData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SendJoystickVirtualSensorData")
	}
	_addr_SDL_GetJoystickProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickProperties")
	}
	_addr_SDL_GetJoystickName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickName")
	}
	_addr_SDL_GetJoystickPath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickPath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickPath")
	}
	_addr_SDL_GetJoystickPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickPlayerIndex")
	}
	_addr_SDL_SetJoystickPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickPlayerIndex")
	}
	_addr_SDL_GetJoystickGUID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickGUID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickGUID")
	}
	_addr_SDL_GetJoystickVendor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickVendor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickVendor")
	}
	_addr_SDL_GetJoystickProduct, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickProduct")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickProduct")
	}
	_addr_SDL_GetJoystickProductVersion, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickProductVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickProductVersion")
	}
	_addr_SDL_GetJoystickFirmwareVersion, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickFirmwareVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickFirmwareVersion")
	}
	_addr_SDL_GetJoystickSerial, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickSerial")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickSerial")
	}
	_addr_SDL_GetJoystickType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickType")
	}
	_addr_SDL_GetJoystickGUIDInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickGUIDInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickGUIDInfo")
	}
	_addr_SDL_JoystickConnected, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_JoystickConnected")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_JoystickConnected")
	}
	_addr_SDL_GetJoystickID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickID")
	}
	_addr_SDL_GetNumJoystickAxes, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumJoystickAxes")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumJoystickAxes")
	}
	_addr_SDL_GetNumJoystickBalls, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumJoystickBalls")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumJoystickBalls")
	}
	_addr_SDL_GetNumJoystickHats, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumJoystickHats")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumJoystickHats")
	}
	_addr_SDL_GetNumJoystickButtons, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumJoystickButtons")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumJoystickButtons")
	}
	_addr_SDL_SetJoystickEventsEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickEventsEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickEventsEnabled")
	}
	_addr_SDL_JoystickEventsEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_JoystickEventsEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_JoystickEventsEnabled")
	}
	_addr_SDL_UpdateJoysticks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateJoysticks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateJoysticks")
	}
	_addr_SDL_GetJoystickAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickAxis")
	}
	_addr_SDL_GetJoystickAxisInitialState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickAxisInitialState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickAxisInitialState")
	}
	_addr_SDL_GetJoystickBall, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickBall")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickBall")
	}
	_addr_SDL_GetJoystickHat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickHat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickHat")
	}
	_addr_SDL_GetJoystickButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickButton")
	}
	_addr_SDL_RumbleJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RumbleJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RumbleJoystick")
	}
	_addr_SDL_RumbleJoystickTriggers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RumbleJoystickTriggers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RumbleJoystickTriggers")
	}
	_addr_SDL_SetJoystickLED, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetJoystickLED")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetJoystickLED")
	}
	_addr_SDL_SendJoystickEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SendJoystickEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SendJoystickEffect")
	}
	_addr_SDL_CloseJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseJoystick")
	}
	_addr_SDL_GetJoystickConnectionState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickConnectionState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickConnectionState")
	}
	_addr_SDL_GetJoystickPowerInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetJoystickPowerInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetJoystickPowerInfo")
	}
	_addr_SDL_AddGamepadMapping, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddGamepadMapping")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddGamepadMapping")
	}
	_addr_SDL_AddGamepadMappingsFromIO, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddGamepadMappingsFromIO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddGamepadMappingsFromIO")
	}
	_addr_SDL_AddGamepadMappingsFromFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddGamepadMappingsFromFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddGamepadMappingsFromFile")
	}
	_addr_SDL_ReloadGamepadMappings, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReloadGamepadMappings")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReloadGamepadMappings")
	}
	_addr_SDL_GetGamepadMappings, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadMappings")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadMappings")
	}
	_addr_SDL_GetGamepadMappingForGUID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadMappingForGUID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadMappingForGUID")
	}
	_addr_SDL_GetGamepadMapping, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadMapping")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadMapping")
	}
	_addr_SDL_SetGamepadMapping, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGamepadMapping")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGamepadMapping")
	}
	_addr_SDL_HasGamepad, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasGamepad")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasGamepad")
	}
	_addr_SDL_GetGamepads, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepads")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepads")
	}
	_addr_SDL_IsGamepad, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsGamepad")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsGamepad")
	}
	_addr_SDL_GetGamepadNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadNameForID")
	}
	_addr_SDL_GetGamepadPathForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadPathForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadPathForID")
	}
	_addr_SDL_GetGamepadPlayerIndexForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadPlayerIndexForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadPlayerIndexForID")
	}
	_addr_SDL_GetGamepadGUIDForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadGUIDForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadGUIDForID")
	}
	_addr_SDL_GetGamepadVendorForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadVendorForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadVendorForID")
	}
	_addr_SDL_GetGamepadProductForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadProductForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadProductForID")
	}
	_addr_SDL_GetGamepadProductVersionForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadProductVersionForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadProductVersionForID")
	}
	_addr_SDL_GetGamepadTypeForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadTypeForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadTypeForID")
	}
	_addr_SDL_GetRealGamepadTypeForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRealGamepadTypeForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRealGamepadTypeForID")
	}
	_addr_SDL_GetGamepadMappingForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadMappingForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadMappingForID")
	}
	_addr_SDL_OpenGamepad, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenGamepad")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenGamepad")
	}
	_addr_SDL_GetGamepadFromID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadFromID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadFromID")
	}
	_addr_SDL_GetGamepadFromPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadFromPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadFromPlayerIndex")
	}
	_addr_SDL_GetGamepadProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadProperties")
	}
	_addr_SDL_GetGamepadID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadID")
	}
	_addr_SDL_GetGamepadName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadName")
	}
	_addr_SDL_GetGamepadPath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadPath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadPath")
	}
	_addr_SDL_GetGamepadType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadType")
	}
	_addr_SDL_GetRealGamepadType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRealGamepadType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRealGamepadType")
	}
	_addr_SDL_GetGamepadPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadPlayerIndex")
	}
	_addr_SDL_SetGamepadPlayerIndex, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGamepadPlayerIndex")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGamepadPlayerIndex")
	}
	_addr_SDL_GetGamepadVendor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadVendor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadVendor")
	}
	_addr_SDL_GetGamepadProduct, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadProduct")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadProduct")
	}
	_addr_SDL_GetGamepadProductVersion, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadProductVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadProductVersion")
	}
	_addr_SDL_GetGamepadFirmwareVersion, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadFirmwareVersion")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadFirmwareVersion")
	}
	_addr_SDL_GetGamepadSerial, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadSerial")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadSerial")
	}
	_addr_SDL_GetGamepadSteamHandle, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadSteamHandle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadSteamHandle")
	}
	_addr_SDL_GetGamepadConnectionState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadConnectionState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadConnectionState")
	}
	_addr_SDL_GetGamepadPowerInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadPowerInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadPowerInfo")
	}
	_addr_SDL_GamepadConnected, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadConnected")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadConnected")
	}
	_addr_SDL_GetGamepadJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadJoystick")
	}
	_addr_SDL_SetGamepadEventsEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGamepadEventsEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGamepadEventsEnabled")
	}
	_addr_SDL_GamepadEventsEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadEventsEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadEventsEnabled")
	}
	_addr_SDL_GetGamepadBindings, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadBindings")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadBindings")
	}
	_addr_SDL_UpdateGamepads, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateGamepads")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateGamepads")
	}
	_addr_SDL_GetGamepadTypeFromString, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadTypeFromString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadTypeFromString")
	}
	_addr_SDL_GetGamepadStringForType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadStringForType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadStringForType")
	}
	_addr_SDL_GetGamepadAxisFromString, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadAxisFromString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadAxisFromString")
	}
	_addr_SDL_GetGamepadStringForAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadStringForAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadStringForAxis")
	}
	_addr_SDL_GamepadHasAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadHasAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadHasAxis")
	}
	_addr_SDL_GetGamepadAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadAxis")
	}
	_addr_SDL_GetGamepadButtonFromString, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadButtonFromString")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadButtonFromString")
	}
	_addr_SDL_GetGamepadStringForButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadStringForButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadStringForButton")
	}
	_addr_SDL_GamepadHasButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadHasButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadHasButton")
	}
	_addr_SDL_GetGamepadButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadButton")
	}
	_addr_SDL_GetGamepadButtonLabelForType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadButtonLabelForType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadButtonLabelForType")
	}
	_addr_SDL_GetGamepadButtonLabel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadButtonLabel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadButtonLabel")
	}
	_addr_SDL_GetNumGamepadTouchpads, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumGamepadTouchpads")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumGamepadTouchpads")
	}
	_addr_SDL_GetNumGamepadTouchpadFingers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumGamepadTouchpadFingers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumGamepadTouchpadFingers")
	}
	_addr_SDL_GetGamepadTouchpadFinger, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadTouchpadFinger")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadTouchpadFinger")
	}
	_addr_SDL_GamepadHasSensor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadHasSensor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadHasSensor")
	}
	_addr_SDL_SetGamepadSensorEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGamepadSensorEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGamepadSensorEnabled")
	}
	_addr_SDL_GamepadSensorEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GamepadSensorEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GamepadSensorEnabled")
	}
	_addr_SDL_GetGamepadSensorData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadSensorData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadSensorData")
	}
	_addr_SDL_RumbleGamepad, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RumbleGamepad")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RumbleGamepad")
	}
	_addr_SDL_RumbleGamepadTriggers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RumbleGamepadTriggers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RumbleGamepadTriggers")
	}
	_addr_SDL_SetGamepadLED, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGamepadLED")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGamepadLED")
	}
	_addr_SDL_SendGamepadEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SendGamepadEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SendGamepadEffect")
	}
	_addr_SDL_CloseGamepad, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseGamepad")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseGamepad")
	}
	_addr_SDL_GetGamepadAppleSFSymbolsNameForButton, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadAppleSFSymbolsNameForButton")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadAppleSFSymbolsNameForButton")
	}
	_addr_SDL_GetGamepadAppleSFSymbolsNameForAxis, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGamepadAppleSFSymbolsNameForAxis")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGamepadAppleSFSymbolsNameForAxis")
	}
	_addr_SDL_HasKeyboard, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasKeyboard")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasKeyboard")
	}
	_addr_SDL_GetKeyboards, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyboards")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyboards")
	}
	_addr_SDL_GetKeyboardNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyboardNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyboardNameForID")
	}
	_addr_SDL_GetKeyboardFocus, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyboardFocus")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyboardFocus")
	}
	_addr_SDL_GetKeyboardState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyboardState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyboardState")
	}
	_addr_SDL_ResetKeyboard, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResetKeyboard")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResetKeyboard")
	}
	_addr_SDL_GetModState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetModState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetModState")
	}
	_addr_SDL_SetModState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetModState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetModState")
	}
	_addr_SDL_GetKeyFromScancode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyFromScancode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyFromScancode")
	}
	_addr_SDL_GetScancodeFromKey, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetScancodeFromKey")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetScancodeFromKey")
	}
	_addr_SDL_SetScancodeName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetScancodeName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetScancodeName")
	}
	_addr_SDL_GetScancodeName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetScancodeName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetScancodeName")
	}
	_addr_SDL_GetScancodeFromName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetScancodeFromName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetScancodeFromName")
	}
	_addr_SDL_GetKeyName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyName")
	}
	_addr_SDL_GetKeyFromName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetKeyFromName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetKeyFromName")
	}
	_addr_SDL_StartTextInput, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StartTextInput")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StartTextInput")
	}
	_addr_SDL_StartTextInputWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StartTextInputWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StartTextInputWithProperties")
	}
	_addr_SDL_TextInputActive, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TextInputActive")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TextInputActive")
	}
	_addr_SDL_StopTextInput, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StopTextInput")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StopTextInput")
	}
	_addr_SDL_ClearComposition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClearComposition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClearComposition")
	}
	_addr_SDL_SetTextInputArea, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTextInputArea")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTextInputArea")
	}
	_addr_SDL_GetTextInputArea, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextInputArea")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextInputArea")
	}
	_addr_SDL_HasScreenKeyboardSupport, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasScreenKeyboardSupport")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasScreenKeyboardSupport")
	}
	_addr_SDL_ScreenKeyboardShown, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ScreenKeyboardShown")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ScreenKeyboardShown")
	}
	_addr_SDL_HasMouse, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasMouse")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasMouse")
	}
	_addr_SDL_GetMice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMice")
	}
	_addr_SDL_GetMouseNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMouseNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMouseNameForID")
	}
	_addr_SDL_GetMouseFocus, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMouseFocus")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMouseFocus")
	}
	_addr_SDL_GetMouseState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMouseState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMouseState")
	}
	_addr_SDL_GetGlobalMouseState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGlobalMouseState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGlobalMouseState")
	}
	_addr_SDL_GetRelativeMouseState, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRelativeMouseState")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRelativeMouseState")
	}
	_addr_SDL_SetWindowRelativeMouseMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetWindowRelativeMouseMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetWindowRelativeMouseMode")
	}
	_addr_SDL_GetWindowRelativeMouseMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowRelativeMouseMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowRelativeMouseMode")
	}
	_addr_SDL_CaptureMouse, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CaptureMouse")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CaptureMouse")
	}
	_addr_SDL_CreateCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateCursor")
	}
	_addr_SDL_CreateColorCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateColorCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateColorCursor")
	}
	_addr_SDL_CreateSystemCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSystemCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSystemCursor")
	}
	_addr_SDL_SetCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetCursor")
	}
	_addr_SDL_GetCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCursor")
	}
	_addr_SDL_GetDefaultCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDefaultCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDefaultCursor")
	}
	_addr_SDL_DestroyCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyCursor")
	}
	_addr_SDL_ShowCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowCursor")
	}
	_addr_SDL_HideCursor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HideCursor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HideCursor")
	}
	_addr_SDL_CursorVisible, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CursorVisible")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CursorVisible")
	}
	_addr_SDL_GetTouchDevices, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTouchDevices")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTouchDevices")
	}
	_addr_SDL_GetTouchDeviceName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTouchDeviceName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTouchDeviceName")
	}
	_addr_SDL_GetTouchDeviceType, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTouchDeviceType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTouchDeviceType")
	}
	_addr_SDL_GetTouchFingers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTouchFingers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTouchFingers")
	}
	_addr_SDL_PumpEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PumpEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PumpEvents")
	}
	_addr_SDL_PeepEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PeepEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PeepEvents")
	}
	_addr_SDL_HasEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasEvent")
	}
	_addr_SDL_HasEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HasEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HasEvents")
	}
	_addr_SDL_FlushEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlushEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlushEvent")
	}
	_addr_SDL_FlushEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlushEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlushEvents")
	}
	_addr_SDL_PollEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PollEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PollEvent")
	}
	_addr_SDL_WaitEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitEvent")
	}
	_addr_SDL_WaitEventTimeout, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitEventTimeout")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitEventTimeout")
	}
	_addr_SDL_PushEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PushEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PushEvent")
	}
	_addr_SDL_SetEventFilter, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetEventFilter")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetEventFilter")
	}
	_addr_SDL_GetEventFilter, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetEventFilter")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetEventFilter")
	}
	_addr_SDL_AddEventWatch, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddEventWatch")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddEventWatch")
	}
	_addr_SDL_RemoveEventWatch, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveEventWatch")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveEventWatch")
	}
	_addr_SDL_FilterEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FilterEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FilterEvents")
	}
	_addr_SDL_SetEventEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetEventEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetEventEnabled")
	}
	_addr_SDL_EventEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EventEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EventEnabled")
	}
	_addr_SDL_RegisterEvents, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RegisterEvents")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RegisterEvents")
	}
	_addr_SDL_GetWindowFromEvent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetWindowFromEvent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetWindowFromEvent")
	}
	_addr_SDL_GetBasePath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetBasePath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetBasePath")
	}
	_addr_SDL_GetPrefPath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPrefPath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPrefPath")
	}
	_addr_SDL_GetUserFolder, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetUserFolder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetUserFolder")
	}
	_addr_SDL_CreateDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateDirectory")
	}
	_addr_SDL_EnumerateDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EnumerateDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EnumerateDirectory")
	}
	_addr_SDL_RemovePath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemovePath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemovePath")
	}
	_addr_SDL_RenamePath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenamePath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenamePath")
	}
	_addr_SDL_CopyFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CopyFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CopyFile")
	}
	_addr_SDL_GetPathInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPathInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPathInfo")
	}
	_addr_SDL_GlobDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GlobDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GlobDirectory")
	}
	_addr_SDL_GetCurrentDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentDirectory")
	}
	_addr_SDL_GPUSupportsShaderFormats, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GPUSupportsShaderFormats")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GPUSupportsShaderFormats")
	}
	_addr_SDL_GPUSupportsProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GPUSupportsProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GPUSupportsProperties")
	}
	_addr_SDL_CreateGPUDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUDevice")
	}
	_addr_SDL_CreateGPUDeviceWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUDeviceWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUDeviceWithProperties")
	}
	_addr_SDL_DestroyGPUDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyGPUDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyGPUDevice")
	}
	_addr_SDL_GetNumGPUDrivers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumGPUDrivers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumGPUDrivers")
	}
	_addr_SDL_GetGPUDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGPUDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGPUDriver")
	}
	_addr_SDL_GetGPUDeviceDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGPUDeviceDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGPUDeviceDriver")
	}
	_addr_SDL_GetGPUShaderFormats, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGPUShaderFormats")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGPUShaderFormats")
	}
	_addr_SDL_CreateGPUGraphicsPipeline, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUGraphicsPipeline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUGraphicsPipeline")
	}
	_addr_SDL_CreateGPUSampler, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUSampler")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUSampler")
	}
	_addr_SDL_CreateGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUTexture")
	}
	_addr_SDL_CreateGPUBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUBuffer")
	}
	_addr_SDL_CreateGPUTransferBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateGPUTransferBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateGPUTransferBuffer")
	}
	_addr_SDL_SetGPUBufferName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUBufferName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUBufferName")
	}
	_addr_SDL_SetGPUTextureName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUTextureName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUTextureName")
	}
	_addr_SDL_InsertGPUDebugLabel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_InsertGPUDebugLabel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_InsertGPUDebugLabel")
	}
	_addr_SDL_PushGPUDebugGroup, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PushGPUDebugGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PushGPUDebugGroup")
	}
	_addr_SDL_PopGPUDebugGroup, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PopGPUDebugGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PopGPUDebugGroup")
	}
	_addr_SDL_ReleaseGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUTexture")
	}
	_addr_SDL_ReleaseGPUSampler, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUSampler")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUSampler")
	}
	_addr_SDL_ReleaseGPUBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUBuffer")
	}
	_addr_SDL_ReleaseGPUTransferBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUTransferBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUTransferBuffer")
	}
	_addr_SDL_ReleaseGPUComputePipeline, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUComputePipeline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUComputePipeline")
	}
	_addr_SDL_ReleaseGPUShader, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUShader")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUShader")
	}
	_addr_SDL_ReleaseGPUGraphicsPipeline, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUGraphicsPipeline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUGraphicsPipeline")
	}
	_addr_SDL_AcquireGPUCommandBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AcquireGPUCommandBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AcquireGPUCommandBuffer")
	}
	_addr_SDL_PushGPUVertexUniformData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PushGPUVertexUniformData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PushGPUVertexUniformData")
	}
	_addr_SDL_PushGPUFragmentUniformData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PushGPUFragmentUniformData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PushGPUFragmentUniformData")
	}
	_addr_SDL_PushGPUComputeUniformData, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PushGPUComputeUniformData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PushGPUComputeUniformData")
	}
	_addr_SDL_BeginGPURenderPass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BeginGPURenderPass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BeginGPURenderPass")
	}
	_addr_SDL_BindGPUGraphicsPipeline, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUGraphicsPipeline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUGraphicsPipeline")
	}
	_addr_SDL_SetGPUViewport, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUViewport")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUViewport")
	}
	_addr_SDL_SetGPUScissor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUScissor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUScissor")
	}
	_addr_SDL_SetGPUStencilReference, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUStencilReference")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUStencilReference")
	}
	_addr_SDL_BindGPUVertexBuffers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUVertexBuffers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUVertexBuffers")
	}
	_addr_SDL_BindGPUIndexBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUIndexBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUIndexBuffer")
	}
	_addr_SDL_BindGPUVertexSamplers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUVertexSamplers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUVertexSamplers")
	}
	_addr_SDL_BindGPUVertexStorageTextures, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUVertexStorageTextures")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUVertexStorageTextures")
	}
	_addr_SDL_BindGPUVertexStorageBuffers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUVertexStorageBuffers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUVertexStorageBuffers")
	}
	_addr_SDL_BindGPUFragmentSamplers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUFragmentSamplers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUFragmentSamplers")
	}
	_addr_SDL_BindGPUFragmentStorageTextures, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUFragmentStorageTextures")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUFragmentStorageTextures")
	}
	_addr_SDL_BindGPUFragmentStorageBuffers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUFragmentStorageBuffers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUFragmentStorageBuffers")
	}
	_addr_SDL_DrawGPUIndexedPrimitives, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DrawGPUIndexedPrimitives")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DrawGPUIndexedPrimitives")
	}
	_addr_SDL_DrawGPUPrimitives, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DrawGPUPrimitives")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DrawGPUPrimitives")
	}
	_addr_SDL_DrawGPUPrimitivesIndirect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DrawGPUPrimitivesIndirect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DrawGPUPrimitivesIndirect")
	}
	_addr_SDL_DrawGPUIndexedPrimitivesIndirect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DrawGPUIndexedPrimitivesIndirect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DrawGPUIndexedPrimitivesIndirect")
	}
	_addr_SDL_EndGPURenderPass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EndGPURenderPass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EndGPURenderPass")
	}
	_addr_SDL_BeginGPUComputePass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BeginGPUComputePass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BeginGPUComputePass")
	}
	_addr_SDL_BindGPUComputePipeline, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUComputePipeline")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUComputePipeline")
	}
	_addr_SDL_BindGPUComputeSamplers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUComputeSamplers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUComputeSamplers")
	}
	_addr_SDL_BindGPUComputeStorageTextures, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUComputeStorageTextures")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUComputeStorageTextures")
	}
	_addr_SDL_BindGPUComputeStorageBuffers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BindGPUComputeStorageBuffers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BindGPUComputeStorageBuffers")
	}
	_addr_SDL_DispatchGPUCompute, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DispatchGPUCompute")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DispatchGPUCompute")
	}
	_addr_SDL_DispatchGPUComputeIndirect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DispatchGPUComputeIndirect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DispatchGPUComputeIndirect")
	}
	_addr_SDL_EndGPUComputePass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EndGPUComputePass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EndGPUComputePass")
	}
	_addr_SDL_MapGPUTransferBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_MapGPUTransferBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_MapGPUTransferBuffer")
	}
	_addr_SDL_UnmapGPUTransferBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnmapGPUTransferBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnmapGPUTransferBuffer")
	}
	_addr_SDL_BeginGPUCopyPass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BeginGPUCopyPass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BeginGPUCopyPass")
	}
	_addr_SDL_UploadToGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UploadToGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UploadToGPUTexture")
	}
	_addr_SDL_UploadToGPUBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UploadToGPUBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UploadToGPUBuffer")
	}
	_addr_SDL_CopyGPUTextureToTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CopyGPUTextureToTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CopyGPUTextureToTexture")
	}
	_addr_SDL_CopyGPUBufferToBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CopyGPUBufferToBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CopyGPUBufferToBuffer")
	}
	_addr_SDL_DownloadFromGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DownloadFromGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DownloadFromGPUTexture")
	}
	_addr_SDL_DownloadFromGPUBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DownloadFromGPUBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DownloadFromGPUBuffer")
	}
	_addr_SDL_EndGPUCopyPass, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EndGPUCopyPass")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EndGPUCopyPass")
	}
	_addr_SDL_GenerateMipmapsForGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GenerateMipmapsForGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GenerateMipmapsForGPUTexture")
	}
	_addr_SDL_BlitGPUTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_BlitGPUTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_BlitGPUTexture")
	}
	_addr_SDL_WindowSupportsGPUSwapchainComposition, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WindowSupportsGPUSwapchainComposition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WindowSupportsGPUSwapchainComposition")
	}
	_addr_SDL_WindowSupportsGPUPresentMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WindowSupportsGPUPresentMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WindowSupportsGPUPresentMode")
	}
	_addr_SDL_ClaimWindowForGPUDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClaimWindowForGPUDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClaimWindowForGPUDevice")
	}
	_addr_SDL_ReleaseWindowFromGPUDevice, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseWindowFromGPUDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseWindowFromGPUDevice")
	}
	_addr_SDL_SetGPUSwapchainParameters, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUSwapchainParameters")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUSwapchainParameters")
	}
	_addr_SDL_SetGPUAllowedFramesInFlight, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetGPUAllowedFramesInFlight")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetGPUAllowedFramesInFlight")
	}
	_addr_SDL_GetGPUSwapchainTextureFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetGPUSwapchainTextureFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetGPUSwapchainTextureFormat")
	}
	_addr_SDL_AcquireGPUSwapchainTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AcquireGPUSwapchainTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AcquireGPUSwapchainTexture")
	}
	_addr_SDL_WaitForGPUSwapchain, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitForGPUSwapchain")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitForGPUSwapchain")
	}
	_addr_SDL_WaitAndAcquireGPUSwapchainTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitAndAcquireGPUSwapchainTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitAndAcquireGPUSwapchainTexture")
	}
	_addr_SDL_SubmitGPUCommandBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SubmitGPUCommandBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SubmitGPUCommandBuffer")
	}
	_addr_SDL_SubmitGPUCommandBufferAndAcquireFence, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SubmitGPUCommandBufferAndAcquireFence")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SubmitGPUCommandBufferAndAcquireFence")
	}
	_addr_SDL_CancelGPUCommandBuffer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CancelGPUCommandBuffer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CancelGPUCommandBuffer")
	}
	_addr_SDL_WaitForGPUIdle, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitForGPUIdle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitForGPUIdle")
	}
	_addr_SDL_WaitForGPUFences, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitForGPUFences")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitForGPUFences")
	}
	_addr_SDL_QueryGPUFence, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_QueryGPUFence")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_QueryGPUFence")
	}
	_addr_SDL_ReleaseGPUFence, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReleaseGPUFence")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReleaseGPUFence")
	}
	_addr_SDL_GPUTextureFormatTexelBlockSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GPUTextureFormatTexelBlockSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GPUTextureFormatTexelBlockSize")
	}
	_addr_SDL_GPUTextureSupportsFormat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GPUTextureSupportsFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GPUTextureSupportsFormat")
	}
	_addr_SDL_GPUTextureSupportsSampleCount, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GPUTextureSupportsSampleCount")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GPUTextureSupportsSampleCount")
	}
	_addr_SDL_CalculateGPUTextureFormatSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CalculateGPUTextureFormatSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CalculateGPUTextureFormatSize")
	}
	_addr_SDL_GetHaptics, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHaptics")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHaptics")
	}
	_addr_SDL_GetHapticNameForID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticNameForID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticNameForID")
	}
	_addr_SDL_OpenHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenHaptic")
	}
	_addr_SDL_GetHapticFromID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticFromID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticFromID")
	}
	_addr_SDL_GetHapticID, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticID")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticID")
	}
	_addr_SDL_GetHapticName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticName")
	}
	_addr_SDL_IsMouseHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsMouseHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsMouseHaptic")
	}
	_addr_SDL_OpenHapticFromMouse, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenHapticFromMouse")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenHapticFromMouse")
	}
	_addr_SDL_IsJoystickHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsJoystickHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsJoystickHaptic")
	}
	_addr_SDL_OpenHapticFromJoystick, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenHapticFromJoystick")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenHapticFromJoystick")
	}
	_addr_SDL_CloseHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseHaptic")
	}
	_addr_SDL_GetMaxHapticEffects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMaxHapticEffects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMaxHapticEffects")
	}
	_addr_SDL_GetMaxHapticEffectsPlaying, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetMaxHapticEffectsPlaying")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetMaxHapticEffectsPlaying")
	}
	_addr_SDL_GetHapticFeatures, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticFeatures")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticFeatures")
	}
	_addr_SDL_GetNumHapticAxes, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumHapticAxes")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumHapticAxes")
	}
	_addr_SDL_HapticEffectSupported, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HapticEffectSupported")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HapticEffectSupported")
	}
	_addr_SDL_CreateHapticEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateHapticEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateHapticEffect")
	}
	_addr_SDL_UpdateHapticEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateHapticEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateHapticEffect")
	}
	_addr_SDL_RunHapticEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RunHapticEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RunHapticEffect")
	}
	_addr_SDL_StopHapticEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StopHapticEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StopHapticEffect")
	}
	_addr_SDL_DestroyHapticEffect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyHapticEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyHapticEffect")
	}
	_addr_SDL_GetHapticEffectStatus, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHapticEffectStatus")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHapticEffectStatus")
	}
	_addr_SDL_SetHapticGain, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetHapticGain")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetHapticGain")
	}
	_addr_SDL_SetHapticAutocenter, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetHapticAutocenter")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetHapticAutocenter")
	}
	_addr_SDL_PauseHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_PauseHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_PauseHaptic")
	}
	_addr_SDL_ResumeHaptic, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResumeHaptic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResumeHaptic")
	}
	_addr_SDL_StopHapticEffects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StopHapticEffects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StopHapticEffects")
	}
	_addr_SDL_HapticRumbleSupported, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_HapticRumbleSupported")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_HapticRumbleSupported")
	}
	_addr_SDL_InitHapticRumble, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_InitHapticRumble")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_InitHapticRumble")
	}
	_addr_SDL_StopHapticRumble, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StopHapticRumble")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StopHapticRumble")
	}
	_addr_SDL_SetHintWithPriority, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetHintWithPriority")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetHintWithPriority")
	}
	_addr_SDL_SetHint, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetHint")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetHint")
	}
	_addr_SDL_ResetHint, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResetHint")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResetHint")
	}
	_addr_SDL_ResetHints, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResetHints")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResetHints")
	}
	_addr_SDL_GetHint, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHint")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHint")
	}
	_addr_SDL_GetHintBoolean, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetHintBoolean")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetHintBoolean")
	}
	_addr_SDL_AddHintCallback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddHintCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddHintCallback")
	}
	_addr_SDL_RemoveHintCallback, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveHintCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveHintCallback")
	}
	_addr_SDL_Init, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Init")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Init")
	}
	_addr_SDL_InitSubSystem, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_InitSubSystem")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_InitSubSystem")
	}
	_addr_SDL_QuitSubSystem, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_QuitSubSystem")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_QuitSubSystem")
	}
	_addr_SDL_WasInit, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WasInit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WasInit")
	}
	_addr_SDL_Quit, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Quit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Quit")
	}
	_addr_SDL_IsMainThread, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsMainThread")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsMainThread")
	}
	_addr_SDL_RunOnMainThread, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RunOnMainThread")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RunOnMainThread")
	}
	_addr_SDL_SetAppMetadata, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAppMetadata")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAppMetadata")
	}
	_addr_SDL_SetAppMetadataProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetAppMetadataProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetAppMetadataProperty")
	}
	_addr_SDL_GetAppMetadataProperty, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetAppMetadataProperty")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetAppMetadataProperty")
	}
	_addr_SDL_LoadObject, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadObject")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadObject")
	}
	_addr_SDL_LoadFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LoadFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LoadFunction")
	}
	_addr_SDL_UnloadObject, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnloadObject")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnloadObject")
	}
	_addr_SDL_GetPreferredLocales, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPreferredLocales")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPreferredLocales")
	}
	_addr_SDL_SetLogPriorities, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetLogPriorities")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetLogPriorities")
	}
	_addr_SDL_SetLogPriority, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetLogPriority")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetLogPriority")
	}
	_addr_SDL_GetLogPriority, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetLogPriority")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetLogPriority")
	}
	_addr_SDL_ResetLogPriorities, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ResetLogPriorities")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ResetLogPriorities")
	}
	_addr_SDL_SetLogPriorityPrefix, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetLogPriorityPrefix")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetLogPriorityPrefix")
	}
	_addr_SDL_Log, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Log")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Log")
	}
	_addr_SDL_LogTrace, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogTrace")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogTrace")
	}
	_addr_SDL_LogVerbose, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogVerbose")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogVerbose")
	}
	_addr_SDL_LogDebug, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogDebug")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogDebug")
	}
	_addr_SDL_LogInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogInfo")
	}
	_addr_SDL_LogWarn, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogWarn")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogWarn")
	}
	_addr_SDL_LogError, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogError")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogError")
	}
	_addr_SDL_LogCritical, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogCritical")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogCritical")
	}
	_addr_SDL_LogMessage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogMessage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogMessage")
	}
	_addr_SDL_LogMessageV, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LogMessageV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LogMessageV")
	}
	_addr_SDL_GetDefaultLogOutputFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDefaultLogOutputFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDefaultLogOutputFunction")
	}
	_addr_SDL_GetLogOutputFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetLogOutputFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetLogOutputFunction")
	}
	_addr_SDL_SetLogOutputFunction, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetLogOutputFunction")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetLogOutputFunction")
	}
	_addr_SDL_ShowSimpleMessageBox, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ShowSimpleMessageBox")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ShowSimpleMessageBox")
	}
	_addr_SDL_Metal_CreateView, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Metal_CreateView")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Metal_CreateView")
	}
	_addr_SDL_Metal_DestroyView, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Metal_DestroyView")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Metal_DestroyView")
	}
	_addr_SDL_Metal_GetLayer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Metal_GetLayer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Metal_GetLayer")
	}
	_addr_SDL_OpenURL, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenURL")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenURL")
	}
	_addr_SDL_CreateProcess, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateProcess")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateProcess")
	}
	_addr_SDL_CreateProcessWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateProcessWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateProcessWithProperties")
	}
	_addr_SDL_GetProcessProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetProcessProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetProcessProperties")
	}
	_addr_SDL_ReadProcess, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadProcess")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadProcess")
	}
	_addr_SDL_GetProcessInput, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetProcessInput")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetProcessInput")
	}
	_addr_SDL_GetProcessOutput, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetProcessOutput")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetProcessOutput")
	}
	_addr_SDL_KillProcess, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_KillProcess")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_KillProcess")
	}
	_addr_SDL_WaitProcess, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WaitProcess")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WaitProcess")
	}
	_addr_SDL_DestroyProcess, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyProcess")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyProcess")
	}
	_addr_SDL_GetNumRenderDrivers, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetNumRenderDrivers")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetNumRenderDrivers")
	}
	_addr_SDL_GetRenderDriver, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderDriver")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderDriver")
	}
	_addr_SDL_CreateWindowAndRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateWindowAndRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateWindowAndRenderer")
	}
	_addr_SDL_CreateRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateRenderer")
	}
	_addr_SDL_CreateRendererWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateRendererWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateRendererWithProperties")
	}
	_addr_SDL_CreateSoftwareRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateSoftwareRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateSoftwareRenderer")
	}
	_addr_SDL_GetRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderer")
	}
	_addr_SDL_GetRenderWindow, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderWindow")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderWindow")
	}
	_addr_SDL_GetRendererName, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRendererName")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRendererName")
	}
	_addr_SDL_GetRendererProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRendererProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRendererProperties")
	}
	_addr_SDL_GetRenderOutputSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderOutputSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderOutputSize")
	}
	_addr_SDL_GetCurrentRenderOutputSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentRenderOutputSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentRenderOutputSize")
	}
	_addr_SDL_CreateTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTexture")
	}
	_addr_SDL_CreateTextureFromSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTextureFromSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTextureFromSurface")
	}
	_addr_SDL_CreateTextureWithProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTextureWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTextureWithProperties")
	}
	_addr_SDL_GetTextureProperties, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureProperties")
	}
	_addr_SDL_GetRendererFromTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRendererFromTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRendererFromTexture")
	}
	_addr_SDL_GetTextureSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureSize")
	}
	_addr_SDL_SetTextureColorMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTextureColorMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTextureColorMod")
	}
	_addr_SDL_GetTextureColorMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureColorMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureColorMod")
	}
	_addr_SDL_GetTextureColorModFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureColorModFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureColorModFloat")
	}
	_addr_SDL_SetTextureAlphaMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTextureAlphaMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTextureAlphaMod")
	}
	_addr_SDL_GetTextureAlphaMod, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureAlphaMod")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureAlphaMod")
	}
	_addr_SDL_GetTextureAlphaModFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureAlphaModFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureAlphaModFloat")
	}
	_addr_SDL_SetTextureBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTextureBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTextureBlendMode")
	}
	_addr_SDL_GetTextureBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureBlendMode")
	}
	_addr_SDL_SetTextureScaleMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTextureScaleMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTextureScaleMode")
	}
	_addr_SDL_GetTextureScaleMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTextureScaleMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTextureScaleMode")
	}
	_addr_SDL_UpdateTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateTexture")
	}
	_addr_SDL_UpdateYUVTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateYUVTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateYUVTexture")
	}
	_addr_SDL_UpdateNVTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateNVTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateNVTexture")
	}
	_addr_SDL_LockTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockTexture")
	}
	_addr_SDL_LockTextureToSurface, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_LockTextureToSurface")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_LockTextureToSurface")
	}
	_addr_SDL_UnlockTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UnlockTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UnlockTexture")
	}
	_addr_SDL_SetRenderTarget, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderTarget")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderTarget")
	}
	_addr_SDL_GetRenderTarget, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderTarget")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderTarget")
	}
	_addr_SDL_SetRenderLogicalPresentation, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderLogicalPresentation")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderLogicalPresentation")
	}
	_addr_SDL_GetRenderLogicalPresentation, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderLogicalPresentation")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderLogicalPresentation")
	}
	_addr_SDL_GetRenderLogicalPresentationRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderLogicalPresentationRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderLogicalPresentationRect")
	}
	_addr_SDL_ConvertEventToRenderCoordinates, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ConvertEventToRenderCoordinates")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ConvertEventToRenderCoordinates")
	}
	_addr_SDL_SetRenderViewport, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderViewport")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderViewport")
	}
	_addr_SDL_GetRenderViewport, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderViewport")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderViewport")
	}
	_addr_SDL_RenderViewportSet, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderViewportSet")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderViewportSet")
	}
	_addr_SDL_GetRenderSafeArea, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderSafeArea")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderSafeArea")
	}
	_addr_SDL_SetRenderClipRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderClipRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderClipRect")
	}
	_addr_SDL_GetRenderClipRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderClipRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderClipRect")
	}
	_addr_SDL_RenderClipEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderClipEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderClipEnabled")
	}
	_addr_SDL_GetRenderScale, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderScale")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderScale")
	}
	_addr_SDL_SetRenderDrawColor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderDrawColor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderDrawColor")
	}
	_addr_SDL_GetRenderDrawColor, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderDrawColor")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderDrawColor")
	}
	_addr_SDL_GetRenderDrawColorFloat, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderDrawColorFloat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderDrawColorFloat")
	}
	_addr_SDL_GetRenderColorScale, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderColorScale")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderColorScale")
	}
	_addr_SDL_SetRenderDrawBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderDrawBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderDrawBlendMode")
	}
	_addr_SDL_GetRenderDrawBlendMode, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderDrawBlendMode")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderDrawBlendMode")
	}
	_addr_SDL_RenderClear, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderClear")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderClear")
	}
	_addr_SDL_RenderPoints, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderPoints")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderPoints")
	}
	_addr_SDL_RenderLines, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderLines")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderLines")
	}
	_addr_SDL_RenderRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderRect")
	}
	_addr_SDL_RenderRects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderRects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderRects")
	}
	_addr_SDL_RenderFillRect, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderFillRect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderFillRect")
	}
	_addr_SDL_RenderFillRects, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderFillRects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderFillRects")
	}
	_addr_SDL_RenderTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderTexture")
	}
	_addr_SDL_RenderTextureAffine, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderTextureAffine")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderTextureAffine")
	}
	_addr_SDL_RenderGeometry, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderGeometry")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderGeometry")
	}
	_addr_SDL_RenderGeometryRaw, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderGeometryRaw")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderGeometryRaw")
	}
	_addr_SDL_RenderReadPixels, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderReadPixels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderReadPixels")
	}
	_addr_SDL_RenderPresent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenderPresent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenderPresent")
	}
	_addr_SDL_DestroyTexture, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyTexture")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyTexture")
	}
	_addr_SDL_DestroyRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyRenderer")
	}
	_addr_SDL_FlushRenderer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_FlushRenderer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_FlushRenderer")
	}
	_addr_SDL_GetRenderMetalLayer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderMetalLayer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderMetalLayer")
	}
	_addr_SDL_GetRenderMetalCommandEncoder, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderMetalCommandEncoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderMetalCommandEncoder")
	}
	_addr_SDL_AddVulkanRenderSemaphores, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddVulkanRenderSemaphores")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddVulkanRenderSemaphores")
	}
	_addr_SDL_SetRenderVSync, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetRenderVSync")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetRenderVSync")
	}
	_addr_SDL_GetRenderVSync, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetRenderVSync")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetRenderVSync")
	}
	_addr_SDL_OpenTitleStorage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenTitleStorage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenTitleStorage")
	}
	_addr_SDL_OpenUserStorage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenUserStorage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenUserStorage")
	}
	_addr_SDL_OpenFileStorage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenFileStorage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenFileStorage")
	}
	_addr_SDL_OpenStorage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OpenStorage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OpenStorage")
	}
	_addr_SDL_CloseStorage, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CloseStorage")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CloseStorage")
	}
	_addr_SDL_StorageReady, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_StorageReady")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_StorageReady")
	}
	_addr_SDL_GetStorageFileSize, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetStorageFileSize")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetStorageFileSize")
	}
	_addr_SDL_ReadStorageFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ReadStorageFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ReadStorageFile")
	}
	_addr_SDL_WriteStorageFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_WriteStorageFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_WriteStorageFile")
	}
	_addr_SDL_CreateStorageDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateStorageDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateStorageDirectory")
	}
	_addr_SDL_EnumerateStorageDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EnumerateStorageDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EnumerateStorageDirectory")
	}
	_addr_SDL_RemoveStoragePath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveStoragePath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveStoragePath")
	}
	_addr_SDL_RenameStoragePath, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RenameStoragePath")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RenameStoragePath")
	}
	_addr_SDL_CopyStorageFile, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CopyStorageFile")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CopyStorageFile")
	}
	_addr_SDL_GetStoragePathInfo, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetStoragePathInfo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetStoragePathInfo")
	}
	_addr_SDL_GetStorageSpaceRemaining, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetStorageSpaceRemaining")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetStorageSpaceRemaining")
	}
	_addr_SDL_GlobStorageDirectory, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GlobStorageDirectory")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GlobStorageDirectory")
	}
	_addr_SDL_SetX11EventHook, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetX11EventHook")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetX11EventHook")
	}
	_addr_SDL_IsTablet, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsTablet")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsTablet")
	}
	_addr_SDL_IsTV, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_IsTV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_IsTV")
	}
	_addr_SDL_GetSandbox, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetSandbox")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetSandbox")
	}
	_addr_SDL_OnApplicationWillTerminate, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationWillTerminate")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationWillTerminate")
	}
	_addr_SDL_OnApplicationDidReceiveMemoryWarning, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationDidReceiveMemoryWarning")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationDidReceiveMemoryWarning")
	}
	_addr_SDL_OnApplicationWillEnterBackground, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationWillEnterBackground")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationWillEnterBackground")
	}
	_addr_SDL_OnApplicationDidEnterBackground, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationDidEnterBackground")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationDidEnterBackground")
	}
	_addr_SDL_OnApplicationWillEnterForeground, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationWillEnterForeground")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationWillEnterForeground")
	}
	_addr_SDL_OnApplicationDidEnterForeground, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_OnApplicationDidEnterForeground")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_OnApplicationDidEnterForeground")
	}
	_addr_SDL_GetDateTimeLocalePreferences, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDateTimeLocalePreferences")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDateTimeLocalePreferences")
	}
	_addr_SDL_GetCurrentTime, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetCurrentTime")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetCurrentTime")
	}
	_addr_SDL_TimeToDateTime, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TimeToDateTime")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TimeToDateTime")
	}
	_addr_SDL_DateTimeToTime, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DateTimeToTime")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DateTimeToTime")
	}
	_addr_SDL_TimeToWindows, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TimeToWindows")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TimeToWindows")
	}
	_addr_SDL_TimeFromWindows, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_TimeFromWindows")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_TimeFromWindows")
	}
	_addr_SDL_GetDaysInMonth, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDaysInMonth")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDaysInMonth")
	}
	_addr_SDL_GetDayOfYear, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDayOfYear")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDayOfYear")
	}
	_addr_SDL_GetDayOfWeek, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetDayOfWeek")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetDayOfWeek")
	}
	_addr_SDL_GetTicks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTicks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTicks")
	}
	_addr_SDL_GetTicksNS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTicksNS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTicksNS")
	}
	_addr_SDL_GetPerformanceCounter, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPerformanceCounter")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPerformanceCounter")
	}
	_addr_SDL_GetPerformanceFrequency, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetPerformanceFrequency")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetPerformanceFrequency")
	}
	_addr_SDL_Delay, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_Delay")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_Delay")
	}
	_addr_SDL_DelayNS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DelayNS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DelayNS")
	}
	_addr_SDL_DelayPrecise, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DelayPrecise")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DelayPrecise")
	}
	_addr_SDL_AddTimer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddTimer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddTimer")
	}
	_addr_SDL_AddTimerNS, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_AddTimerNS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_AddTimerNS")
	}
	_addr_SDL_RemoveTimer, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveTimer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveTimer")
	}
	_addr_SDL_CreateTray, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTray")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTray")
	}
	_addr_SDL_SetTrayIcon, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTrayIcon")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTrayIcon")
	}
	_addr_SDL_SetTrayTooltip, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTrayTooltip")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTrayTooltip")
	}
	_addr_SDL_CreateTrayMenu, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTrayMenu")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTrayMenu")
	}
	_addr_SDL_CreateTraySubmenu, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_CreateTraySubmenu")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_CreateTraySubmenu")
	}
	_addr_SDL_GetTrayMenu, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayMenu")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayMenu")
	}
	_addr_SDL_GetTraySubmenu, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTraySubmenu")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTraySubmenu")
	}
	_addr_SDL_GetTrayEntries, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayEntries")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayEntries")
	}
	_addr_SDL_RemoveTrayEntry, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RemoveTrayEntry")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RemoveTrayEntry")
	}
	_addr_SDL_InsertTrayEntryAt, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_InsertTrayEntryAt")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_InsertTrayEntryAt")
	}
	_addr_SDL_SetTrayEntryLabel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTrayEntryLabel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTrayEntryLabel")
	}
	_addr_SDL_GetTrayEntryLabel, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayEntryLabel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayEntryLabel")
	}
	_addr_SDL_SetTrayEntryChecked, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTrayEntryChecked")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTrayEntryChecked")
	}
	_addr_SDL_GetTrayEntryChecked, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayEntryChecked")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayEntryChecked")
	}
	_addr_SDL_SetTrayEntryEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetTrayEntryEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetTrayEntryEnabled")
	}
	_addr_SDL_GetTrayEntryEnabled, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayEntryEnabled")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayEntryEnabled")
	}
	_addr_SDL_ClickTrayEntry, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_ClickTrayEntry")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_ClickTrayEntry")
	}
	_addr_SDL_DestroyTray, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_DestroyTray")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_DestroyTray")
	}
	_addr_SDL_GetTrayEntryParent, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayEntryParent")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayEntryParent")
	}
	_addr_SDL_GetTrayMenuParentEntry, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayMenuParentEntry")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayMenuParentEntry")
	}
	_addr_SDL_GetTrayMenuParentTray, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GetTrayMenuParentTray")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GetTrayMenuParentTray")
	}
	_addr_SDL_UpdateTrays, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_UpdateTrays")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_UpdateTrays")
	}
	_addr_SDL_SetMainReady, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_SetMainReady")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_SetMainReady")
	}
	_addr_SDL_RunApp, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_RunApp")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_RunApp")
	}
	_addr_SDL_EnterAppMainCallbacks, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_EnterAppMainCallbacks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_EnterAppMainCallbacks")
	}
	_addr_SDL_GDKSuspendComplete, err = puregogen.OpenSymbol(_hnd_sdl, "SDL_GDKSuspendComplete")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: SDL_GDKSuspendComplete")
	}

	ifree = func(mem uintptr) {
		purego.SyscallN(_addr_SDL_free, uintptr(mem))
	}
	iAsyncIOFromFile = func(file string, mode string) *AsyncIO {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AsyncIOFromFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mode))))
		__r0 := (*AsyncIO)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(file)
		runtime.KeepAlive(mode)
		return __r0
	}
	iGetAsyncIOSize = func(asyncio *AsyncIO) int64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAsyncIOSize, uintptr(unsafe.Pointer(asyncio)))
		__r0 := int64(_r0)
		runtime.KeepAlive(asyncio)
		return __r0
	}
	iReadAsyncIO = func(asyncio *AsyncIO, ptr uintptr, offset uint64, size uint64, queue *AsyncIOQueue, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadAsyncIO, uintptr(unsafe.Pointer(asyncio)), uintptr(ptr), uintptr(offset), uintptr(size), uintptr(unsafe.Pointer(queue)), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(asyncio)
		runtime.KeepAlive(queue)
		return __r0
	}
	iWriteAsyncIO = func(asyncio *AsyncIO, ptr uintptr, offset uint64, size uint64, queue *AsyncIOQueue, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteAsyncIO, uintptr(unsafe.Pointer(asyncio)), uintptr(ptr), uintptr(offset), uintptr(size), uintptr(unsafe.Pointer(queue)), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(asyncio)
		runtime.KeepAlive(queue)
		return __r0
	}
	iCloseAsyncIO = func(asyncio *AsyncIO, flush bool, queue *AsyncIOQueue, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CloseAsyncIO, uintptr(unsafe.Pointer(asyncio)), puregogen.BoolToUintptr(flush), uintptr(unsafe.Pointer(queue)), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(asyncio)
		runtime.KeepAlive(queue)
		return __r0
	}
	iCreateAsyncIOQueue = func() *AsyncIOQueue {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateAsyncIOQueue)
		__r0 := (*AsyncIOQueue)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroyAsyncIOQueue = func(queue *AsyncIOQueue) {
		purego.SyscallN(_addr_SDL_DestroyAsyncIOQueue, uintptr(unsafe.Pointer(queue)))
		runtime.KeepAlive(queue)
	}
	iGetAsyncIOResult = func(queue *AsyncIOQueue, outcome *AsyncIOOutcome) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAsyncIOResult, uintptr(unsafe.Pointer(queue)), uintptr(unsafe.Pointer(outcome)))
		__r0 := _r0 != 0
		runtime.KeepAlive(queue)
		runtime.KeepAlive(outcome)
		return __r0
	}
	iWaitAsyncIOResult = func(queue *AsyncIOQueue, outcome *AsyncIOOutcome, timeoutMS int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitAsyncIOResult, uintptr(unsafe.Pointer(queue)), uintptr(unsafe.Pointer(outcome)), uintptr(timeoutMS))
		__r0 := _r0 != 0
		runtime.KeepAlive(queue)
		runtime.KeepAlive(outcome)
		return __r0
	}
	iSignalAsyncIOQueue = func(queue *AsyncIOQueue) {
		purego.SyscallN(_addr_SDL_SignalAsyncIOQueue, uintptr(unsafe.Pointer(queue)))
		runtime.KeepAlive(queue)
	}
	iLoadFileAsync = func(file string, queue *AsyncIOQueue, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadFileAsync, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))), uintptr(unsafe.Pointer(queue)), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(file)
		runtime.KeepAlive(queue)
		return __r0
	}
	iTryLockSpinlock = func(lock *SpinLock) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TryLockSpinlock, uintptr(unsafe.Pointer(lock)))
		__r0 := _r0 != 0
		runtime.KeepAlive(lock)
		return __r0
	}
	iLockSpinlock = func(lock *SpinLock) {
		purego.SyscallN(_addr_SDL_LockSpinlock, uintptr(unsafe.Pointer(lock)))
		runtime.KeepAlive(lock)
	}
	iUnlockSpinlock = func(lock *SpinLock) {
		purego.SyscallN(_addr_SDL_UnlockSpinlock, uintptr(unsafe.Pointer(lock)))
		runtime.KeepAlive(lock)
	}
	iMemoryBarrierReleaseFunction = func() {
		purego.SyscallN(_addr_SDL_MemoryBarrierReleaseFunction)
	}
	iMemoryBarrierAcquireFunction = func() {
		purego.SyscallN(_addr_SDL_MemoryBarrierAcquireFunction)
	}
	iCompareAndSwapAtomicInt = func(a *AtomicInt, oldval int32, newval int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CompareAndSwapAtomicInt, uintptr(unsafe.Pointer(a)), uintptr(oldval), uintptr(newval))
		__r0 := _r0 != 0
		runtime.KeepAlive(a)
		return __r0
	}
	iSetAtomicInt = func(a *AtomicInt, v int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAtomicInt, uintptr(unsafe.Pointer(a)), uintptr(v))
		__r0 := int32(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iGetAtomicInt = func(a *AtomicInt) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAtomicInt, uintptr(unsafe.Pointer(a)))
		__r0 := int32(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iAddAtomicInt = func(a *AtomicInt, v int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddAtomicInt, uintptr(unsafe.Pointer(a)), uintptr(v))
		__r0 := int32(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iCompareAndSwapAtomicU32 = func(a *AtomicU32, oldval uint32, newval uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CompareAndSwapAtomicU32, uintptr(unsafe.Pointer(a)), uintptr(oldval), uintptr(newval))
		__r0 := _r0 != 0
		runtime.KeepAlive(a)
		return __r0
	}
	iSetAtomicU32 = func(a *AtomicU32, v uint32) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAtomicU32, uintptr(unsafe.Pointer(a)), uintptr(v))
		__r0 := uint32(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iGetAtomicU32 = func(a *AtomicU32) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAtomicU32, uintptr(unsafe.Pointer(a)))
		__r0 := uint32(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iCompareAndSwapAtomicPointer = func(a *uintptr, oldval uintptr, newval uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CompareAndSwapAtomicPointer, uintptr(unsafe.Pointer(a)), uintptr(oldval), uintptr(newval))
		__r0 := _r0 != 0
		runtime.KeepAlive(a)
		return __r0
	}
	iSetAtomicPointer = func(a *uintptr, v uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAtomicPointer, uintptr(unsafe.Pointer(a)), uintptr(v))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iGetAtomicPointer = func(a *uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAtomicPointer, uintptr(unsafe.Pointer(a)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(a)
		return __r0
	}
	iSetError = func(fmt string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetError, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		__r0 := _r0 != 0
		runtime.KeepAlive(fmt)
		return __r0
	}
	iSetErrorV = func(fmt string, ap va_list) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetErrorV, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))), uintptr(ap))
		__r0 := _r0 != 0
		runtime.KeepAlive(fmt)
		return __r0
	}
	iOutOfMemory = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OutOfMemory)
		__r0 := _r0 != 0
		return __r0
	}
	iGetError = func() string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetError)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iClearError = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClearError)
		__r0 := _r0 != 0
		return __r0
	}
	iGetGlobalProperties = func() PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGlobalProperties)
		__r0 := PropertiesID(_r0)
		return __r0
	}
	iCreateProperties = func() PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateProperties)
		__r0 := PropertiesID(_r0)
		return __r0
	}
	iCopyProperties = func(src PropertiesID, dst PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CopyProperties, uintptr(src), uintptr(dst))
		__r0 := _r0 != 0
		return __r0
	}
	iLockProperties = func(props PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LockProperties, uintptr(props))
		__r0 := _r0 != 0
		return __r0
	}
	iUnlockProperties = func(props PropertiesID) {
		purego.SyscallN(_addr_SDL_UnlockProperties, uintptr(props))
	}
	iSetPointerPropertyWithCleanup = func(props PropertiesID, name string, value uintptr, cleanup CleanupPropertyCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetPointerPropertyWithCleanup, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(value), uintptr(cleanup), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iSetPointerProperty = func(props PropertiesID, name string, value uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetPointerProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iSetStringProperty = func(props PropertiesID, name string, value string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetStringProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(value))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		runtime.KeepAlive(value)
		return __r0
	}
	iSetNumberProperty = func(props PropertiesID, name string, value int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetNumberProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	purego.RegisterLibFunc(&iSetFloatProperty, _hnd_sdl, "SDL_SetFloatProperty")
	iSetBooleanProperty = func(props PropertiesID, name string, value bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetBooleanProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), puregogen.BoolToUintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iHasProperty = func(props PropertiesID, name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iGetPropertyType = func(props PropertiesID, name string) PropertyType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPropertyType, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := PropertyType(_r0)
		runtime.KeepAlive(name)
		return __r0
	}
	iGetPointerProperty = func(props PropertiesID, name string, default_value uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPointerProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(default_value))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(name)
		return __r0
	}
	iGetStringProperty = func(props PropertiesID, name string, default_value string) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetStringProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(default_value))))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(name)
		runtime.KeepAlive(default_value)
		return __r0
	}
	iGetNumberProperty = func(props PropertiesID, name string, default_value int64) int64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumberProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(default_value))
		__r0 := int64(_r0)
		runtime.KeepAlive(name)
		return __r0
	}
	purego.RegisterLibFunc(&iGetFloatProperty, _hnd_sdl, "SDL_GetFloatProperty")
	iGetBooleanProperty = func(props PropertiesID, name string, default_value bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetBooleanProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), puregogen.BoolToUintptr(default_value))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iClearProperty = func(props PropertiesID, name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClearProperty, uintptr(props), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iEnumerateProperties = func(props PropertiesID, callback EnumeratePropertiesCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EnumerateProperties, uintptr(props), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		return __r0
	}
	iDestroyProperties = func(props PropertiesID) {
		purego.SyscallN(_addr_SDL_DestroyProperties, uintptr(props))
	}
	iGetThreadName = func(thread *Thread) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetThreadName, uintptr(unsafe.Pointer(thread)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(thread)
		return __r0
	}
	iGetCurrentThreadID = func() ThreadID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentThreadID)
		__r0 := ThreadID(_r0)
		return __r0
	}
	iGetThreadID = func(thread *Thread) ThreadID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetThreadID, uintptr(unsafe.Pointer(thread)))
		__r0 := ThreadID(_r0)
		runtime.KeepAlive(thread)
		return __r0
	}
	iSetCurrentThreadPriority = func(priority ThreadPriority) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetCurrentThreadPriority, uintptr(priority))
		__r0 := _r0 != 0
		return __r0
	}
	iWaitThread = func(thread *Thread, status *int32) {
		purego.SyscallN(_addr_SDL_WaitThread, uintptr(unsafe.Pointer(thread)), uintptr(unsafe.Pointer(status)))
		runtime.KeepAlive(thread)
		runtime.KeepAlive(status)
	}
	iGetThreadState = func(thread *Thread) ThreadState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetThreadState, uintptr(unsafe.Pointer(thread)))
		__r0 := ThreadState(_r0)
		runtime.KeepAlive(thread)
		return __r0
	}
	iDetachThread = func(thread *Thread) {
		purego.SyscallN(_addr_SDL_DetachThread, uintptr(unsafe.Pointer(thread)))
		runtime.KeepAlive(thread)
	}
	iGetTLS = func(id *TLSID) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTLS, uintptr(unsafe.Pointer(id)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(id)
		return __r0
	}
	iSetTLS = func(id *TLSID, value uintptr, destructor TLSDestructorCallback) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTLS, uintptr(unsafe.Pointer(id)), uintptr(value), uintptr(destructor))
		__r0 := _r0 != 0
		runtime.KeepAlive(id)
		return __r0
	}
	iCleanupTLS = func() {
		purego.SyscallN(_addr_SDL_CleanupTLS)
	}
	iCreateMutex = func() *Mutex {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateMutex)
		__r0 := (*Mutex)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iLockMutex = func(mutex *Mutex) {
		purego.SyscallN(_addr_SDL_LockMutex, uintptr(unsafe.Pointer(mutex)))
		runtime.KeepAlive(mutex)
	}
	iTryLockMutex = func(mutex *Mutex) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TryLockMutex, uintptr(unsafe.Pointer(mutex)))
		__r0 := _r0 != 0
		runtime.KeepAlive(mutex)
		return __r0
	}
	iUnlockMutex = func(mutex *Mutex) {
		purego.SyscallN(_addr_SDL_UnlockMutex, uintptr(unsafe.Pointer(mutex)))
		runtime.KeepAlive(mutex)
	}
	iDestroyMutex = func(mutex *Mutex) {
		purego.SyscallN(_addr_SDL_DestroyMutex, uintptr(unsafe.Pointer(mutex)))
		runtime.KeepAlive(mutex)
	}
	iCreateRWLock = func() *RWLock {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateRWLock)
		__r0 := (*RWLock)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iLockRWLockForReading = func(rwlock *RWLock) {
		purego.SyscallN(_addr_SDL_LockRWLockForReading, uintptr(unsafe.Pointer(rwlock)))
		runtime.KeepAlive(rwlock)
	}
	iLockRWLockForWriting = func(rwlock *RWLock) {
		purego.SyscallN(_addr_SDL_LockRWLockForWriting, uintptr(unsafe.Pointer(rwlock)))
		runtime.KeepAlive(rwlock)
	}
	iTryLockRWLockForReading = func(rwlock *RWLock) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TryLockRWLockForReading, uintptr(unsafe.Pointer(rwlock)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rwlock)
		return __r0
	}
	iTryLockRWLockForWriting = func(rwlock *RWLock) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TryLockRWLockForWriting, uintptr(unsafe.Pointer(rwlock)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rwlock)
		return __r0
	}
	iUnlockRWLock = func(rwlock *RWLock) {
		purego.SyscallN(_addr_SDL_UnlockRWLock, uintptr(unsafe.Pointer(rwlock)))
		runtime.KeepAlive(rwlock)
	}
	iDestroyRWLock = func(rwlock *RWLock) {
		purego.SyscallN(_addr_SDL_DestroyRWLock, uintptr(unsafe.Pointer(rwlock)))
		runtime.KeepAlive(rwlock)
	}
	iCreateSemaphore = func(initial_value uint32) *Semaphore {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSemaphore, uintptr(initial_value))
		__r0 := (*Semaphore)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroySemaphore = func(sem *Semaphore) {
		purego.SyscallN(_addr_SDL_DestroySemaphore, uintptr(unsafe.Pointer(sem)))
		runtime.KeepAlive(sem)
	}
	iWaitSemaphore = func(sem *Semaphore) {
		purego.SyscallN(_addr_SDL_WaitSemaphore, uintptr(unsafe.Pointer(sem)))
		runtime.KeepAlive(sem)
	}
	iTryWaitSemaphore = func(sem *Semaphore) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TryWaitSemaphore, uintptr(unsafe.Pointer(sem)))
		__r0 := _r0 != 0
		runtime.KeepAlive(sem)
		return __r0
	}
	iWaitSemaphoreTimeout = func(sem *Semaphore, timeoutMS int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitSemaphoreTimeout, uintptr(unsafe.Pointer(sem)), uintptr(timeoutMS))
		__r0 := _r0 != 0
		runtime.KeepAlive(sem)
		return __r0
	}
	iSignalSemaphore = func(sem *Semaphore) {
		purego.SyscallN(_addr_SDL_SignalSemaphore, uintptr(unsafe.Pointer(sem)))
		runtime.KeepAlive(sem)
	}
	iGetSemaphoreValue = func(sem *Semaphore) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSemaphoreValue, uintptr(unsafe.Pointer(sem)))
		__r0 := uint32(_r0)
		runtime.KeepAlive(sem)
		return __r0
	}
	iCreateCondition = func() *Condition {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateCondition)
		__r0 := (*Condition)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroyCondition = func(cond *Condition) {
		purego.SyscallN(_addr_SDL_DestroyCondition, uintptr(unsafe.Pointer(cond)))
		runtime.KeepAlive(cond)
	}
	iSignalCondition = func(cond *Condition) {
		purego.SyscallN(_addr_SDL_SignalCondition, uintptr(unsafe.Pointer(cond)))
		runtime.KeepAlive(cond)
	}
	iBroadcastCondition = func(cond *Condition) {
		purego.SyscallN(_addr_SDL_BroadcastCondition, uintptr(unsafe.Pointer(cond)))
		runtime.KeepAlive(cond)
	}
	iWaitCondition = func(cond *Condition, mutex *Mutex) {
		purego.SyscallN(_addr_SDL_WaitCondition, uintptr(unsafe.Pointer(cond)), uintptr(unsafe.Pointer(mutex)))
		runtime.KeepAlive(cond)
		runtime.KeepAlive(mutex)
	}
	iWaitConditionTimeout = func(cond *Condition, mutex *Mutex, timeoutMS int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitConditionTimeout, uintptr(unsafe.Pointer(cond)), uintptr(unsafe.Pointer(mutex)), uintptr(timeoutMS))
		__r0 := _r0 != 0
		runtime.KeepAlive(cond)
		runtime.KeepAlive(mutex)
		return __r0
	}
	iShouldInit = func(state *InitState) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShouldInit, uintptr(unsafe.Pointer(state)))
		__r0 := _r0 != 0
		runtime.KeepAlive(state)
		return __r0
	}
	iShouldQuit = func(state *InitState) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShouldQuit, uintptr(unsafe.Pointer(state)))
		__r0 := _r0 != 0
		runtime.KeepAlive(state)
		return __r0
	}
	iSetInitialized = func(state *InitState, initialized bool) {
		purego.SyscallN(_addr_SDL_SetInitialized, uintptr(unsafe.Pointer(state)), puregogen.BoolToUintptr(initialized))
		runtime.KeepAlive(state)
	}
	iIOFromFile = func(file string, mode string) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOFromFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mode))))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(file)
		runtime.KeepAlive(mode)
		return __r0
	}
	iIOFromMem = func(mem uintptr, size uintptr) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOFromMem, uintptr(mem), uintptr(size))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iIOFromConstMem = func(mem uintptr, size uintptr) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOFromConstMem, uintptr(mem), uintptr(size))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iIOFromDynamicMem = func() *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOFromDynamicMem)
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iOpenIO = func(iface *IOStreamInterface, userdata uintptr) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenIO, uintptr(unsafe.Pointer(iface)), uintptr(userdata))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(iface)
		return __r0
	}
	iCloseIO = func(context *IOStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CloseIO, uintptr(unsafe.Pointer(context)))
		__r0 := _r0 != 0
		runtime.KeepAlive(context)
		return __r0
	}
	iGetIOProperties = func(context *IOStream) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetIOProperties, uintptr(unsafe.Pointer(context)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iGetIOStatus = func(context *IOStream) IOStatus {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetIOStatus, uintptr(unsafe.Pointer(context)))
		__r0 := IOStatus(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iGetIOSize = func(context *IOStream) int64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetIOSize, uintptr(unsafe.Pointer(context)))
		__r0 := int64(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iSeekIO = func(context *IOStream, offset int64, whence IOWhence) int64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SeekIO, uintptr(unsafe.Pointer(context)), uintptr(offset), uintptr(whence))
		__r0 := int64(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iTellIO = func(context *IOStream) int64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TellIO, uintptr(unsafe.Pointer(context)))
		__r0 := int64(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iReadIO = func(context *IOStream, ptr uintptr, size uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadIO, uintptr(unsafe.Pointer(context)), uintptr(ptr), uintptr(size))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iWriteIO = func(context *IOStream, ptr uintptr, size uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteIO, uintptr(unsafe.Pointer(context)), uintptr(ptr), uintptr(size))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(context)
		return __r0
	}
	iIOprintf = func(context *IOStream, fmt string) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOprintf, uintptr(unsafe.Pointer(context)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(context)
		runtime.KeepAlive(fmt)
		return __r0
	}
	iIOvprintf = func(context *IOStream, fmt string, ap va_list) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IOvprintf, uintptr(unsafe.Pointer(context)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))), uintptr(ap))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(context)
		runtime.KeepAlive(fmt)
		return __r0
	}
	iFlushIO = func(context *IOStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FlushIO, uintptr(unsafe.Pointer(context)))
		__r0 := _r0 != 0
		runtime.KeepAlive(context)
		return __r0
	}
	iLoadFile_IO = func(src *IOStream, datasize *uintptr, closeio bool) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadFile_IO, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(datasize)), puregogen.BoolToUintptr(closeio))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(src)
		runtime.KeepAlive(datasize)
		return __r0
	}
	iLoadFile = func(file string, datasize *uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))), uintptr(unsafe.Pointer(datasize)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(file)
		runtime.KeepAlive(datasize)
		return __r0
	}
	iSaveFile_IO = func(src *IOStream, data uintptr, datasize uintptr, closeio bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SaveFile_IO, uintptr(unsafe.Pointer(src)), uintptr(data), uintptr(datasize), puregogen.BoolToUintptr(closeio))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		return __r0
	}
	iSaveFile = func(file string, data uintptr, datasize uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SaveFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))), uintptr(data), uintptr(datasize))
		__r0 := _r0 != 0
		runtime.KeepAlive(file)
		return __r0
	}
	iReadU8 = func(src *IOStream, value *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU8, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS8 = func(src *IOStream, value *int8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS8, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU16LE = func(src *IOStream, value *uint16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU16LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS16LE = func(src *IOStream, value *int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS16LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU16BE = func(src *IOStream, value *uint16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU16BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS16BE = func(src *IOStream, value *int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS16BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU32LE = func(src *IOStream, value *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU32LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS32LE = func(src *IOStream, value *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS32LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU32BE = func(src *IOStream, value *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU32BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS32BE = func(src *IOStream, value *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS32BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU64LE = func(src *IOStream, value *uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU64LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS64LE = func(src *IOStream, value *int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS64LE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadU64BE = func(src *IOStream, value *uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadU64BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iReadS64BE = func(src *IOStream, value *int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadS64BE, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(value)
		return __r0
	}
	iWriteU8 = func(dst *IOStream, value uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU8, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS8 = func(dst *IOStream, value int8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS8, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU16LE = func(dst *IOStream, value uint16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU16LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS16LE = func(dst *IOStream, value int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS16LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU16BE = func(dst *IOStream, value uint16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU16BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS16BE = func(dst *IOStream, value int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS16BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU32LE = func(dst *IOStream, value uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU32LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS32LE = func(dst *IOStream, value int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS32LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU32BE = func(dst *IOStream, value uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU32BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS32BE = func(dst *IOStream, value int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS32BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU64LE = func(dst *IOStream, value uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU64LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS64LE = func(dst *IOStream, value int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS64LE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteU64BE = func(dst *IOStream, value uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteU64BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iWriteS64BE = func(dst *IOStream, value int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteS64BE, uintptr(unsafe.Pointer(dst)), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		return __r0
	}
	iGetNumAudioDrivers = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumAudioDrivers)
		__r0 := int32(_r0)
		return __r0
	}
	iGetAudioDriver = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioDriver, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCurrentAudioDriver = func() string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentAudioDriver)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetAudioPlaybackDevices = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioPlaybackDevices, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetAudioRecordingDevices = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioRecordingDevices, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetAudioDeviceName = func(devid AudioDeviceID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioDeviceName, uintptr(devid))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetAudioDeviceFormat = func(devid AudioDeviceID, spec *AudioSpec, sample_frames *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioDeviceFormat, uintptr(devid), uintptr(unsafe.Pointer(spec)), uintptr(unsafe.Pointer(sample_frames)))
		__r0 := _r0 != 0
		runtime.KeepAlive(spec)
		runtime.KeepAlive(sample_frames)
		return __r0
	}
	iGetAudioDeviceChannelMap = func(devid AudioDeviceID, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioDeviceChannelMap, uintptr(devid), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iOpenAudioDevice = func(devid AudioDeviceID, spec *AudioSpec) AudioDeviceID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenAudioDevice, uintptr(devid), uintptr(unsafe.Pointer(spec)))
		__r0 := AudioDeviceID(_r0)
		runtime.KeepAlive(spec)
		return __r0
	}
	iIsAudioDevicePhysical = func(devid AudioDeviceID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsAudioDevicePhysical, uintptr(devid))
		__r0 := _r0 != 0
		return __r0
	}
	iIsAudioDevicePlayback = func(devid AudioDeviceID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsAudioDevicePlayback, uintptr(devid))
		__r0 := _r0 != 0
		return __r0
	}
	iPauseAudioDevice = func(devid AudioDeviceID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PauseAudioDevice, uintptr(devid))
		__r0 := _r0 != 0
		return __r0
	}
	iResumeAudioDevice = func(devid AudioDeviceID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ResumeAudioDevice, uintptr(devid))
		__r0 := _r0 != 0
		return __r0
	}
	iAudioDevicePaused = func(devid AudioDeviceID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AudioDevicePaused, uintptr(devid))
		__r0 := _r0 != 0
		return __r0
	}
	purego.RegisterLibFunc(&iGetAudioDeviceGain, _hnd_sdl, "SDL_GetAudioDeviceGain")
	purego.RegisterLibFunc(&iSetAudioDeviceGain, _hnd_sdl, "SDL_SetAudioDeviceGain")
	iCloseAudioDevice = func(devid AudioDeviceID) {
		purego.SyscallN(_addr_SDL_CloseAudioDevice, uintptr(devid))
	}
	iBindAudioStreams = func(devid AudioDeviceID, streams **AudioStream, num_streams int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BindAudioStreams, uintptr(devid), uintptr(unsafe.Pointer(streams)), uintptr(num_streams))
		__r0 := _r0 != 0
		runtime.KeepAlive(streams)
		return __r0
	}
	iBindAudioStream = func(devid AudioDeviceID, stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BindAudioStream, uintptr(devid), uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iUnbindAudioStreams = func(streams **AudioStream, num_streams int32) {
		purego.SyscallN(_addr_SDL_UnbindAudioStreams, uintptr(unsafe.Pointer(streams)), uintptr(num_streams))
		runtime.KeepAlive(streams)
	}
	iUnbindAudioStream = func(stream *AudioStream) {
		purego.SyscallN(_addr_SDL_UnbindAudioStream, uintptr(unsafe.Pointer(stream)))
		runtime.KeepAlive(stream)
	}
	iGetAudioStreamDevice = func(stream *AudioStream) AudioDeviceID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamDevice, uintptr(unsafe.Pointer(stream)))
		__r0 := AudioDeviceID(_r0)
		runtime.KeepAlive(stream)
		return __r0
	}
	iCreateAudioStream = func(src_spec *AudioSpec, dst_spec *AudioSpec) *AudioStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateAudioStream, uintptr(unsafe.Pointer(src_spec)), uintptr(unsafe.Pointer(dst_spec)))
		__r0 := (*AudioStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(src_spec)
		runtime.KeepAlive(dst_spec)
		return __r0
	}
	iGetAudioStreamProperties = func(stream *AudioStream) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamProperties, uintptr(unsafe.Pointer(stream)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(stream)
		return __r0
	}
	iGetAudioStreamFormat = func(stream *AudioStream, src_spec *AudioSpec, dst_spec *AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamFormat, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(src_spec)), uintptr(unsafe.Pointer(dst_spec)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		runtime.KeepAlive(src_spec)
		runtime.KeepAlive(dst_spec)
		return __r0
	}
	iSetAudioStreamFormat = func(stream *AudioStream, src_spec *AudioSpec, dst_spec *AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioStreamFormat, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(src_spec)), uintptr(unsafe.Pointer(dst_spec)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		runtime.KeepAlive(src_spec)
		runtime.KeepAlive(dst_spec)
		return __r0
	}
	purego.RegisterLibFunc(&iGetAudioStreamFrequencyRatio, _hnd_sdl, "SDL_GetAudioStreamFrequencyRatio")
	purego.RegisterLibFunc(&iSetAudioStreamFrequencyRatio, _hnd_sdl, "SDL_SetAudioStreamFrequencyRatio")
	purego.RegisterLibFunc(&iGetAudioStreamGain, _hnd_sdl, "SDL_GetAudioStreamGain")
	purego.RegisterLibFunc(&iSetAudioStreamGain, _hnd_sdl, "SDL_SetAudioStreamGain")
	iGetAudioStreamInputChannelMap = func(stream *AudioStream, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamInputChannelMap, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(stream)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetAudioStreamOutputChannelMap = func(stream *AudioStream, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamOutputChannelMap, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(stream)
		runtime.KeepAlive(count)
		return __r0
	}
	iSetAudioStreamInputChannelMap = func(stream *AudioStream, chmap *int32, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioStreamInputChannelMap, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(chmap)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		runtime.KeepAlive(chmap)
		return __r0
	}
	iSetAudioStreamOutputChannelMap = func(stream *AudioStream, chmap *int32, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioStreamOutputChannelMap, uintptr(unsafe.Pointer(stream)), uintptr(unsafe.Pointer(chmap)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		runtime.KeepAlive(chmap)
		return __r0
	}
	iPutAudioStreamData = func(stream *AudioStream, buf uintptr, len int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PutAudioStreamData, uintptr(unsafe.Pointer(stream)), uintptr(buf), uintptr(len))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iGetAudioStreamData = func(stream *AudioStream, buf uintptr, len int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamData, uintptr(unsafe.Pointer(stream)), uintptr(buf), uintptr(len))
		__r0 := int32(_r0)
		runtime.KeepAlive(stream)
		return __r0
	}
	iGetAudioStreamAvailable = func(stream *AudioStream) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamAvailable, uintptr(unsafe.Pointer(stream)))
		__r0 := int32(_r0)
		runtime.KeepAlive(stream)
		return __r0
	}
	iGetAudioStreamQueued = func(stream *AudioStream) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioStreamQueued, uintptr(unsafe.Pointer(stream)))
		__r0 := int32(_r0)
		runtime.KeepAlive(stream)
		return __r0
	}
	iFlushAudioStream = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FlushAudioStream, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iClearAudioStream = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClearAudioStream, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iPauseAudioStreamDevice = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PauseAudioStreamDevice, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iResumeAudioStreamDevice = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ResumeAudioStreamDevice, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iAudioStreamDevicePaused = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AudioStreamDevicePaused, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iLockAudioStream = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LockAudioStream, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iUnlockAudioStream = func(stream *AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UnlockAudioStream, uintptr(unsafe.Pointer(stream)))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iSetAudioStreamGetCallback = func(stream *AudioStream, callback AudioStreamCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioStreamGetCallback, uintptr(unsafe.Pointer(stream)), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iSetAudioStreamPutCallback = func(stream *AudioStream, callback AudioStreamCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioStreamPutCallback, uintptr(unsafe.Pointer(stream)), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(stream)
		return __r0
	}
	iDestroyAudioStream = func(stream *AudioStream) {
		purego.SyscallN(_addr_SDL_DestroyAudioStream, uintptr(unsafe.Pointer(stream)))
		runtime.KeepAlive(stream)
	}
	iOpenAudioDeviceStream = func(devid AudioDeviceID, spec *AudioSpec, callback AudioStreamCallback, userdata uintptr) *AudioStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenAudioDeviceStream, uintptr(devid), uintptr(unsafe.Pointer(spec)), uintptr(callback), uintptr(userdata))
		__r0 := (*AudioStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(spec)
		return __r0
	}
	iSetAudioPostmixCallback = func(devid AudioDeviceID, callback AudioPostmixCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAudioPostmixCallback, uintptr(devid), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		return __r0
	}
	iLoadWAV_IO = func(src *IOStream, closeio bool, spec *AudioSpec, audio_buf **uint8, audio_len *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadWAV_IO, uintptr(unsafe.Pointer(src)), puregogen.BoolToUintptr(closeio), uintptr(unsafe.Pointer(spec)), uintptr(unsafe.Pointer(audio_buf)), uintptr(unsafe.Pointer(audio_len)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(spec)
		runtime.KeepAlive(audio_buf)
		runtime.KeepAlive(audio_len)
		return __r0
	}
	iLoadWAV = func(path string, spec *AudioSpec, audio_buf **uint8, audio_len *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadWAV, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(spec)), uintptr(unsafe.Pointer(audio_buf)), uintptr(unsafe.Pointer(audio_len)))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		runtime.KeepAlive(spec)
		runtime.KeepAlive(audio_buf)
		runtime.KeepAlive(audio_len)
		return __r0
	}
	purego.RegisterLibFunc(&iMixAudio, _hnd_sdl, "SDL_MixAudio")
	iConvertAudioSamples = func(src_spec *AudioSpec, src_data *uint8, src_len int32, dst_spec *AudioSpec, dst_data **uint8, dst_len *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertAudioSamples, uintptr(unsafe.Pointer(src_spec)), uintptr(unsafe.Pointer(src_data)), uintptr(src_len), uintptr(unsafe.Pointer(dst_spec)), uintptr(unsafe.Pointer(dst_data)), uintptr(unsafe.Pointer(dst_len)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src_spec)
		runtime.KeepAlive(src_data)
		runtime.KeepAlive(dst_spec)
		runtime.KeepAlive(dst_data)
		runtime.KeepAlive(dst_len)
		return __r0
	}
	iGetAudioFormatName = func(format AudioFormat) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAudioFormatName, uintptr(format))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetSilenceValueForFormat = func(format AudioFormat) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSilenceValueForFormat, uintptr(format))
		__r0 := int32(_r0)
		return __r0
	}
	iComposeCustomBlendMode = func(srcColorFactor BlendFactor, dstColorFactor BlendFactor, colorOperation BlendOperation, srcAlphaFactor BlendFactor, dstAlphaFactor BlendFactor, alphaOperation BlendOperation) BlendMode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ComposeCustomBlendMode, uintptr(srcColorFactor), uintptr(dstColorFactor), uintptr(colorOperation), uintptr(srcAlphaFactor), uintptr(dstAlphaFactor), uintptr(alphaOperation))
		__r0 := BlendMode(_r0)
		return __r0
	}
	iGetPixelFormatName = func(format PixelFormat) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPixelFormatName, uintptr(format))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetMasksForPixelFormat = func(format PixelFormat, bpp *int32, Rmask *uint32, Gmask *uint32, Bmask *uint32, Amask *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMasksForPixelFormat, uintptr(format), uintptr(unsafe.Pointer(bpp)), uintptr(unsafe.Pointer(Rmask)), uintptr(unsafe.Pointer(Gmask)), uintptr(unsafe.Pointer(Bmask)), uintptr(unsafe.Pointer(Amask)))
		__r0 := _r0 != 0
		runtime.KeepAlive(bpp)
		runtime.KeepAlive(Rmask)
		runtime.KeepAlive(Gmask)
		runtime.KeepAlive(Bmask)
		runtime.KeepAlive(Amask)
		return __r0
	}
	iGetPixelFormatForMasks = func(bpp int32, Rmask uint32, Gmask uint32, Bmask uint32, Amask uint32) PixelFormat {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPixelFormatForMasks, uintptr(bpp), uintptr(Rmask), uintptr(Gmask), uintptr(Bmask), uintptr(Amask))
		__r0 := PixelFormat(_r0)
		return __r0
	}
	iGetPixelFormatDetails = func(format PixelFormat) *PixelFormatDetails {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPixelFormatDetails, uintptr(format))
		__r0 := (*PixelFormatDetails)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreatePalette = func(ncolors int32) *Palette {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreatePalette, uintptr(ncolors))
		__r0 := (*Palette)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetPaletteColors = func(palette *Palette, colors *Color, firstcolor int32, ncolors int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetPaletteColors, uintptr(unsafe.Pointer(palette)), uintptr(unsafe.Pointer(colors)), uintptr(firstcolor), uintptr(ncolors))
		__r0 := _r0 != 0
		runtime.KeepAlive(palette)
		runtime.KeepAlive(colors)
		return __r0
	}
	iDestroyPalette = func(palette *Palette) {
		purego.SyscallN(_addr_SDL_DestroyPalette, uintptr(unsafe.Pointer(palette)))
		runtime.KeepAlive(palette)
	}
	iMapRGB = func(format *PixelFormatDetails, palette *Palette, r uint8, g uint8, b uint8) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MapRGB, uintptr(unsafe.Pointer(format)), uintptr(unsafe.Pointer(palette)), uintptr(r), uintptr(g), uintptr(b))
		__r0 := uint32(_r0)
		runtime.KeepAlive(format)
		runtime.KeepAlive(palette)
		return __r0
	}
	iMapRGBA = func(format *PixelFormatDetails, palette *Palette, r uint8, g uint8, b uint8, a uint8) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MapRGBA, uintptr(unsafe.Pointer(format)), uintptr(unsafe.Pointer(palette)), uintptr(r), uintptr(g), uintptr(b), uintptr(a))
		__r0 := uint32(_r0)
		runtime.KeepAlive(format)
		runtime.KeepAlive(palette)
		return __r0
	}
	iGetRGB = func(pixel uint32, format *PixelFormatDetails, palette *Palette, r *uint8, g *uint8, b *uint8) {
		purego.SyscallN(_addr_SDL_GetRGB, uintptr(pixel), uintptr(unsafe.Pointer(format)), uintptr(unsafe.Pointer(palette)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)))
		runtime.KeepAlive(format)
		runtime.KeepAlive(palette)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
	}
	iGetRGBA = func(pixel uint32, format *PixelFormatDetails, palette *Palette, r *uint8, g *uint8, b *uint8, a *uint8) {
		purego.SyscallN(_addr_SDL_GetRGBA, uintptr(pixel), uintptr(unsafe.Pointer(format)), uintptr(unsafe.Pointer(palette)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)), uintptr(unsafe.Pointer(a)))
		runtime.KeepAlive(format)
		runtime.KeepAlive(palette)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		runtime.KeepAlive(a)
	}
	iHasRectIntersection = func(A *Rect, B *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasRectIntersection, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		return __r0
	}
	iGetRectIntersection = func(A *Rect, B *Rect, result *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectIntersection, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectUnion = func(A *Rect, B *Rect, result *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectUnion, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectEnclosingPoints = func(points *Point, count int32, clip *Rect, result *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectEnclosingPoints, uintptr(unsafe.Pointer(points)), uintptr(count), uintptr(unsafe.Pointer(clip)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(points)
		runtime.KeepAlive(clip)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectAndLineIntersection = func(rect *Rect, X1 *int32, Y1 *int32, X2 *int32, Y2 *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectAndLineIntersection, uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(X1)), uintptr(unsafe.Pointer(Y1)), uintptr(unsafe.Pointer(X2)), uintptr(unsafe.Pointer(Y2)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rect)
		runtime.KeepAlive(X1)
		runtime.KeepAlive(Y1)
		runtime.KeepAlive(X2)
		runtime.KeepAlive(Y2)
		return __r0
	}
	iHasRectIntersectionFloat = func(A *FRect, B *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasRectIntersectionFloat, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		return __r0
	}
	iGetRectIntersectionFloat = func(A *FRect, B *FRect, result *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectIntersectionFloat, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectUnionFloat = func(A *FRect, B *FRect, result *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectUnionFloat, uintptr(unsafe.Pointer(A)), uintptr(unsafe.Pointer(B)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(A)
		runtime.KeepAlive(B)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectEnclosingPointsFloat = func(points *FPoint, count int32, clip *FRect, result *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectEnclosingPointsFloat, uintptr(unsafe.Pointer(points)), uintptr(count), uintptr(unsafe.Pointer(clip)), uintptr(unsafe.Pointer(result)))
		__r0 := _r0 != 0
		runtime.KeepAlive(points)
		runtime.KeepAlive(clip)
		runtime.KeepAlive(result)
		return __r0
	}
	iGetRectAndLineIntersectionFloat = func(rect *FRect, X1 *float32, Y1 *float32, X2 *float32, Y2 *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRectAndLineIntersectionFloat, uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(X1)), uintptr(unsafe.Pointer(Y1)), uintptr(unsafe.Pointer(X2)), uintptr(unsafe.Pointer(Y2)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rect)
		runtime.KeepAlive(X1)
		runtime.KeepAlive(Y1)
		runtime.KeepAlive(X2)
		runtime.KeepAlive(Y2)
		return __r0
	}
	iCreateSurface = func(width int32, height int32, format PixelFormat) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSurface, uintptr(width), uintptr(height), uintptr(format))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateSurfaceFrom = func(width int32, height int32, format PixelFormat, pixels uintptr, pitch int32) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSurfaceFrom, uintptr(width), uintptr(height), uintptr(format), uintptr(pixels), uintptr(pitch))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroySurface = func(surface *Surface) {
		purego.SyscallN(_addr_SDL_DestroySurface, uintptr(unsafe.Pointer(surface)))
		runtime.KeepAlive(surface)
	}
	iGetSurfaceProperties = func(surface *Surface) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceProperties, uintptr(unsafe.Pointer(surface)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(surface)
		return __r0
	}
	iSetSurfaceColorspace = func(surface *Surface, colorspace Colorspace) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceColorspace, uintptr(unsafe.Pointer(surface)), uintptr(colorspace))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceColorspace = func(surface *Surface) Colorspace {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceColorspace, uintptr(unsafe.Pointer(surface)))
		__r0 := Colorspace(_r0)
		runtime.KeepAlive(surface)
		return __r0
	}
	iCreateSurfacePalette = func(surface *Surface) *Palette {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSurfacePalette, uintptr(unsafe.Pointer(surface)))
		__r0 := (*Palette)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iSetSurfacePalette = func(surface *Surface, palette *Palette) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfacePalette, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(palette)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(palette)
		return __r0
	}
	iGetSurfacePalette = func(surface *Surface) *Palette {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfacePalette, uintptr(unsafe.Pointer(surface)))
		__r0 := (*Palette)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iAddSurfaceAlternateImage = func(surface *Surface, image *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddSurfaceAlternateImage, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(image)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(image)
		return __r0
	}
	iSurfaceHasAlternateImages = func(surface *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SurfaceHasAlternateImages, uintptr(unsafe.Pointer(surface)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceImages = func(surface *Surface, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceImages, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(surface)
		runtime.KeepAlive(count)
		return __r0
	}
	iRemoveSurfaceAlternateImages = func(surface *Surface) {
		purego.SyscallN(_addr_SDL_RemoveSurfaceAlternateImages, uintptr(unsafe.Pointer(surface)))
		runtime.KeepAlive(surface)
	}
	iLockSurface = func(surface *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LockSurface, uintptr(unsafe.Pointer(surface)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iUnlockSurface = func(surface *Surface) {
		purego.SyscallN(_addr_SDL_UnlockSurface, uintptr(unsafe.Pointer(surface)))
		runtime.KeepAlive(surface)
	}
	iLoadBMP_IO = func(src *IOStream, closeio bool) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadBMP_IO, uintptr(unsafe.Pointer(src)), puregogen.BoolToUintptr(closeio))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(src)
		return __r0
	}
	iLoadBMP = func(file string) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadBMP, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(file)
		return __r0
	}
	iSaveBMP_IO = func(surface *Surface, dst *IOStream, closeio bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SaveBMP_IO, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(dst)), puregogen.BoolToUintptr(closeio))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(dst)
		return __r0
	}
	iSaveBMP = func(surface *Surface, file string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SaveBMP, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(file)
		return __r0
	}
	iSetSurfaceRLE = func(surface *Surface, enabled bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceRLE, uintptr(unsafe.Pointer(surface)), puregogen.BoolToUintptr(enabled))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iSurfaceHasRLE = func(surface *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SurfaceHasRLE, uintptr(unsafe.Pointer(surface)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iSetSurfaceColorKey = func(surface *Surface, enabled bool, key uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceColorKey, uintptr(unsafe.Pointer(surface)), puregogen.BoolToUintptr(enabled), uintptr(key))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iSurfaceHasColorKey = func(surface *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SurfaceHasColorKey, uintptr(unsafe.Pointer(surface)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceColorKey = func(surface *Surface, key *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceColorKey, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(key)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(key)
		return __r0
	}
	iSetSurfaceColorMod = func(surface *Surface, r uint8, g uint8, b uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceColorMod, uintptr(unsafe.Pointer(surface)), uintptr(r), uintptr(g), uintptr(b))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceColorMod = func(surface *Surface, r *uint8, g *uint8, b *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceColorMod, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		return __r0
	}
	iSetSurfaceAlphaMod = func(surface *Surface, alpha uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceAlphaMod, uintptr(unsafe.Pointer(surface)), uintptr(alpha))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceAlphaMod = func(surface *Surface, alpha *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceAlphaMod, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(alpha)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(alpha)
		return __r0
	}
	iSetSurfaceBlendMode = func(surface *Surface, blendMode BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceBlendMode, uintptr(unsafe.Pointer(surface)), uintptr(blendMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetSurfaceBlendMode = func(surface *Surface, blendMode *BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceBlendMode, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(blendMode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(blendMode)
		return __r0
	}
	iSetSurfaceClipRect = func(surface *Surface, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetSurfaceClipRect, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetSurfaceClipRect = func(surface *Surface, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSurfaceClipRect, uintptr(unsafe.Pointer(surface)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(rect)
		return __r0
	}
	iFlipSurface = func(surface *Surface, flip FlipMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FlipSurface, uintptr(unsafe.Pointer(surface)), uintptr(flip))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	iDuplicateSurface = func(surface *Surface) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_DuplicateSurface, uintptr(unsafe.Pointer(surface)))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iScaleSurface = func(surface *Surface, width int32, height int32, scaleMode ScaleMode) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ScaleSurface, uintptr(unsafe.Pointer(surface)), uintptr(width), uintptr(height), uintptr(scaleMode))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iConvertSurface = func(surface *Surface, format PixelFormat) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertSurface, uintptr(unsafe.Pointer(surface)), uintptr(format))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iConvertSurfaceAndColorspace = func(surface *Surface, format PixelFormat, palette *Palette, colorspace Colorspace, props PropertiesID) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertSurfaceAndColorspace, uintptr(unsafe.Pointer(surface)), uintptr(format), uintptr(unsafe.Pointer(palette)), uintptr(colorspace), uintptr(props))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		runtime.KeepAlive(palette)
		return __r0
	}
	iConvertPixels = func(width int32, height int32, src_format PixelFormat, src uintptr, src_pitch int32, dst_format PixelFormat, dst uintptr, dst_pitch int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertPixels, uintptr(width), uintptr(height), uintptr(src_format), uintptr(src), uintptr(src_pitch), uintptr(dst_format), uintptr(dst), uintptr(dst_pitch))
		__r0 := _r0 != 0
		return __r0
	}
	iConvertPixelsAndColorspace = func(width int32, height int32, src_format PixelFormat, src_colorspace Colorspace, src_properties PropertiesID, src uintptr, src_pitch int32, dst_format PixelFormat, dst_colorspace Colorspace, dst_properties PropertiesID, dst uintptr, dst_pitch int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertPixelsAndColorspace, uintptr(width), uintptr(height), uintptr(src_format), uintptr(src_colorspace), uintptr(src_properties), uintptr(src), uintptr(src_pitch), uintptr(dst_format), uintptr(dst_colorspace), uintptr(dst_properties), uintptr(dst), uintptr(dst_pitch))
		__r0 := _r0 != 0
		return __r0
	}
	iPremultiplyAlpha = func(width int32, height int32, src_format PixelFormat, src uintptr, src_pitch int32, dst_format PixelFormat, dst uintptr, dst_pitch int32, linear bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PremultiplyAlpha, uintptr(width), uintptr(height), uintptr(src_format), uintptr(src), uintptr(src_pitch), uintptr(dst_format), uintptr(dst), uintptr(dst_pitch), puregogen.BoolToUintptr(linear))
		__r0 := _r0 != 0
		return __r0
	}
	iPremultiplySurfaceAlpha = func(surface *Surface, linear bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PremultiplySurfaceAlpha, uintptr(unsafe.Pointer(surface)), puregogen.BoolToUintptr(linear))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	purego.RegisterLibFunc(&iClearSurface, _hnd_sdl, "SDL_ClearSurface")
	iFillSurfaceRect = func(dst *Surface, rect *Rect, color uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FillSurfaceRect, uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(rect)), uintptr(color))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		runtime.KeepAlive(rect)
		return __r0
	}
	iFillSurfaceRects = func(dst *Surface, rects *Rect, count int32, color uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FillSurfaceRects, uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(rects)), uintptr(count), uintptr(color))
		__r0 := _r0 != 0
		runtime.KeepAlive(dst)
		runtime.KeepAlive(rects)
		return __r0
	}
	iBlitSurface = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BlitSurface, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	iBlitSurfaceUnchecked = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BlitSurfaceUnchecked, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	iBlitSurfaceScaled = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BlitSurfaceScaled, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)), uintptr(scaleMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	iBlitSurfaceUncheckedScaled = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BlitSurfaceUncheckedScaled, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)), uintptr(scaleMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	iStretchSurface = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect, scaleMode ScaleMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StretchSurface, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)), uintptr(scaleMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	iBlitSurfaceTiled = func(src *Surface, srcrect *Rect, dst *Surface, dstrect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BlitSurfaceTiled, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dst)), uintptr(unsafe.Pointer(dstrect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(src)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dst)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	purego.RegisterLibFunc(&iBlitSurfaceTiledWithScale, _hnd_sdl, "SDL_BlitSurfaceTiledWithScale")
	purego.RegisterLibFunc(&iBlitSurface9Grid, _hnd_sdl, "SDL_BlitSurface9Grid")
	iMapSurfaceRGB = func(surface *Surface, r uint8, g uint8, b uint8) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MapSurfaceRGB, uintptr(unsafe.Pointer(surface)), uintptr(r), uintptr(g), uintptr(b))
		__r0 := uint32(_r0)
		runtime.KeepAlive(surface)
		return __r0
	}
	iMapSurfaceRGBA = func(surface *Surface, r uint8, g uint8, b uint8, a uint8) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MapSurfaceRGBA, uintptr(unsafe.Pointer(surface)), uintptr(r), uintptr(g), uintptr(b), uintptr(a))
		__r0 := uint32(_r0)
		runtime.KeepAlive(surface)
		return __r0
	}
	iReadSurfacePixel = func(surface *Surface, x int32, y int32, r *uint8, g *uint8, b *uint8, a *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadSurfacePixel, uintptr(unsafe.Pointer(surface)), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)), uintptr(unsafe.Pointer(a)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		runtime.KeepAlive(a)
		return __r0
	}
	iReadSurfacePixelFloat = func(surface *Surface, x int32, y int32, r *float32, g *float32, b *float32, a *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadSurfacePixelFloat, uintptr(unsafe.Pointer(surface)), uintptr(x), uintptr(y), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)), uintptr(unsafe.Pointer(a)))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		runtime.KeepAlive(a)
		return __r0
	}
	iWriteSurfacePixel = func(surface *Surface, x int32, y int32, r uint8, g uint8, b uint8, a uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteSurfacePixel, uintptr(unsafe.Pointer(surface)), uintptr(x), uintptr(y), uintptr(r), uintptr(g), uintptr(b), uintptr(a))
		__r0 := _r0 != 0
		runtime.KeepAlive(surface)
		return __r0
	}
	purego.RegisterLibFunc(&iWriteSurfacePixelFloat, _hnd_sdl, "SDL_WriteSurfacePixelFloat")
	iGetNumCameraDrivers = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumCameraDrivers)
		__r0 := int32(_r0)
		return __r0
	}
	iGetCameraDriver = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraDriver, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCurrentCameraDriver = func() string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentCameraDriver)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCameras = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameras, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetCameraSupportedFormats = func(instance_id CameraID, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraSupportedFormats, uintptr(instance_id), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetCameraName = func(instance_id CameraID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraName, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCameraPosition = func(instance_id CameraID) CameraPosition {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraPosition, uintptr(instance_id))
		__r0 := CameraPosition(_r0)
		return __r0
	}
	iOpenCamera = func(instance_id CameraID, spec *CameraSpec) *Camera {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenCamera, uintptr(instance_id), uintptr(unsafe.Pointer(spec)))
		__r0 := (*Camera)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(spec)
		return __r0
	}
	iGetCameraPermissionState = func(camera *Camera) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraPermissionState, uintptr(unsafe.Pointer(camera)))
		__r0 := int32(_r0)
		runtime.KeepAlive(camera)
		return __r0
	}
	iGetCameraID = func(camera *Camera) CameraID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraID, uintptr(unsafe.Pointer(camera)))
		__r0 := CameraID(_r0)
		runtime.KeepAlive(camera)
		return __r0
	}
	iGetCameraProperties = func(camera *Camera) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraProperties, uintptr(unsafe.Pointer(camera)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(camera)
		return __r0
	}
	iGetCameraFormat = func(camera *Camera, spec *CameraSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCameraFormat, uintptr(unsafe.Pointer(camera)), uintptr(unsafe.Pointer(spec)))
		__r0 := _r0 != 0
		runtime.KeepAlive(camera)
		runtime.KeepAlive(spec)
		return __r0
	}
	iAcquireCameraFrame = func(camera *Camera, timestampNS *uint64) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AcquireCameraFrame, uintptr(unsafe.Pointer(camera)), uintptr(unsafe.Pointer(timestampNS)))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(camera)
		runtime.KeepAlive(timestampNS)
		return __r0
	}
	iReleaseCameraFrame = func(camera *Camera, frame *Surface) {
		purego.SyscallN(_addr_SDL_ReleaseCameraFrame, uintptr(unsafe.Pointer(camera)), uintptr(unsafe.Pointer(frame)))
		runtime.KeepAlive(camera)
		runtime.KeepAlive(frame)
	}
	iCloseCamera = func(camera *Camera) {
		purego.SyscallN(_addr_SDL_CloseCamera, uintptr(unsafe.Pointer(camera)))
		runtime.KeepAlive(camera)
	}
	iSetClipboardText = func(text string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetClipboardText, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text))))
		__r0 := _r0 != 0
		runtime.KeepAlive(text)
		return __r0
	}
	iGetClipboardText = func() uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetClipboardText)
		__r0 := uintptr(_r0)
		return __r0
	}
	iHasClipboardText = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasClipboardText)
		__r0 := _r0 != 0
		return __r0
	}
	iSetPrimarySelectionText = func(text string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetPrimarySelectionText, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text))))
		__r0 := _r0 != 0
		runtime.KeepAlive(text)
		return __r0
	}
	iGetPrimarySelectionText = func() uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPrimarySelectionText)
		__r0 := uintptr(_r0)
		return __r0
	}
	iHasPrimarySelectionText = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasPrimarySelectionText)
		__r0 := _r0 != 0
		return __r0
	}
	iSetClipboardData = func(callback ClipboardDataCallback, cleanup ClipboardCleanupCallback, userdata uintptr, mime_types *string, num_mime_types uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetClipboardData, uintptr(callback), uintptr(cleanup), uintptr(userdata), uintptr(unsafe.Pointer(mime_types)), uintptr(num_mime_types))
		__r0 := _r0 != 0
		runtime.KeepAlive(mime_types)
		return __r0
	}
	iClearClipboardData = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClearClipboardData)
		__r0 := _r0 != 0
		return __r0
	}
	iGetClipboardData = func(mime_type string, size *uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetClipboardData, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mime_type))), uintptr(unsafe.Pointer(size)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(mime_type)
		runtime.KeepAlive(size)
		return __r0
	}
	iHasClipboardData = func(mime_type string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasClipboardData, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mime_type))))
		__r0 := _r0 != 0
		runtime.KeepAlive(mime_type)
		return __r0
	}
	iGetClipboardMimeTypes = func(num_mime_types *uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetClipboardMimeTypes, uintptr(unsafe.Pointer(num_mime_types)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(num_mime_types)
		return __r0
	}
	iGetNumLogicalCPUCores = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumLogicalCPUCores)
		__r0 := int32(_r0)
		return __r0
	}
	iGetCPUCacheLineSize = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCPUCacheLineSize)
		__r0 := int32(_r0)
		return __r0
	}
	iHasAltiVec = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasAltiVec)
		__r0 := _r0 != 0
		return __r0
	}
	iHasMMX = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasMMX)
		__r0 := _r0 != 0
		return __r0
	}
	iHasSSE = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasSSE)
		__r0 := _r0 != 0
		return __r0
	}
	iHasSSE2 = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasSSE2)
		__r0 := _r0 != 0
		return __r0
	}
	iHasSSE3 = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasSSE3)
		__r0 := _r0 != 0
		return __r0
	}
	iHasSSE41 = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasSSE41)
		__r0 := _r0 != 0
		return __r0
	}
	iHasSSE42 = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasSSE42)
		__r0 := _r0 != 0
		return __r0
	}
	iHasAVX = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasAVX)
		__r0 := _r0 != 0
		return __r0
	}
	iHasAVX2 = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasAVX2)
		__r0 := _r0 != 0
		return __r0
	}
	iHasAVX512F = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasAVX512F)
		__r0 := _r0 != 0
		return __r0
	}
	iHasARMSIMD = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasARMSIMD)
		__r0 := _r0 != 0
		return __r0
	}
	iHasNEON = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasNEON)
		__r0 := _r0 != 0
		return __r0
	}
	iHasLSX = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasLSX)
		__r0 := _r0 != 0
		return __r0
	}
	iHasLASX = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasLASX)
		__r0 := _r0 != 0
		return __r0
	}
	iGetSystemRAM = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSystemRAM)
		__r0 := int32(_r0)
		return __r0
	}
	iGetSIMDAlignment = func() uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSIMDAlignment)
		__r0 := uintptr(_r0)
		return __r0
	}
	iGetNumVideoDrivers = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumVideoDrivers)
		__r0 := int32(_r0)
		return __r0
	}
	iGetVideoDriver = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetVideoDriver, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCurrentVideoDriver = func() string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentVideoDriver)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetSystemTheme = func() SystemTheme {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSystemTheme)
		__r0 := SystemTheme(_r0)
		return __r0
	}
	iGetDisplays = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplays, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetPrimaryDisplay = func() DisplayID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPrimaryDisplay)
		__r0 := DisplayID(_r0)
		return __r0
	}
	iGetDisplayProperties = func(displayID DisplayID) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayProperties, uintptr(displayID))
		__r0 := PropertiesID(_r0)
		return __r0
	}
	iGetDisplayName = func(displayID DisplayID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayName, uintptr(displayID))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetDisplayBounds = func(displayID DisplayID, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayBounds, uintptr(displayID), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetDisplayUsableBounds = func(displayID DisplayID, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayUsableBounds, uintptr(displayID), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetNaturalDisplayOrientation = func(displayID DisplayID) DisplayOrientation {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNaturalDisplayOrientation, uintptr(displayID))
		__r0 := DisplayOrientation(_r0)
		return __r0
	}
	iGetCurrentDisplayOrientation = func(displayID DisplayID) DisplayOrientation {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentDisplayOrientation, uintptr(displayID))
		__r0 := DisplayOrientation(_r0)
		return __r0
	}
	purego.RegisterLibFunc(&iGetDisplayContentScale, _hnd_sdl, "SDL_GetDisplayContentScale")
	iGetFullscreenDisplayModes = func(displayID DisplayID, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetFullscreenDisplayModes, uintptr(displayID), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	purego.RegisterLibFunc(&iGetClosestFullscreenDisplayMode, _hnd_sdl, "SDL_GetClosestFullscreenDisplayMode")
	iGetDesktopDisplayMode = func(displayID DisplayID) *DisplayMode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDesktopDisplayMode, uintptr(displayID))
		__r0 := (*DisplayMode)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetCurrentDisplayMode = func(displayID DisplayID) *DisplayMode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentDisplayMode, uintptr(displayID))
		__r0 := (*DisplayMode)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetDisplayForPoint = func(point *Point) DisplayID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayForPoint, uintptr(unsafe.Pointer(point)))
		__r0 := DisplayID(_r0)
		runtime.KeepAlive(point)
		return __r0
	}
	iGetDisplayForRect = func(rect *Rect) DisplayID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayForRect, uintptr(unsafe.Pointer(rect)))
		__r0 := DisplayID(_r0)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetDisplayForWindow = func(window *Window) DisplayID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDisplayForWindow, uintptr(unsafe.Pointer(window)))
		__r0 := DisplayID(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	purego.RegisterLibFunc(&iGetWindowPixelDensity, _hnd_sdl, "SDL_GetWindowPixelDensity")
	purego.RegisterLibFunc(&iGetWindowDisplayScale, _hnd_sdl, "SDL_GetWindowDisplayScale")
	iSetWindowFullscreenMode = func(window *Window, mode *DisplayMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowFullscreenMode, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(mode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(mode)
		return __r0
	}
	iGetWindowFullscreenMode = func(window *Window) *DisplayMode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowFullscreenMode, uintptr(unsafe.Pointer(window)))
		__r0 := (*DisplayMode)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowICCProfile = func(window *Window, size *uintptr) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowICCProfile, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(size)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(window)
		runtime.KeepAlive(size)
		return __r0
	}
	iGetWindowPixelFormat = func(window *Window) PixelFormat {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowPixelFormat, uintptr(unsafe.Pointer(window)))
		__r0 := PixelFormat(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindows = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindows, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iCreateWindow = func(title string, w int32, h int32, flags WindowFlags) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateWindow, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(title))), uintptr(w), uintptr(h), uintptr(flags))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(title)
		return __r0
	}
	iCreatePopupWindow = func(parent *Window, offset_x int32, offset_y int32, w int32, h int32, flags WindowFlags) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreatePopupWindow, uintptr(unsafe.Pointer(parent)), uintptr(offset_x), uintptr(offset_y), uintptr(w), uintptr(h), uintptr(flags))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(parent)
		return __r0
	}
	iCreateWindowWithProperties = func(props PropertiesID) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateWindowWithProperties, uintptr(props))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetWindowID = func(window *Window) WindowID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowID, uintptr(unsafe.Pointer(window)))
		__r0 := WindowID(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowFromID = func(id WindowID) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowFromID, uintptr(id))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetWindowParent = func(window *Window) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowParent, uintptr(unsafe.Pointer(window)))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowProperties = func(window *Window) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowProperties, uintptr(unsafe.Pointer(window)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowFlags = func(window *Window) WindowFlags {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowFlags, uintptr(unsafe.Pointer(window)))
		__r0 := WindowFlags(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowTitle = func(window *Window, title string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowTitle, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(title))))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(title)
		return __r0
	}
	iGetWindowTitle = func(window *Window) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowTitle, uintptr(unsafe.Pointer(window)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowIcon = func(window *Window, icon *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowIcon, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(icon)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(icon)
		return __r0
	}
	iSetWindowPosition = func(window *Window, x int32, y int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowPosition, uintptr(unsafe.Pointer(window)), uintptr(x), uintptr(y))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowPosition = func(window *Window, x *int32, y *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowPosition, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(x)
		runtime.KeepAlive(y)
		return __r0
	}
	iSetWindowSize = func(window *Window, w int32, h int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowSize, uintptr(unsafe.Pointer(window)), uintptr(w), uintptr(h))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowSize = func(window *Window, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowSize, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iGetWindowSafeArea = func(window *Window, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowSafeArea, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(rect)
		return __r0
	}
	purego.RegisterLibFunc(&iSetWindowAspectRatio, _hnd_sdl, "SDL_SetWindowAspectRatio")
	iGetWindowAspectRatio = func(window *Window, min_aspect *float32, max_aspect *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowAspectRatio, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(min_aspect)), uintptr(unsafe.Pointer(max_aspect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(min_aspect)
		runtime.KeepAlive(max_aspect)
		return __r0
	}
	iGetWindowBordersSize = func(window *Window, top *int32, left *int32, bottom *int32, right *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowBordersSize, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(top)), uintptr(unsafe.Pointer(left)), uintptr(unsafe.Pointer(bottom)), uintptr(unsafe.Pointer(right)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(top)
		runtime.KeepAlive(left)
		runtime.KeepAlive(bottom)
		runtime.KeepAlive(right)
		return __r0
	}
	iGetWindowSizeInPixels = func(window *Window, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowSizeInPixels, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iSetWindowMinimumSize = func(window *Window, min_w int32, min_h int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowMinimumSize, uintptr(unsafe.Pointer(window)), uintptr(min_w), uintptr(min_h))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowMinimumSize = func(window *Window, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowMinimumSize, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iSetWindowMaximumSize = func(window *Window, max_w int32, max_h int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowMaximumSize, uintptr(unsafe.Pointer(window)), uintptr(max_w), uintptr(max_h))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowMaximumSize = func(window *Window, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowMaximumSize, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iSetWindowBordered = func(window *Window, bordered bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowBordered, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(bordered))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowResizable = func(window *Window, resizable bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowResizable, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(resizable))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowAlwaysOnTop = func(window *Window, on_top bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowAlwaysOnTop, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(on_top))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iShowWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShowWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iHideWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HideWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iRaiseWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RaiseWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iMaximizeWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MaximizeWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iMinimizeWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MinimizeWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iRestoreWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RestoreWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowFullscreen = func(window *Window, fullscreen bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowFullscreen, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(fullscreen))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSyncWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SyncWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iWindowHasSurface = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WindowHasSurface, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowSurface = func(window *Window) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowSurface, uintptr(unsafe.Pointer(window)))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowSurfaceVSync = func(window *Window, vsync int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowSurfaceVSync, uintptr(unsafe.Pointer(window)), uintptr(vsync))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowSurfaceVSync = func(window *Window, vsync *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowSurfaceVSync, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(vsync)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(vsync)
		return __r0
	}
	iUpdateWindowSurface = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateWindowSurface, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iUpdateWindowSurfaceRects = func(window *Window, rects *Rect, numrects int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateWindowSurfaceRects, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(rects)), uintptr(numrects))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(rects)
		return __r0
	}
	iDestroyWindowSurface = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_DestroyWindowSurface, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowKeyboardGrab = func(window *Window, grabbed bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowKeyboardGrab, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(grabbed))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowMouseGrab = func(window *Window, grabbed bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowMouseGrab, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(grabbed))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowKeyboardGrab = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowKeyboardGrab, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowMouseGrab = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowMouseGrab, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetGrabbedWindow = func() *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGrabbedWindow)
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetWindowMouseRect = func(window *Window, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowMouseRect, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetWindowMouseRect = func(window *Window) *Rect {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowMouseRect, uintptr(unsafe.Pointer(window)))
		__r0 := (*Rect)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	purego.RegisterLibFunc(&iSetWindowOpacity, _hnd_sdl, "SDL_SetWindowOpacity")
	purego.RegisterLibFunc(&iGetWindowOpacity, _hnd_sdl, "SDL_GetWindowOpacity")
	iSetWindowParent = func(window *Window, parent *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowParent, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(parent)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(parent)
		return __r0
	}
	iSetWindowModal = func(window *Window, modal bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowModal, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(modal))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowFocusable = func(window *Window, focusable bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowFocusable, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(focusable))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iShowWindowSystemMenu = func(window *Window, x int32, y int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShowWindowSystemMenu, uintptr(unsafe.Pointer(window)), uintptr(x), uintptr(y))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowHitTest = func(window *Window, callback HitTest, callback_data uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowHitTest, uintptr(unsafe.Pointer(window)), uintptr(callback), uintptr(callback_data))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetWindowShape = func(window *Window, shape *Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowShape, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(shape)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(shape)
		return __r0
	}
	iFlashWindow = func(window *Window, operation FlashOperation) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FlashWindow, uintptr(unsafe.Pointer(window)), uintptr(operation))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iDestroyWindow = func(window *Window) {
		purego.SyscallN(_addr_SDL_DestroyWindow, uintptr(unsafe.Pointer(window)))
		runtime.KeepAlive(window)
	}
	iScreenSaverEnabled = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ScreenSaverEnabled)
		__r0 := _r0 != 0
		return __r0
	}
	iEnableScreenSaver = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EnableScreenSaver)
		__r0 := _r0 != 0
		return __r0
	}
	iDisableScreenSaver = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_DisableScreenSaver)
		__r0 := _r0 != 0
		return __r0
	}
	iGL_LoadLibrary = func(path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_LoadLibrary, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		return __r0
	}
	iGL_GetProcAddress = func(proc string) FunctionPointer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_GetProcAddress, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(proc))))
		__r0 := FunctionPointer(_r0)
		runtime.KeepAlive(proc)
		return __r0
	}
	iEGL_GetProcAddress = func(proc string) FunctionPointer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EGL_GetProcAddress, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(proc))))
		__r0 := FunctionPointer(_r0)
		runtime.KeepAlive(proc)
		return __r0
	}
	iGL_UnloadLibrary = func() {
		purego.SyscallN(_addr_SDL_GL_UnloadLibrary)
	}
	iGL_ExtensionSupported = func(extension string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_ExtensionSupported, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(extension))))
		__r0 := _r0 != 0
		runtime.KeepAlive(extension)
		return __r0
	}
	iGL_ResetAttributes = func() {
		purego.SyscallN(_addr_SDL_GL_ResetAttributes)
	}
	iGL_SetAttribute = func(attr GLAttr, value int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_SetAttribute, uintptr(attr), uintptr(value))
		__r0 := _r0 != 0
		return __r0
	}
	iGL_GetAttribute = func(attr GLAttr, value *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_GetAttribute, uintptr(attr), uintptr(unsafe.Pointer(value)))
		__r0 := _r0 != 0
		runtime.KeepAlive(value)
		return __r0
	}
	iGL_CreateContext = func(window *Window) GLContext {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_CreateContext, uintptr(unsafe.Pointer(window)))
		__r0 := (GLContext)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iGL_MakeCurrent = func(window *Window, context GLContext) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_MakeCurrent, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(context)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGL_GetCurrentWindow = func() *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_GetCurrentWindow)
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGL_GetCurrentContext = func() GLContext {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_GetCurrentContext)
		__r0 := (GLContext)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iEGL_GetCurrentDisplay = func() EGLDisplay {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EGL_GetCurrentDisplay)
		__r0 := EGLDisplay(_r0)
		return __r0
	}
	iEGL_GetCurrentConfig = func() EGLConfig {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EGL_GetCurrentConfig)
		__r0 := EGLConfig(_r0)
		return __r0
	}
	iEGL_GetWindowSurface = func(window *Window) EGLSurface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EGL_GetWindowSurface, uintptr(unsafe.Pointer(window)))
		__r0 := EGLSurface(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iEGL_SetAttributeCallbacks = func(platformAttribCallback EGLAttribArrayCallback, surfaceAttribCallback EGLIntArrayCallback, contextAttribCallback EGLIntArrayCallback, userdata uintptr) {
		purego.SyscallN(_addr_SDL_EGL_SetAttributeCallbacks, uintptr(platformAttribCallback), uintptr(surfaceAttribCallback), uintptr(contextAttribCallback), uintptr(userdata))
	}
	iGL_SetSwapInterval = func(interval int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_SetSwapInterval, uintptr(interval))
		__r0 := _r0 != 0
		return __r0
	}
	iGL_GetSwapInterval = func(interval *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_GetSwapInterval, uintptr(unsafe.Pointer(interval)))
		__r0 := _r0 != 0
		runtime.KeepAlive(interval)
		return __r0
	}
	iGL_SwapWindow = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_SwapWindow, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGL_DestroyContext = func(context GLContext) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GL_DestroyContext, uintptr(unsafe.Pointer(context)))
		__r0 := _r0 != 0
		return __r0
	}
	iShowOpenFileDialog = func(callback DialogFileCallback, userdata uintptr, window *Window, filters *DialogFileFilter, nfilters int32, default_location string, allow_many bool) {
		purego.SyscallN(_addr_SDL_ShowOpenFileDialog, uintptr(callback), uintptr(userdata), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(filters)), uintptr(nfilters), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(default_location))), puregogen.BoolToUintptr(allow_many))
		runtime.KeepAlive(window)
		runtime.KeepAlive(filters)
		runtime.KeepAlive(default_location)
	}
	iShowSaveFileDialog = func(callback DialogFileCallback, userdata uintptr, window *Window, filters *DialogFileFilter, nfilters int32, default_location string) {
		purego.SyscallN(_addr_SDL_ShowSaveFileDialog, uintptr(callback), uintptr(userdata), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(filters)), uintptr(nfilters), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(default_location))))
		runtime.KeepAlive(window)
		runtime.KeepAlive(filters)
		runtime.KeepAlive(default_location)
	}
	iShowOpenFolderDialog = func(callback DialogFileCallback, userdata uintptr, window *Window, default_location string, allow_many bool) {
		purego.SyscallN(_addr_SDL_ShowOpenFolderDialog, uintptr(callback), uintptr(userdata), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(default_location))), puregogen.BoolToUintptr(allow_many))
		runtime.KeepAlive(window)
		runtime.KeepAlive(default_location)
	}
	iShowFileDialogWithProperties = func(typ FileDialogType, callback DialogFileCallback, userdata uintptr, props PropertiesID) {
		purego.SyscallN(_addr_SDL_ShowFileDialogWithProperties, uintptr(typ), uintptr(callback), uintptr(userdata), uintptr(props))
	}
	iGUIDToString = func(guid GUID, pszGUID string, cbGUID int32) {
		purego.SyscallN(_addr_SDL_GUIDToString, uintptr(unsafe.Pointer(guid)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(pszGUID))), uintptr(cbGUID))
		runtime.KeepAlive(pszGUID)
	}
	iStringToGUID = func(pchGUID string) GUID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StringToGUID, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(pchGUID))))
		__r0 := (GUID)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(pchGUID)
		return __r0
	}
	iGetPowerInfo = func(seconds *int32, percent *int32) PowerState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPowerInfo, uintptr(unsafe.Pointer(seconds)), uintptr(unsafe.Pointer(percent)))
		__r0 := PowerState(_r0)
		runtime.KeepAlive(seconds)
		runtime.KeepAlive(percent)
		return __r0
	}
	iGetSensors = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensors, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetSensorNameForID = func(instance_id SensorID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetSensorTypeForID = func(instance_id SensorID) SensorType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorTypeForID, uintptr(instance_id))
		__r0 := SensorType(_r0)
		return __r0
	}
	iGetSensorNonPortableTypeForID = func(instance_id SensorID) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorNonPortableTypeForID, uintptr(instance_id))
		__r0 := int32(_r0)
		return __r0
	}
	iOpenSensor = func(instance_id SensorID) *Sensor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenSensor, uintptr(instance_id))
		__r0 := (*Sensor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetSensorFromID = func(instance_id SensorID) *Sensor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorFromID, uintptr(instance_id))
		__r0 := (*Sensor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetSensorProperties = func(sensor *Sensor) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorProperties, uintptr(unsafe.Pointer(sensor)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(sensor)
		return __r0
	}
	iGetSensorName = func(sensor *Sensor) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorName, uintptr(unsafe.Pointer(sensor)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(sensor)
		return __r0
	}
	iGetSensorType = func(sensor *Sensor) SensorType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorType, uintptr(unsafe.Pointer(sensor)))
		__r0 := SensorType(_r0)
		runtime.KeepAlive(sensor)
		return __r0
	}
	iGetSensorNonPortableType = func(sensor *Sensor) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorNonPortableType, uintptr(unsafe.Pointer(sensor)))
		__r0 := int32(_r0)
		runtime.KeepAlive(sensor)
		return __r0
	}
	iGetSensorID = func(sensor *Sensor) SensorID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorID, uintptr(unsafe.Pointer(sensor)))
		__r0 := SensorID(_r0)
		runtime.KeepAlive(sensor)
		return __r0
	}
	iGetSensorData = func(sensor *Sensor, data *float32, num_values int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSensorData, uintptr(unsafe.Pointer(sensor)), uintptr(unsafe.Pointer(data)), uintptr(num_values))
		__r0 := _r0 != 0
		runtime.KeepAlive(sensor)
		runtime.KeepAlive(data)
		return __r0
	}
	iCloseSensor = func(sensor *Sensor) {
		purego.SyscallN(_addr_SDL_CloseSensor, uintptr(unsafe.Pointer(sensor)))
		runtime.KeepAlive(sensor)
	}
	iUpdateSensors = func() {
		purego.SyscallN(_addr_SDL_UpdateSensors)
	}
	iLockJoysticks = func() {
		purego.SyscallN(_addr_SDL_LockJoysticks)
	}
	iUnlockJoysticks = func() {
		purego.SyscallN(_addr_SDL_UnlockJoysticks)
	}
	iHasJoystick = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasJoystick)
		__r0 := _r0 != 0
		return __r0
	}
	iGetJoysticks = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoysticks, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetJoystickNameForID = func(instance_id JoystickID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetJoystickPathForID = func(instance_id JoystickID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickPathForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetJoystickPlayerIndexForID = func(instance_id JoystickID) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickPlayerIndexForID, uintptr(instance_id))
		__r0 := int32(_r0)
		return __r0
	}
	iGetJoystickGUIDForID = func(instance_id JoystickID) GUID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickGUIDForID, uintptr(instance_id))
		__r0 := (GUID)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetJoystickVendorForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickVendorForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetJoystickProductForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickProductForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetJoystickProductVersionForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickProductVersionForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetJoystickTypeForID = func(instance_id JoystickID) JoystickType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickTypeForID, uintptr(instance_id))
		__r0 := JoystickType(_r0)
		return __r0
	}
	iOpenJoystick = func(instance_id JoystickID) *Joystick {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenJoystick, uintptr(instance_id))
		__r0 := (*Joystick)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetJoystickFromID = func(instance_id JoystickID) *Joystick {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickFromID, uintptr(instance_id))
		__r0 := (*Joystick)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetJoystickFromPlayerIndex = func(player_index int32) *Joystick {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickFromPlayerIndex, uintptr(player_index))
		__r0 := (*Joystick)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iAttachVirtualJoystick = func(desc *VirtualJoystickDesc) JoystickID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AttachVirtualJoystick, uintptr(unsafe.Pointer(desc)))
		__r0 := JoystickID(_r0)
		runtime.KeepAlive(desc)
		return __r0
	}
	iDetachVirtualJoystick = func(instance_id JoystickID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_DetachVirtualJoystick, uintptr(instance_id))
		__r0 := _r0 != 0
		return __r0
	}
	iIsJoystickVirtual = func(instance_id JoystickID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsJoystickVirtual, uintptr(instance_id))
		__r0 := _r0 != 0
		return __r0
	}
	iSetJoystickVirtualAxis = func(joystick *Joystick, axis int32, value int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickVirtualAxis, uintptr(unsafe.Pointer(joystick)), uintptr(axis), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickVirtualBall = func(joystick *Joystick, ball int32, xrel int16, yrel int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickVirtualBall, uintptr(unsafe.Pointer(joystick)), uintptr(ball), uintptr(xrel), uintptr(yrel))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickVirtualButton = func(joystick *Joystick, button int32, down bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickVirtualButton, uintptr(unsafe.Pointer(joystick)), uintptr(button), puregogen.BoolToUintptr(down))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickVirtualHat = func(joystick *Joystick, hat int32, value uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickVirtualHat, uintptr(unsafe.Pointer(joystick)), uintptr(hat), uintptr(value))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	purego.RegisterLibFunc(&iSetJoystickVirtualTouchpad, _hnd_sdl, "SDL_SetJoystickVirtualTouchpad")
	iSendJoystickVirtualSensorData = func(joystick *Joystick, typ SensorType, sensor_timestamp uint64, data *float32, num_values int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SendJoystickVirtualSensorData, uintptr(unsafe.Pointer(joystick)), uintptr(typ), uintptr(sensor_timestamp), uintptr(unsafe.Pointer(data)), uintptr(num_values))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		runtime.KeepAlive(data)
		return __r0
	}
	iGetJoystickProperties = func(joystick *Joystick) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickProperties, uintptr(unsafe.Pointer(joystick)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickName = func(joystick *Joystick) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickName, uintptr(unsafe.Pointer(joystick)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickPath = func(joystick *Joystick) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickPath, uintptr(unsafe.Pointer(joystick)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickPlayerIndex = func(joystick *Joystick) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickPlayerIndex, uintptr(unsafe.Pointer(joystick)))
		__r0 := int32(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickPlayerIndex = func(joystick *Joystick, player_index int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickPlayerIndex, uintptr(unsafe.Pointer(joystick)), uintptr(player_index))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickGUID = func(joystick *Joystick) GUID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickGUID, uintptr(unsafe.Pointer(joystick)))
		__r0 := (GUID)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickVendor = func(joystick *Joystick) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickVendor, uintptr(unsafe.Pointer(joystick)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickProduct = func(joystick *Joystick) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickProduct, uintptr(unsafe.Pointer(joystick)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickProductVersion = func(joystick *Joystick) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickProductVersion, uintptr(unsafe.Pointer(joystick)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickFirmwareVersion = func(joystick *Joystick) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickFirmwareVersion, uintptr(unsafe.Pointer(joystick)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickSerial = func(joystick *Joystick) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickSerial, uintptr(unsafe.Pointer(joystick)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickType = func(joystick *Joystick) JoystickType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickType, uintptr(unsafe.Pointer(joystick)))
		__r0 := JoystickType(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickGUIDInfo = func(guid GUID, vendor *uint16, product *uint16, version *uint16, crc16 *uint16) {
		purego.SyscallN(_addr_SDL_GetJoystickGUIDInfo, uintptr(unsafe.Pointer(guid)), uintptr(unsafe.Pointer(vendor)), uintptr(unsafe.Pointer(product)), uintptr(unsafe.Pointer(version)), uintptr(unsafe.Pointer(crc16)))
		runtime.KeepAlive(vendor)
		runtime.KeepAlive(product)
		runtime.KeepAlive(version)
		runtime.KeepAlive(crc16)
	}
	iJoystickConnected = func(joystick *Joystick) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_JoystickConnected, uintptr(unsafe.Pointer(joystick)))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickID = func(joystick *Joystick) JoystickID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickID, uintptr(unsafe.Pointer(joystick)))
		__r0 := JoystickID(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetNumJoystickAxes = func(joystick *Joystick) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumJoystickAxes, uintptr(unsafe.Pointer(joystick)))
		__r0 := int32(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetNumJoystickBalls = func(joystick *Joystick) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumJoystickBalls, uintptr(unsafe.Pointer(joystick)))
		__r0 := int32(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetNumJoystickHats = func(joystick *Joystick) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumJoystickHats, uintptr(unsafe.Pointer(joystick)))
		__r0 := int32(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetNumJoystickButtons = func(joystick *Joystick) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumJoystickButtons, uintptr(unsafe.Pointer(joystick)))
		__r0 := int32(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickEventsEnabled = func(enabled bool) {
		purego.SyscallN(_addr_SDL_SetJoystickEventsEnabled, puregogen.BoolToUintptr(enabled))
	}
	iJoystickEventsEnabled = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_JoystickEventsEnabled)
		__r0 := _r0 != 0
		return __r0
	}
	iUpdateJoysticks = func() {
		purego.SyscallN(_addr_SDL_UpdateJoysticks)
	}
	iGetJoystickAxis = func(joystick *Joystick, axis int32) int16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickAxis, uintptr(unsafe.Pointer(joystick)), uintptr(axis))
		__r0 := int16(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickAxisInitialState = func(joystick *Joystick, axis int32, state *int16) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickAxisInitialState, uintptr(unsafe.Pointer(joystick)), uintptr(axis), uintptr(unsafe.Pointer(state)))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		runtime.KeepAlive(state)
		return __r0
	}
	iGetJoystickBall = func(joystick *Joystick, ball int32, dx *int32, dy *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickBall, uintptr(unsafe.Pointer(joystick)), uintptr(ball), uintptr(unsafe.Pointer(dx)), uintptr(unsafe.Pointer(dy)))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		runtime.KeepAlive(dx)
		runtime.KeepAlive(dy)
		return __r0
	}
	iGetJoystickHat = func(joystick *Joystick, hat int32) uint8 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickHat, uintptr(unsafe.Pointer(joystick)), uintptr(hat))
		__r0 := uint8(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickButton = func(joystick *Joystick, button int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickButton, uintptr(unsafe.Pointer(joystick)), uintptr(button))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iRumbleJoystick = func(joystick *Joystick, low_frequency_rumble uint16, high_frequency_rumble uint16, duration_ms uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RumbleJoystick, uintptr(unsafe.Pointer(joystick)), uintptr(low_frequency_rumble), uintptr(high_frequency_rumble), uintptr(duration_ms))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iRumbleJoystickTriggers = func(joystick *Joystick, left_rumble uint16, right_rumble uint16, duration_ms uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RumbleJoystickTriggers, uintptr(unsafe.Pointer(joystick)), uintptr(left_rumble), uintptr(right_rumble), uintptr(duration_ms))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSetJoystickLED = func(joystick *Joystick, red uint8, green uint8, blue uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetJoystickLED, uintptr(unsafe.Pointer(joystick)), uintptr(red), uintptr(green), uintptr(blue))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iSendJoystickEffect = func(joystick *Joystick, data uintptr, size int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SendJoystickEffect, uintptr(unsafe.Pointer(joystick)), uintptr(data), uintptr(size))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iCloseJoystick = func(joystick *Joystick) {
		purego.SyscallN(_addr_SDL_CloseJoystick, uintptr(unsafe.Pointer(joystick)))
		runtime.KeepAlive(joystick)
	}
	iGetJoystickConnectionState = func(joystick *Joystick) JoystickConnectionState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickConnectionState, uintptr(unsafe.Pointer(joystick)))
		__r0 := JoystickConnectionState(_r0)
		runtime.KeepAlive(joystick)
		return __r0
	}
	iGetJoystickPowerInfo = func(joystick *Joystick, percent *int32) PowerState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetJoystickPowerInfo, uintptr(unsafe.Pointer(joystick)), uintptr(unsafe.Pointer(percent)))
		__r0 := PowerState(_r0)
		runtime.KeepAlive(joystick)
		runtime.KeepAlive(percent)
		return __r0
	}
	iAddGamepadMapping = func(mapping string) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddGamepadMapping, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mapping))))
		__r0 := int32(_r0)
		runtime.KeepAlive(mapping)
		return __r0
	}
	iAddGamepadMappingsFromIO = func(src *IOStream, closeio bool) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddGamepadMappingsFromIO, uintptr(unsafe.Pointer(src)), puregogen.BoolToUintptr(closeio))
		__r0 := int32(_r0)
		runtime.KeepAlive(src)
		return __r0
	}
	iAddGamepadMappingsFromFile = func(file string) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddGamepadMappingsFromFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))))
		__r0 := int32(_r0)
		runtime.KeepAlive(file)
		return __r0
	}
	iReloadGamepadMappings = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReloadGamepadMappings)
		__r0 := _r0 != 0
		return __r0
	}
	iGetGamepadMappings = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadMappings, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetGamepadMappingForGUID = func(guid GUID) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadMappingForGUID, uintptr(unsafe.Pointer(guid)))
		__r0 := uintptr(_r0)
		return __r0
	}
	iGetGamepadMapping = func(gamepad *Gamepad) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadMapping, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSetGamepadMapping = func(instance_id JoystickID, mapping string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGamepadMapping, uintptr(instance_id), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(mapping))))
		__r0 := _r0 != 0
		runtime.KeepAlive(mapping)
		return __r0
	}
	iHasGamepad = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasGamepad)
		__r0 := _r0 != 0
		return __r0
	}
	iGetGamepads = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepads, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iIsGamepad = func(instance_id JoystickID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsGamepad, uintptr(instance_id))
		__r0 := _r0 != 0
		return __r0
	}
	iGetGamepadNameForID = func(instance_id JoystickID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadPathForID = func(instance_id JoystickID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadPathForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadPlayerIndexForID = func(instance_id JoystickID) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadPlayerIndexForID, uintptr(instance_id))
		__r0 := int32(_r0)
		return __r0
	}
	iGetGamepadGUIDForID = func(instance_id JoystickID) GUID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadGUIDForID, uintptr(instance_id))
		__r0 := (GUID)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadVendorForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadVendorForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetGamepadProductForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadProductForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetGamepadProductVersionForID = func(instance_id JoystickID) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadProductVersionForID, uintptr(instance_id))
		__r0 := uint16(_r0)
		return __r0
	}
	iGetGamepadTypeForID = func(instance_id JoystickID) GamepadType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadTypeForID, uintptr(instance_id))
		__r0 := GamepadType(_r0)
		return __r0
	}
	iGetRealGamepadTypeForID = func(instance_id JoystickID) GamepadType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRealGamepadTypeForID, uintptr(instance_id))
		__r0 := GamepadType(_r0)
		return __r0
	}
	iGetGamepadMappingForID = func(instance_id JoystickID) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadMappingForID, uintptr(instance_id))
		__r0 := uintptr(_r0)
		return __r0
	}
	iOpenGamepad = func(instance_id JoystickID) *Gamepad {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenGamepad, uintptr(instance_id))
		__r0 := (*Gamepad)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadFromID = func(instance_id JoystickID) *Gamepad {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadFromID, uintptr(instance_id))
		__r0 := (*Gamepad)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadFromPlayerIndex = func(player_index int32) *Gamepad {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadFromPlayerIndex, uintptr(player_index))
		__r0 := (*Gamepad)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadProperties = func(gamepad *Gamepad) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadProperties, uintptr(unsafe.Pointer(gamepad)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadID = func(gamepad *Gamepad) JoystickID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadID, uintptr(unsafe.Pointer(gamepad)))
		__r0 := JoystickID(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadName = func(gamepad *Gamepad) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadName, uintptr(unsafe.Pointer(gamepad)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadPath = func(gamepad *Gamepad) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadPath, uintptr(unsafe.Pointer(gamepad)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadType = func(gamepad *Gamepad) GamepadType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadType, uintptr(unsafe.Pointer(gamepad)))
		__r0 := GamepadType(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetRealGamepadType = func(gamepad *Gamepad) GamepadType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRealGamepadType, uintptr(unsafe.Pointer(gamepad)))
		__r0 := GamepadType(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadPlayerIndex = func(gamepad *Gamepad) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadPlayerIndex, uintptr(unsafe.Pointer(gamepad)))
		__r0 := int32(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSetGamepadPlayerIndex = func(gamepad *Gamepad, player_index int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGamepadPlayerIndex, uintptr(unsafe.Pointer(gamepad)), uintptr(player_index))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadVendor = func(gamepad *Gamepad) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadVendor, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadProduct = func(gamepad *Gamepad) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadProduct, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadProductVersion = func(gamepad *Gamepad) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadProductVersion, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadFirmwareVersion = func(gamepad *Gamepad) uint16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadFirmwareVersion, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uint16(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadSerial = func(gamepad *Gamepad) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadSerial, uintptr(unsafe.Pointer(gamepad)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadSteamHandle = func(gamepad *Gamepad) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadSteamHandle, uintptr(unsafe.Pointer(gamepad)))
		__r0 := uint64(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadConnectionState = func(gamepad *Gamepad) JoystickConnectionState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadConnectionState, uintptr(unsafe.Pointer(gamepad)))
		__r0 := JoystickConnectionState(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadPowerInfo = func(gamepad *Gamepad, percent *int32) PowerState {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadPowerInfo, uintptr(unsafe.Pointer(gamepad)), uintptr(unsafe.Pointer(percent)))
		__r0 := PowerState(_r0)
		runtime.KeepAlive(gamepad)
		runtime.KeepAlive(percent)
		return __r0
	}
	iGamepadConnected = func(gamepad *Gamepad) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadConnected, uintptr(unsafe.Pointer(gamepad)))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadJoystick = func(gamepad *Gamepad) *Joystick {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadJoystick, uintptr(unsafe.Pointer(gamepad)))
		__r0 := (*Joystick)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSetGamepadEventsEnabled = func(enabled bool) {
		purego.SyscallN(_addr_SDL_SetGamepadEventsEnabled, puregogen.BoolToUintptr(enabled))
	}
	iGamepadEventsEnabled = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadEventsEnabled)
		__r0 := _r0 != 0
		return __r0
	}
	iGetGamepadBindings = func(gamepad *Gamepad, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadBindings, uintptr(unsafe.Pointer(gamepad)), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(gamepad)
		runtime.KeepAlive(count)
		return __r0
	}
	iUpdateGamepads = func() {
		purego.SyscallN(_addr_SDL_UpdateGamepads)
	}
	iGetGamepadTypeFromString = func(str string) GamepadType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadTypeFromString, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(str))))
		__r0 := GamepadType(_r0)
		runtime.KeepAlive(str)
		return __r0
	}
	iGetGamepadStringForType = func(typ GamepadType) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadStringForType, uintptr(typ))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGamepadAxisFromString = func(str string) GamepadAxis {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadAxisFromString, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(str))))
		__r0 := GamepadAxis(_r0)
		runtime.KeepAlive(str)
		return __r0
	}
	iGetGamepadStringForAxis = func(axis GamepadAxis) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadStringForAxis, uintptr(axis))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGamepadHasAxis = func(gamepad *Gamepad, axis GamepadAxis) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadHasAxis, uintptr(unsafe.Pointer(gamepad)), uintptr(axis))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadAxis = func(gamepad *Gamepad, axis GamepadAxis) int16 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadAxis, uintptr(unsafe.Pointer(gamepad)), uintptr(axis))
		__r0 := int16(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadButtonFromString = func(str string) GamepadButton {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadButtonFromString, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(str))))
		__r0 := GamepadButton(_r0)
		runtime.KeepAlive(str)
		return __r0
	}
	iGetGamepadStringForButton = func(button GamepadButton) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadStringForButton, uintptr(button))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGamepadHasButton = func(gamepad *Gamepad, button GamepadButton) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadHasButton, uintptr(unsafe.Pointer(gamepad)), uintptr(button))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadButton = func(gamepad *Gamepad, button GamepadButton) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadButton, uintptr(unsafe.Pointer(gamepad)), uintptr(button))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadButtonLabelForType = func(typ GamepadType, button GamepadButton) GamepadButtonLabel {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadButtonLabelForType, uintptr(typ), uintptr(button))
		__r0 := GamepadButtonLabel(_r0)
		return __r0
	}
	iGetGamepadButtonLabel = func(gamepad *Gamepad, button GamepadButton) GamepadButtonLabel {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadButtonLabel, uintptr(unsafe.Pointer(gamepad)), uintptr(button))
		__r0 := GamepadButtonLabel(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetNumGamepadTouchpads = func(gamepad *Gamepad) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumGamepadTouchpads, uintptr(unsafe.Pointer(gamepad)))
		__r0 := int32(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetNumGamepadTouchpadFingers = func(gamepad *Gamepad, touchpad int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumGamepadTouchpadFingers, uintptr(unsafe.Pointer(gamepad)), uintptr(touchpad))
		__r0 := int32(_r0)
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadTouchpadFinger = func(gamepad *Gamepad, touchpad int32, finger int32, down *bool, x *float32, y *float32, pressure *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadTouchpadFinger, uintptr(unsafe.Pointer(gamepad)), uintptr(touchpad), uintptr(finger), uintptr(unsafe.Pointer(down)), uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)), uintptr(unsafe.Pointer(pressure)))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		runtime.KeepAlive(down)
		runtime.KeepAlive(x)
		runtime.KeepAlive(y)
		runtime.KeepAlive(pressure)
		return __r0
	}
	iGamepadHasSensor = func(gamepad *Gamepad, typ SensorType) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadHasSensor, uintptr(unsafe.Pointer(gamepad)), uintptr(typ))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSetGamepadSensorEnabled = func(gamepad *Gamepad, typ SensorType, enabled bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGamepadSensorEnabled, uintptr(unsafe.Pointer(gamepad)), uintptr(typ), puregogen.BoolToUintptr(enabled))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGamepadSensorEnabled = func(gamepad *Gamepad, typ SensorType) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GamepadSensorEnabled, uintptr(unsafe.Pointer(gamepad)), uintptr(typ))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	purego.RegisterLibFunc(&iGetGamepadSensorDataRate, _hnd_sdl, "SDL_GetGamepadSensorDataRate")
	iGetGamepadSensorData = func(gamepad *Gamepad, typ SensorType, data *float32, num_values int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadSensorData, uintptr(unsafe.Pointer(gamepad)), uintptr(typ), uintptr(unsafe.Pointer(data)), uintptr(num_values))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		runtime.KeepAlive(data)
		return __r0
	}
	iRumbleGamepad = func(gamepad *Gamepad, low_frequency_rumble uint16, high_frequency_rumble uint16, duration_ms uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RumbleGamepad, uintptr(unsafe.Pointer(gamepad)), uintptr(low_frequency_rumble), uintptr(high_frequency_rumble), uintptr(duration_ms))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iRumbleGamepadTriggers = func(gamepad *Gamepad, left_rumble uint16, right_rumble uint16, duration_ms uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RumbleGamepadTriggers, uintptr(unsafe.Pointer(gamepad)), uintptr(left_rumble), uintptr(right_rumble), uintptr(duration_ms))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSetGamepadLED = func(gamepad *Gamepad, red uint8, green uint8, blue uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGamepadLED, uintptr(unsafe.Pointer(gamepad)), uintptr(red), uintptr(green), uintptr(blue))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iSendGamepadEffect = func(gamepad *Gamepad, data uintptr, size int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SendGamepadEffect, uintptr(unsafe.Pointer(gamepad)), uintptr(data), uintptr(size))
		__r0 := _r0 != 0
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iCloseGamepad = func(gamepad *Gamepad) {
		purego.SyscallN(_addr_SDL_CloseGamepad, uintptr(unsafe.Pointer(gamepad)))
		runtime.KeepAlive(gamepad)
	}
	iGetGamepadAppleSFSymbolsNameForButton = func(gamepad *Gamepad, button GamepadButton) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadAppleSFSymbolsNameForButton, uintptr(unsafe.Pointer(gamepad)), uintptr(button))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iGetGamepadAppleSFSymbolsNameForAxis = func(gamepad *Gamepad, axis GamepadAxis) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGamepadAppleSFSymbolsNameForAxis, uintptr(unsafe.Pointer(gamepad)), uintptr(axis))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(gamepad)
		return __r0
	}
	iHasKeyboard = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasKeyboard)
		__r0 := _r0 != 0
		return __r0
	}
	iGetKeyboards = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyboards, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetKeyboardNameForID = func(instance_id KeyboardID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyboardNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetKeyboardFocus = func() *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyboardFocus)
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetKeyboardState = func(numkeys *int32) *bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyboardState, uintptr(unsafe.Pointer(numkeys)))
		__r0 := (*bool)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(numkeys)
		return __r0
	}
	iResetKeyboard = func() {
		purego.SyscallN(_addr_SDL_ResetKeyboard)
	}
	iGetModState = func() Keymod {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetModState)
		__r0 := Keymod(_r0)
		return __r0
	}
	iSetModState = func(modstate Keymod) {
		purego.SyscallN(_addr_SDL_SetModState, uintptr(modstate))
	}
	iGetKeyFromScancode = func(scancode Scancode, modstate Keymod, key_event bool) Keycode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyFromScancode, uintptr(scancode), uintptr(modstate), puregogen.BoolToUintptr(key_event))
		__r0 := Keycode(_r0)
		return __r0
	}
	iGetScancodeFromKey = func(key Keycode, modstate *Keymod) Scancode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetScancodeFromKey, uintptr(key), uintptr(unsafe.Pointer(modstate)))
		__r0 := Scancode(_r0)
		runtime.KeepAlive(modstate)
		return __r0
	}
	iSetScancodeName = func(scancode Scancode, name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetScancodeName, uintptr(scancode), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iGetScancodeName = func(scancode Scancode) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetScancodeName, uintptr(scancode))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetScancodeFromName = func(name string) Scancode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetScancodeFromName, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := Scancode(_r0)
		runtime.KeepAlive(name)
		return __r0
	}
	iGetKeyName = func(key Keycode) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyName, uintptr(key))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetKeyFromName = func(name string) Keycode {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetKeyFromName, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := Keycode(_r0)
		runtime.KeepAlive(name)
		return __r0
	}
	iStartTextInput = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StartTextInput, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iStartTextInputWithProperties = func(window *Window, props PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StartTextInputWithProperties, uintptr(unsafe.Pointer(window)), uintptr(props))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iTextInputActive = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TextInputActive, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iStopTextInput = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StopTextInput, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iClearComposition = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClearComposition, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iSetTextInputArea = func(window *Window, rect *Rect, cursor int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTextInputArea, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(rect)), uintptr(cursor))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetTextInputArea = func(window *Window, rect *Rect, cursor *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextInputArea, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(cursor)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		runtime.KeepAlive(rect)
		runtime.KeepAlive(cursor)
		return __r0
	}
	iHasScreenKeyboardSupport = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasScreenKeyboardSupport)
		__r0 := _r0 != 0
		return __r0
	}
	iScreenKeyboardShown = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ScreenKeyboardShown, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iHasMouse = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasMouse)
		__r0 := _r0 != 0
		return __r0
	}
	iGetMice = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMice, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetMouseNameForID = func(instance_id MouseID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMouseNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetMouseFocus = func() *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMouseFocus)
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetMouseState = func(x *float32, y *float32) MouseButtonFlags {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMouseState, uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)))
		__r0 := MouseButtonFlags(_r0)
		runtime.KeepAlive(x)
		runtime.KeepAlive(y)
		return __r0
	}
	iGetGlobalMouseState = func(x *float32, y *float32) MouseButtonFlags {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGlobalMouseState, uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)))
		__r0 := MouseButtonFlags(_r0)
		runtime.KeepAlive(x)
		runtime.KeepAlive(y)
		return __r0
	}
	iGetRelativeMouseState = func(x *float32, y *float32) MouseButtonFlags {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRelativeMouseState, uintptr(unsafe.Pointer(x)), uintptr(unsafe.Pointer(y)))
		__r0 := MouseButtonFlags(_r0)
		runtime.KeepAlive(x)
		runtime.KeepAlive(y)
		return __r0
	}
	purego.RegisterLibFunc(&iWarpMouseInWindow, _hnd_sdl, "SDL_WarpMouseInWindow")
	purego.RegisterLibFunc(&iWarpMouseGlobal, _hnd_sdl, "SDL_WarpMouseGlobal")
	iSetWindowRelativeMouseMode = func(window *Window, enabled bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetWindowRelativeMouseMode, uintptr(unsafe.Pointer(window)), puregogen.BoolToUintptr(enabled))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iGetWindowRelativeMouseMode = func(window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowRelativeMouseMode, uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(window)
		return __r0
	}
	iCaptureMouse = func(enabled bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CaptureMouse, puregogen.BoolToUintptr(enabled))
		__r0 := _r0 != 0
		return __r0
	}
	iCreateCursor = func(data *uint8, mask *uint8, w int32, h int32, hot_x int32, hot_y int32) *Cursor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateCursor, uintptr(unsafe.Pointer(data)), uintptr(unsafe.Pointer(mask)), uintptr(w), uintptr(h), uintptr(hot_x), uintptr(hot_y))
		__r0 := (*Cursor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(data)
		runtime.KeepAlive(mask)
		return __r0
	}
	iCreateColorCursor = func(surface *Surface, hot_x int32, hot_y int32) *Cursor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateColorCursor, uintptr(unsafe.Pointer(surface)), uintptr(hot_x), uintptr(hot_y))
		__r0 := (*Cursor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iCreateSystemCursor = func(id SystemCursor) *Cursor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSystemCursor, uintptr(id))
		__r0 := (*Cursor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iSetCursor = func(cursor *Cursor) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetCursor, uintptr(unsafe.Pointer(cursor)))
		__r0 := _r0 != 0
		runtime.KeepAlive(cursor)
		return __r0
	}
	iGetCursor = func() *Cursor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCursor)
		__r0 := (*Cursor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetDefaultCursor = func() *Cursor {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDefaultCursor)
		__r0 := (*Cursor)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroyCursor = func(cursor *Cursor) {
		purego.SyscallN(_addr_SDL_DestroyCursor, uintptr(unsafe.Pointer(cursor)))
		runtime.KeepAlive(cursor)
	}
	iShowCursor = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShowCursor)
		__r0 := _r0 != 0
		return __r0
	}
	iHideCursor = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HideCursor)
		__r0 := _r0 != 0
		return __r0
	}
	iCursorVisible = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CursorVisible)
		__r0 := _r0 != 0
		return __r0
	}
	iGetTouchDevices = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTouchDevices, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetTouchDeviceName = func(touchID TouchID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTouchDeviceName, uintptr(touchID))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetTouchDeviceType = func(touchID TouchID) TouchDeviceType {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTouchDeviceType, uintptr(touchID))
		__r0 := TouchDeviceType(_r0)
		return __r0
	}
	iGetTouchFingers = func(touchID TouchID, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTouchFingers, uintptr(touchID), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iPumpEvents = func() {
		purego.SyscallN(_addr_SDL_PumpEvents)
	}
	iPeepEvents = func(events *Event, numevents int32, action EventAction, minType uint32, maxType uint32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PeepEvents, uintptr(unsafe.Pointer(events)), uintptr(numevents), uintptr(action), uintptr(minType), uintptr(maxType))
		__r0 := int32(_r0)
		runtime.KeepAlive(events)
		return __r0
	}
	iHasEvent = func(typ uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasEvent, uintptr(typ))
		__r0 := _r0 != 0
		return __r0
	}
	iHasEvents = func(minType uint32, maxType uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HasEvents, uintptr(minType), uintptr(maxType))
		__r0 := _r0 != 0
		return __r0
	}
	iFlushEvent = func(typ uint32) {
		purego.SyscallN(_addr_SDL_FlushEvent, uintptr(typ))
	}
	iFlushEvents = func(minType uint32, maxType uint32) {
		purego.SyscallN(_addr_SDL_FlushEvents, uintptr(minType), uintptr(maxType))
	}
	iPollEvent = func(event *Event) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PollEvent, uintptr(unsafe.Pointer(event)))
		__r0 := _r0 != 0
		runtime.KeepAlive(event)
		return __r0
	}
	iWaitEvent = func(event *Event) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitEvent, uintptr(unsafe.Pointer(event)))
		__r0 := _r0 != 0
		runtime.KeepAlive(event)
		return __r0
	}
	iWaitEventTimeout = func(event *Event, timeoutMS int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitEventTimeout, uintptr(unsafe.Pointer(event)), uintptr(timeoutMS))
		__r0 := _r0 != 0
		runtime.KeepAlive(event)
		return __r0
	}
	iPushEvent = func(event *Event) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PushEvent, uintptr(unsafe.Pointer(event)))
		__r0 := _r0 != 0
		runtime.KeepAlive(event)
		return __r0
	}
	iSetEventFilter = func(filter EventFilter, userdata uintptr) {
		purego.SyscallN(_addr_SDL_SetEventFilter, uintptr(filter), uintptr(userdata))
	}
	iGetEventFilter = func(filter *EventFilter, userdata *uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetEventFilter, uintptr(unsafe.Pointer(filter)), uintptr(unsafe.Pointer(userdata)))
		__r0 := _r0 != 0
		runtime.KeepAlive(filter)
		runtime.KeepAlive(userdata)
		return __r0
	}
	iAddEventWatch = func(filter EventFilter, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddEventWatch, uintptr(filter), uintptr(userdata))
		__r0 := _r0 != 0
		return __r0
	}
	iRemoveEventWatch = func(filter EventFilter, userdata uintptr) {
		purego.SyscallN(_addr_SDL_RemoveEventWatch, uintptr(filter), uintptr(userdata))
	}
	iFilterEvents = func(filter EventFilter, userdata uintptr) {
		purego.SyscallN(_addr_SDL_FilterEvents, uintptr(filter), uintptr(userdata))
	}
	iSetEventEnabled = func(typ uint32, enabled bool) {
		purego.SyscallN(_addr_SDL_SetEventEnabled, uintptr(typ), puregogen.BoolToUintptr(enabled))
	}
	iEventEnabled = func(typ uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EventEnabled, uintptr(typ))
		__r0 := _r0 != 0
		return __r0
	}
	iRegisterEvents = func(numevents int32) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RegisterEvents, uintptr(numevents))
		__r0 := uint32(_r0)
		return __r0
	}
	iGetWindowFromEvent = func(event *Event) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetWindowFromEvent, uintptr(unsafe.Pointer(event)))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(event)
		return __r0
	}
	iGetBasePath = func() string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetBasePath)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetPrefPath = func(org string, app string) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPrefPath, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(org))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(app))))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(org)
		runtime.KeepAlive(app)
		return __r0
	}
	iGetUserFolder = func(folder Folder) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetUserFolder, uintptr(folder))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateDirectory = func(path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateDirectory, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		return __r0
	}
	iEnumerateDirectory = func(path string, callback EnumerateDirectoryCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EnumerateDirectory, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		return __r0
	}
	iRemovePath = func(path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RemovePath, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		return __r0
	}
	iRenamePath = func(oldpath string, newpath string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenamePath, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(oldpath))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(newpath))))
		__r0 := _r0 != 0
		runtime.KeepAlive(oldpath)
		runtime.KeepAlive(newpath)
		return __r0
	}
	iCopyFile = func(oldpath string, newpath string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CopyFile, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(oldpath))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(newpath))))
		__r0 := _r0 != 0
		runtime.KeepAlive(oldpath)
		runtime.KeepAlive(newpath)
		return __r0
	}
	iGetPathInfo = func(path string, info *PathInfo) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPathInfo, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(info)))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		runtime.KeepAlive(info)
		return __r0
	}
	iGlobDirectory = func(path string, pattern string, flags GlobFlags, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GlobDirectory, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(pattern))), uintptr(flags), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(path)
		runtime.KeepAlive(pattern)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetCurrentDirectory = func() uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentDirectory)
		__r0 := uintptr(_r0)
		return __r0
	}
	iGPUSupportsShaderFormats = func(format_flags GPUShaderFormat, name *byte) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GPUSupportsShaderFormats, uintptr(format_flags), uintptr(unsafe.Pointer(name)))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iGPUSupportsProperties = func(props PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GPUSupportsProperties, uintptr(props))
		__r0 := _r0 != 0
		return __r0
	}
	iCreateGPUDevice = func(format_flags GPUShaderFormat, debug_mode bool, name *byte) *GPUDevice {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUDevice, uintptr(format_flags), puregogen.BoolToUintptr(debug_mode), uintptr(unsafe.Pointer(name)))
		__r0 := (*GPUDevice)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(name)
		return __r0
	}
	iCreateGPUDeviceWithProperties = func(props PropertiesID) *GPUDevice {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUDeviceWithProperties, uintptr(props))
		__r0 := (*GPUDevice)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iDestroyGPUDevice = func(device *GPUDevice) {
		purego.SyscallN(_addr_SDL_DestroyGPUDevice, uintptr(unsafe.Pointer(device)))
		runtime.KeepAlive(device)
	}
	iGetNumGPUDrivers = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumGPUDrivers)
		__r0 := int32(_r0)
		return __r0
	}
	iGetGPUDriver = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGPUDriver, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetGPUDeviceDriver = func(device *GPUDevice) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGPUDeviceDriver, uintptr(unsafe.Pointer(device)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		return __r0
	}
	iGetGPUShaderFormats = func(device *GPUDevice) GPUShaderFormat {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGPUShaderFormats, uintptr(unsafe.Pointer(device)))
		__r0 := GPUShaderFormat(_r0)
		runtime.KeepAlive(device)
		return __r0
	}
	iCreateGPUGraphicsPipeline = func(device *GPUDevice, createinfo *GPUGraphicsPipelineCreateInfo) *GPUGraphicsPipeline {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUGraphicsPipeline, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(createinfo)))
		__r0 := (*GPUGraphicsPipeline)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(createinfo)
		return __r0
	}
	iCreateGPUSampler = func(device *GPUDevice, createinfo *GPUSamplerCreateInfo) *GPUSampler {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUSampler, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(createinfo)))
		__r0 := (*GPUSampler)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(createinfo)
		return __r0
	}
	iCreateGPUTexture = func(device *GPUDevice, createinfo *GPUTextureCreateInfo) *GPUTexture {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUTexture, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(createinfo)))
		__r0 := (*GPUTexture)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(createinfo)
		return __r0
	}
	iCreateGPUBuffer = func(device *GPUDevice, createinfo *GPUBufferCreateInfo) *GPUBuffer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(createinfo)))
		__r0 := (*GPUBuffer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(createinfo)
		return __r0
	}
	iCreateGPUTransferBuffer = func(device *GPUDevice, createinfo *GPUTransferBufferCreateInfo) *GPUTransferBuffer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateGPUTransferBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(createinfo)))
		__r0 := (*GPUTransferBuffer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(createinfo)
		return __r0
	}
	iSetGPUBufferName = func(device *GPUDevice, buffer *GPUBuffer, text string) {
		purego.SyscallN(_addr_SDL_SetGPUBufferName, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(buffer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text))))
		runtime.KeepAlive(device)
		runtime.KeepAlive(buffer)
		runtime.KeepAlive(text)
	}
	iSetGPUTextureName = func(device *GPUDevice, texture *GPUTexture, text string) {
		purego.SyscallN(_addr_SDL_SetGPUTextureName, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text))))
		runtime.KeepAlive(device)
		runtime.KeepAlive(texture)
		runtime.KeepAlive(text)
	}
	iInsertGPUDebugLabel = func(command_buffer *GPUCommandBuffer, text string) {
		purego.SyscallN(_addr_SDL_InsertGPUDebugLabel, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(text))))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(text)
	}
	iPushGPUDebugGroup = func(command_buffer *GPUCommandBuffer, name string) {
		purego.SyscallN(_addr_SDL_PushGPUDebugGroup, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(name)
	}
	iPopGPUDebugGroup = func(command_buffer *GPUCommandBuffer) {
		purego.SyscallN(_addr_SDL_PopGPUDebugGroup, uintptr(unsafe.Pointer(command_buffer)))
		runtime.KeepAlive(command_buffer)
	}
	iReleaseGPUTexture = func(device *GPUDevice, texture *GPUTexture) {
		purego.SyscallN(_addr_SDL_ReleaseGPUTexture, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(texture)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(texture)
	}
	iReleaseGPUSampler = func(device *GPUDevice, sampler *GPUSampler) {
		purego.SyscallN(_addr_SDL_ReleaseGPUSampler, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(sampler)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(sampler)
	}
	iReleaseGPUBuffer = func(device *GPUDevice, buffer *GPUBuffer) {
		purego.SyscallN(_addr_SDL_ReleaseGPUBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(buffer)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(buffer)
	}
	iReleaseGPUTransferBuffer = func(device *GPUDevice, transfer_buffer *GPUTransferBuffer) {
		purego.SyscallN(_addr_SDL_ReleaseGPUTransferBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(transfer_buffer)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(transfer_buffer)
	}
	iReleaseGPUComputePipeline = func(device *GPUDevice, compute_pipeline *GPUComputePipeline) {
		purego.SyscallN(_addr_SDL_ReleaseGPUComputePipeline, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(compute_pipeline)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(compute_pipeline)
	}
	iReleaseGPUShader = func(device *GPUDevice, shader *GPUShader) {
		purego.SyscallN(_addr_SDL_ReleaseGPUShader, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(shader)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(shader)
	}
	iReleaseGPUGraphicsPipeline = func(device *GPUDevice, graphics_pipeline *GPUGraphicsPipeline) {
		purego.SyscallN(_addr_SDL_ReleaseGPUGraphicsPipeline, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(graphics_pipeline)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(graphics_pipeline)
	}
	iAcquireGPUCommandBuffer = func(device *GPUDevice) *GPUCommandBuffer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AcquireGPUCommandBuffer, uintptr(unsafe.Pointer(device)))
		__r0 := (*GPUCommandBuffer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(device)
		return __r0
	}
	iPushGPUVertexUniformData = func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32) {
		purego.SyscallN(_addr_SDL_PushGPUVertexUniformData, uintptr(unsafe.Pointer(command_buffer)), uintptr(slot_index), uintptr(data), uintptr(length))
		runtime.KeepAlive(command_buffer)
	}
	iPushGPUFragmentUniformData = func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32) {
		purego.SyscallN(_addr_SDL_PushGPUFragmentUniformData, uintptr(unsafe.Pointer(command_buffer)), uintptr(slot_index), uintptr(data), uintptr(length))
		runtime.KeepAlive(command_buffer)
	}
	iPushGPUComputeUniformData = func(command_buffer *GPUCommandBuffer, slot_index uint32, data uintptr, length uint32) {
		purego.SyscallN(_addr_SDL_PushGPUComputeUniformData, uintptr(unsafe.Pointer(command_buffer)), uintptr(slot_index), uintptr(data), uintptr(length))
		runtime.KeepAlive(command_buffer)
	}
	iBeginGPURenderPass = func(command_buffer *GPUCommandBuffer, color_target_infos *GPUColorTargetInfo, num_color_targets uint32, depth_stencil_target_info *GPUDepthStencilTargetInfo) *GPURenderPass {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BeginGPURenderPass, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(color_target_infos)), uintptr(num_color_targets), uintptr(unsafe.Pointer(depth_stencil_target_info)))
		__r0 := (*GPURenderPass)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(color_target_infos)
		runtime.KeepAlive(depth_stencil_target_info)
		return __r0
	}
	iBindGPUGraphicsPipeline = func(render_pass *GPURenderPass, graphics_pipeline *GPUGraphicsPipeline) {
		purego.SyscallN(_addr_SDL_BindGPUGraphicsPipeline, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(graphics_pipeline)))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(graphics_pipeline)
	}
	iSetGPUViewport = func(render_pass *GPURenderPass, viewport *GPUViewport) {
		purego.SyscallN(_addr_SDL_SetGPUViewport, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(viewport)))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(viewport)
	}
	iSetGPUScissor = func(render_pass *GPURenderPass, scissor *Rect) {
		purego.SyscallN(_addr_SDL_SetGPUScissor, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(scissor)))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(scissor)
	}
	iSetGPUStencilReference = func(render_pass *GPURenderPass, reference uint8) {
		purego.SyscallN(_addr_SDL_SetGPUStencilReference, uintptr(unsafe.Pointer(render_pass)), uintptr(reference))
		runtime.KeepAlive(render_pass)
	}
	iBindGPUVertexBuffers = func(render_pass *GPURenderPass, first_slot uint32, bindings *GPUBufferBinding, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUVertexBuffers, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(bindings)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(bindings)
	}
	iBindGPUIndexBuffer = func(render_pass *GPURenderPass, binding *GPUBufferBinding, index_element_size GPUIndexElementSize) {
		purego.SyscallN(_addr_SDL_BindGPUIndexBuffer, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(binding)), uintptr(index_element_size))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(binding)
	}
	iBindGPUVertexSamplers = func(render_pass *GPURenderPass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUVertexSamplers, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(texture_sampler_bindings)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(texture_sampler_bindings)
	}
	iBindGPUVertexStorageTextures = func(render_pass *GPURenderPass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUVertexStorageTextures, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_textures)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(storage_textures)
	}
	iBindGPUVertexStorageBuffers = func(render_pass *GPURenderPass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUVertexStorageBuffers, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_buffers)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(storage_buffers)
	}
	iBindGPUFragmentSamplers = func(render_pass *GPURenderPass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUFragmentSamplers, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(texture_sampler_bindings)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(texture_sampler_bindings)
	}
	iBindGPUFragmentStorageTextures = func(render_pass *GPURenderPass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUFragmentStorageTextures, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_textures)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(storage_textures)
	}
	iBindGPUFragmentStorageBuffers = func(render_pass *GPURenderPass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUFragmentStorageBuffers, uintptr(unsafe.Pointer(render_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_buffers)), uintptr(num_bindings))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(storage_buffers)
	}
	iDrawGPUIndexedPrimitives = func(render_pass *GPURenderPass, num_indices uint32, num_instances uint32, first_index uint32, vertex_offset int32, first_instance uint32) {
		purego.SyscallN(_addr_SDL_DrawGPUIndexedPrimitives, uintptr(unsafe.Pointer(render_pass)), uintptr(num_indices), uintptr(num_instances), uintptr(first_index), uintptr(vertex_offset), uintptr(first_instance))
		runtime.KeepAlive(render_pass)
	}
	iDrawGPUPrimitives = func(render_pass *GPURenderPass, num_vertices uint32, num_instances uint32, first_vertex uint32, first_instance uint32) {
		purego.SyscallN(_addr_SDL_DrawGPUPrimitives, uintptr(unsafe.Pointer(render_pass)), uintptr(num_vertices), uintptr(num_instances), uintptr(first_vertex), uintptr(first_instance))
		runtime.KeepAlive(render_pass)
	}
	iDrawGPUPrimitivesIndirect = func(render_pass *GPURenderPass, buffer *GPUBuffer, offset uint32, draw_count uint32) {
		purego.SyscallN(_addr_SDL_DrawGPUPrimitivesIndirect, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(buffer)), uintptr(offset), uintptr(draw_count))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(buffer)
	}
	iDrawGPUIndexedPrimitivesIndirect = func(render_pass *GPURenderPass, buffer *GPUBuffer, offset uint32, draw_count uint32) {
		purego.SyscallN(_addr_SDL_DrawGPUIndexedPrimitivesIndirect, uintptr(unsafe.Pointer(render_pass)), uintptr(unsafe.Pointer(buffer)), uintptr(offset), uintptr(draw_count))
		runtime.KeepAlive(render_pass)
		runtime.KeepAlive(buffer)
	}
	iEndGPURenderPass = func(render_pass *GPURenderPass) {
		purego.SyscallN(_addr_SDL_EndGPURenderPass, uintptr(unsafe.Pointer(render_pass)))
		runtime.KeepAlive(render_pass)
	}
	iBeginGPUComputePass = func(command_buffer *GPUCommandBuffer, storage_texture_bindings *GPUStorageTextureReadWriteBinding, num_storage_texture_bindings uint32, storage_buffer_bindings *GPUStorageBufferReadWriteBinding, num_storage_buffer_bindings uint32) *GPUComputePass {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BeginGPUComputePass, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(storage_texture_bindings)), uintptr(num_storage_texture_bindings), uintptr(unsafe.Pointer(storage_buffer_bindings)), uintptr(num_storage_buffer_bindings))
		__r0 := (*GPUComputePass)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(storage_texture_bindings)
		runtime.KeepAlive(storage_buffer_bindings)
		return __r0
	}
	iBindGPUComputePipeline = func(compute_pass *GPUComputePass, compute_pipeline *GPUComputePipeline) {
		purego.SyscallN(_addr_SDL_BindGPUComputePipeline, uintptr(unsafe.Pointer(compute_pass)), uintptr(unsafe.Pointer(compute_pipeline)))
		runtime.KeepAlive(compute_pass)
		runtime.KeepAlive(compute_pipeline)
	}
	iBindGPUComputeSamplers = func(compute_pass *GPUComputePass, first_slot uint32, texture_sampler_bindings *GPUTextureSamplerBinding, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUComputeSamplers, uintptr(unsafe.Pointer(compute_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(texture_sampler_bindings)), uintptr(num_bindings))
		runtime.KeepAlive(compute_pass)
		runtime.KeepAlive(texture_sampler_bindings)
	}
	iBindGPUComputeStorageTextures = func(compute_pass *GPUComputePass, first_slot uint32, storage_textures **GPUTexture, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUComputeStorageTextures, uintptr(unsafe.Pointer(compute_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_textures)), uintptr(num_bindings))
		runtime.KeepAlive(compute_pass)
		runtime.KeepAlive(storage_textures)
	}
	iBindGPUComputeStorageBuffers = func(compute_pass *GPUComputePass, first_slot uint32, storage_buffers **GPUBuffer, num_bindings uint32) {
		purego.SyscallN(_addr_SDL_BindGPUComputeStorageBuffers, uintptr(unsafe.Pointer(compute_pass)), uintptr(first_slot), uintptr(unsafe.Pointer(storage_buffers)), uintptr(num_bindings))
		runtime.KeepAlive(compute_pass)
		runtime.KeepAlive(storage_buffers)
	}
	iDispatchGPUCompute = func(compute_pass *GPUComputePass, groupcount_x uint32, groupcount_y uint32, groupcount_z uint32) {
		purego.SyscallN(_addr_SDL_DispatchGPUCompute, uintptr(unsafe.Pointer(compute_pass)), uintptr(groupcount_x), uintptr(groupcount_y), uintptr(groupcount_z))
		runtime.KeepAlive(compute_pass)
	}
	iDispatchGPUComputeIndirect = func(compute_pass *GPUComputePass, buffer *GPUBuffer, offset uint32) {
		purego.SyscallN(_addr_SDL_DispatchGPUComputeIndirect, uintptr(unsafe.Pointer(compute_pass)), uintptr(unsafe.Pointer(buffer)), uintptr(offset))
		runtime.KeepAlive(compute_pass)
		runtime.KeepAlive(buffer)
	}
	iEndGPUComputePass = func(compute_pass *GPUComputePass) {
		purego.SyscallN(_addr_SDL_EndGPUComputePass, uintptr(unsafe.Pointer(compute_pass)))
		runtime.KeepAlive(compute_pass)
	}
	iMapGPUTransferBuffer = func(device *GPUDevice, transfer_buffer *GPUTransferBuffer, cycle bool) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_MapGPUTransferBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(transfer_buffer)), puregogen.BoolToUintptr(cycle))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(device)
		runtime.KeepAlive(transfer_buffer)
		return __r0
	}
	iUnmapGPUTransferBuffer = func(device *GPUDevice, transfer_buffer *GPUTransferBuffer) {
		purego.SyscallN(_addr_SDL_UnmapGPUTransferBuffer, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(transfer_buffer)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(transfer_buffer)
	}
	iBeginGPUCopyPass = func(command_buffer *GPUCommandBuffer) *GPUCopyPass {
		_r0, _, _ := purego.SyscallN(_addr_SDL_BeginGPUCopyPass, uintptr(unsafe.Pointer(command_buffer)))
		__r0 := (*GPUCopyPass)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(command_buffer)
		return __r0
	}
	iUploadToGPUTexture = func(copy_pass *GPUCopyPass, source *GPUTextureTransferInfo, destination *GPUTextureRegion, cycle bool) {
		purego.SyscallN(_addr_SDL_UploadToGPUTexture, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)), puregogen.BoolToUintptr(cycle))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iUploadToGPUBuffer = func(copy_pass *GPUCopyPass, source *GPUTransferBufferLocation, destination *GPUBufferRegion, cycle bool) {
		purego.SyscallN(_addr_SDL_UploadToGPUBuffer, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)), puregogen.BoolToUintptr(cycle))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iCopyGPUTextureToTexture = func(copy_pass *GPUCopyPass, source *GPUTextureLocation, destination *GPUTextureLocation, w uint32, h uint32, d uint32, cycle bool) {
		purego.SyscallN(_addr_SDL_CopyGPUTextureToTexture, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)), uintptr(w), uintptr(h), uintptr(d), puregogen.BoolToUintptr(cycle))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iCopyGPUBufferToBuffer = func(copy_pass *GPUCopyPass, source *GPUBufferLocation, destination *GPUBufferLocation, size uint32, cycle bool) {
		purego.SyscallN(_addr_SDL_CopyGPUBufferToBuffer, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)), uintptr(size), puregogen.BoolToUintptr(cycle))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iDownloadFromGPUTexture = func(copy_pass *GPUCopyPass, source *GPUTextureRegion, destination *GPUTextureTransferInfo) {
		purego.SyscallN(_addr_SDL_DownloadFromGPUTexture, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iDownloadFromGPUBuffer = func(copy_pass *GPUCopyPass, source *GPUBufferRegion, destination *GPUTransferBufferLocation) {
		purego.SyscallN(_addr_SDL_DownloadFromGPUBuffer, uintptr(unsafe.Pointer(copy_pass)), uintptr(unsafe.Pointer(source)), uintptr(unsafe.Pointer(destination)))
		runtime.KeepAlive(copy_pass)
		runtime.KeepAlive(source)
		runtime.KeepAlive(destination)
	}
	iEndGPUCopyPass = func(copy_pass *GPUCopyPass) {
		purego.SyscallN(_addr_SDL_EndGPUCopyPass, uintptr(unsafe.Pointer(copy_pass)))
		runtime.KeepAlive(copy_pass)
	}
	iGenerateMipmapsForGPUTexture = func(command_buffer *GPUCommandBuffer, texture *GPUTexture) {
		purego.SyscallN(_addr_SDL_GenerateMipmapsForGPUTexture, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(texture)))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(texture)
	}
	iBlitGPUTexture = func(command_buffer *GPUCommandBuffer, info *GPUBlitInfo) {
		purego.SyscallN(_addr_SDL_BlitGPUTexture, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(info)))
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(info)
	}
	iWindowSupportsGPUSwapchainComposition = func(device *GPUDevice, window *Window, swapchain_composition GPUSwapchainComposition) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WindowSupportsGPUSwapchainComposition, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)), uintptr(swapchain_composition))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iWindowSupportsGPUPresentMode = func(device *GPUDevice, window *Window, present_mode GPUPresentMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WindowSupportsGPUPresentMode, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)), uintptr(present_mode))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iClaimWindowForGPUDevice = func(device *GPUDevice, window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ClaimWindowForGPUDevice, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iReleaseWindowFromGPUDevice = func(device *GPUDevice, window *Window) {
		purego.SyscallN(_addr_SDL_ReleaseWindowFromGPUDevice, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
	}
	iSetGPUSwapchainParameters = func(device *GPUDevice, window *Window, swapchain_composition GPUSwapchainComposition, present_mode GPUPresentMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGPUSwapchainParameters, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)), uintptr(swapchain_composition), uintptr(present_mode))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iSetGPUAllowedFramesInFlight = func(device *GPUDevice, allowed_frames_in_flight uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetGPUAllowedFramesInFlight, uintptr(unsafe.Pointer(device)), uintptr(allowed_frames_in_flight))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		return __r0
	}
	iGetGPUSwapchainTextureFormat = func(device *GPUDevice, window *Window) GPUTextureFormat {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetGPUSwapchainTextureFormat, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)))
		__r0 := GPUTextureFormat(_r0)
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iAcquireGPUSwapchainTexture = func(command_buffer *GPUCommandBuffer, window *Window, swapchain_texture **GPUTexture, swapchain_texture_width *uint32, swapchain_texture_height *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AcquireGPUSwapchainTexture, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(swapchain_texture)), uintptr(unsafe.Pointer(swapchain_texture_width)), uintptr(unsafe.Pointer(swapchain_texture_height)))
		__r0 := _r0 != 0
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(window)
		runtime.KeepAlive(swapchain_texture)
		runtime.KeepAlive(swapchain_texture_width)
		runtime.KeepAlive(swapchain_texture_height)
		return __r0
	}
	iWaitForGPUSwapchain = func(device *GPUDevice, window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitForGPUSwapchain, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(window)
		return __r0
	}
	iWaitAndAcquireGPUSwapchainTexture = func(command_buffer *GPUCommandBuffer, window *Window, swapchain_texture **GPUTexture, swapchain_texture_width *uint32, swapchain_texture_height *uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitAndAcquireGPUSwapchainTexture, uintptr(unsafe.Pointer(command_buffer)), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(swapchain_texture)), uintptr(unsafe.Pointer(swapchain_texture_width)), uintptr(unsafe.Pointer(swapchain_texture_height)))
		__r0 := _r0 != 0
		runtime.KeepAlive(command_buffer)
		runtime.KeepAlive(window)
		runtime.KeepAlive(swapchain_texture)
		runtime.KeepAlive(swapchain_texture_width)
		runtime.KeepAlive(swapchain_texture_height)
		return __r0
	}
	iSubmitGPUCommandBuffer = func(command_buffer *GPUCommandBuffer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SubmitGPUCommandBuffer, uintptr(unsafe.Pointer(command_buffer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(command_buffer)
		return __r0
	}
	iSubmitGPUCommandBufferAndAcquireFence = func(command_buffer *GPUCommandBuffer) *GPUFence {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SubmitGPUCommandBufferAndAcquireFence, uintptr(unsafe.Pointer(command_buffer)))
		__r0 := (*GPUFence)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(command_buffer)
		return __r0
	}
	iCancelGPUCommandBuffer = func(command_buffer *GPUCommandBuffer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CancelGPUCommandBuffer, uintptr(unsafe.Pointer(command_buffer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(command_buffer)
		return __r0
	}
	iWaitForGPUIdle = func(device *GPUDevice) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitForGPUIdle, uintptr(unsafe.Pointer(device)))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		return __r0
	}
	iWaitForGPUFences = func(device *GPUDevice, wait_all bool, fences **GPUFence, num_fences uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitForGPUFences, uintptr(unsafe.Pointer(device)), puregogen.BoolToUintptr(wait_all), uintptr(unsafe.Pointer(fences)), uintptr(num_fences))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(fences)
		return __r0
	}
	iQueryGPUFence = func(device *GPUDevice, fence *GPUFence) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_QueryGPUFence, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(fence)))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		runtime.KeepAlive(fence)
		return __r0
	}
	iReleaseGPUFence = func(device *GPUDevice, fence *GPUFence) {
		purego.SyscallN(_addr_SDL_ReleaseGPUFence, uintptr(unsafe.Pointer(device)), uintptr(unsafe.Pointer(fence)))
		runtime.KeepAlive(device)
		runtime.KeepAlive(fence)
	}
	iGPUTextureFormatTexelBlockSize = func(format GPUTextureFormat) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GPUTextureFormatTexelBlockSize, uintptr(format))
		__r0 := uint32(_r0)
		return __r0
	}
	iGPUTextureSupportsFormat = func(device *GPUDevice, format GPUTextureFormat, typ GPUTextureType, usage GPUTextureUsageFlags) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GPUTextureSupportsFormat, uintptr(unsafe.Pointer(device)), uintptr(format), uintptr(typ), uintptr(usage))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		return __r0
	}
	iGPUTextureSupportsSampleCount = func(device *GPUDevice, format GPUTextureFormat, sample_count GPUSampleCount) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GPUTextureSupportsSampleCount, uintptr(unsafe.Pointer(device)), uintptr(format), uintptr(sample_count))
		__r0 := _r0 != 0
		runtime.KeepAlive(device)
		return __r0
	}
	iCalculateGPUTextureFormatSize = func(format GPUTextureFormat, width uint32, height uint32, depth_or_layer_count uint32) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CalculateGPUTextureFormatSize, uintptr(format), uintptr(width), uintptr(height), uintptr(depth_or_layer_count))
		__r0 := uint32(_r0)
		return __r0
	}
	iGetHaptics = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHaptics, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iGetHapticNameForID = func(instance_id HapticID) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticNameForID, uintptr(instance_id))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iOpenHaptic = func(instance_id HapticID) *Haptic {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenHaptic, uintptr(instance_id))
		__r0 := (*Haptic)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetHapticFromID = func(instance_id HapticID) *Haptic {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticFromID, uintptr(instance_id))
		__r0 := (*Haptic)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetHapticID = func(haptic *Haptic) HapticID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticID, uintptr(unsafe.Pointer(haptic)))
		__r0 := HapticID(_r0)
		runtime.KeepAlive(haptic)
		return __r0
	}
	iGetHapticName = func(haptic *Haptic) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticName, uintptr(unsafe.Pointer(haptic)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(haptic)
		return __r0
	}
	iIsMouseHaptic = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsMouseHaptic)
		__r0 := _r0 != 0
		return __r0
	}
	iOpenHapticFromMouse = func() *Haptic {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenHapticFromMouse)
		__r0 := (*Haptic)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iIsJoystickHaptic = func(joystick *Joystick) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsJoystickHaptic, uintptr(unsafe.Pointer(joystick)))
		__r0 := _r0 != 0
		runtime.KeepAlive(joystick)
		return __r0
	}
	iOpenHapticFromJoystick = func(joystick *Joystick) *Haptic {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenHapticFromJoystick, uintptr(unsafe.Pointer(joystick)))
		__r0 := (*Haptic)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(joystick)
		return __r0
	}
	iCloseHaptic = func(haptic *Haptic) {
		purego.SyscallN(_addr_SDL_CloseHaptic, uintptr(unsafe.Pointer(haptic)))
		runtime.KeepAlive(haptic)
	}
	iGetMaxHapticEffects = func(haptic *Haptic) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMaxHapticEffects, uintptr(unsafe.Pointer(haptic)))
		__r0 := int32(_r0)
		runtime.KeepAlive(haptic)
		return __r0
	}
	iGetMaxHapticEffectsPlaying = func(haptic *Haptic) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetMaxHapticEffectsPlaying, uintptr(unsafe.Pointer(haptic)))
		__r0 := int32(_r0)
		runtime.KeepAlive(haptic)
		return __r0
	}
	iGetHapticFeatures = func(haptic *Haptic) uint32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticFeatures, uintptr(unsafe.Pointer(haptic)))
		__r0 := uint32(_r0)
		runtime.KeepAlive(haptic)
		return __r0
	}
	iGetNumHapticAxes = func(haptic *Haptic) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumHapticAxes, uintptr(unsafe.Pointer(haptic)))
		__r0 := int32(_r0)
		runtime.KeepAlive(haptic)
		return __r0
	}
	iHapticEffectSupported = func(haptic *Haptic, effect *HapticEffect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HapticEffectSupported, uintptr(unsafe.Pointer(haptic)), uintptr(unsafe.Pointer(effect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		runtime.KeepAlive(effect)
		return __r0
	}
	iCreateHapticEffect = func(haptic *Haptic, effect *HapticEffect) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateHapticEffect, uintptr(unsafe.Pointer(haptic)), uintptr(unsafe.Pointer(effect)))
		__r0 := int32(_r0)
		runtime.KeepAlive(haptic)
		runtime.KeepAlive(effect)
		return __r0
	}
	iUpdateHapticEffect = func(haptic *Haptic, effect int32, data *HapticEffect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateHapticEffect, uintptr(unsafe.Pointer(haptic)), uintptr(effect), uintptr(unsafe.Pointer(data)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		runtime.KeepAlive(data)
		return __r0
	}
	iRunHapticEffect = func(haptic *Haptic, effect int32, iterations uint32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RunHapticEffect, uintptr(unsafe.Pointer(haptic)), uintptr(effect), uintptr(iterations))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iStopHapticEffect = func(haptic *Haptic, effect int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StopHapticEffect, uintptr(unsafe.Pointer(haptic)), uintptr(effect))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iDestroyHapticEffect = func(haptic *Haptic, effect int32) {
		purego.SyscallN(_addr_SDL_DestroyHapticEffect, uintptr(unsafe.Pointer(haptic)), uintptr(effect))
		runtime.KeepAlive(haptic)
	}
	iGetHapticEffectStatus = func(haptic *Haptic, effect int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHapticEffectStatus, uintptr(unsafe.Pointer(haptic)), uintptr(effect))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iSetHapticGain = func(haptic *Haptic, gain int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetHapticGain, uintptr(unsafe.Pointer(haptic)), uintptr(gain))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iSetHapticAutocenter = func(haptic *Haptic, autocenter int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetHapticAutocenter, uintptr(unsafe.Pointer(haptic)), uintptr(autocenter))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iPauseHaptic = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_PauseHaptic, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iResumeHaptic = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ResumeHaptic, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iStopHapticEffects = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StopHapticEffects, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iHapticRumbleSupported = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_HapticRumbleSupported, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iInitHapticRumble = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_InitHapticRumble, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	purego.RegisterLibFunc(&iPlayHapticRumble, _hnd_sdl, "SDL_PlayHapticRumble")
	iStopHapticRumble = func(haptic *Haptic) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StopHapticRumble, uintptr(unsafe.Pointer(haptic)))
		__r0 := _r0 != 0
		runtime.KeepAlive(haptic)
		return __r0
	}
	iSetHintWithPriority = func(name string, value string, priority HintPriority) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetHintWithPriority, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(value))), uintptr(priority))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		runtime.KeepAlive(value)
		return __r0
	}
	iSetHint = func(name string, value string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetHint, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(value))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		runtime.KeepAlive(value)
		return __r0
	}
	iResetHint = func(name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ResetHint, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iResetHints = func() {
		purego.SyscallN(_addr_SDL_ResetHints)
	}
	iGetHint = func(name string) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHint, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(name)
		return __r0
	}
	iGetHintBoolean = func(name string, default_value bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetHintBoolean, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), puregogen.BoolToUintptr(default_value))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iAddHintCallback = func(name string, callback HintCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddHintCallback, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iRemoveHintCallback = func(name string, callback HintCallback, userdata uintptr) {
		purego.SyscallN(_addr_SDL_RemoveHintCallback, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(callback), uintptr(userdata))
		runtime.KeepAlive(name)
	}
	iInit = func(flags InitFlags) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_Init, uintptr(flags))
		__r0 := _r0 != 0
		return __r0
	}
	iInitSubSystem = func(flags InitFlags) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_InitSubSystem, uintptr(flags))
		__r0 := _r0 != 0
		return __r0
	}
	iQuitSubSystem = func(flags InitFlags) {
		purego.SyscallN(_addr_SDL_QuitSubSystem, uintptr(flags))
	}
	iWasInit = func(flags InitFlags) InitFlags {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WasInit, uintptr(flags))
		__r0 := InitFlags(_r0)
		return __r0
	}
	iQuit = func() {
		purego.SyscallN(_addr_SDL_Quit)
	}
	iIsMainThread = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsMainThread)
		__r0 := _r0 != 0
		return __r0
	}
	iRunOnMainThread = func(callback MainThreadCallback, userdata uintptr, wait_complete bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RunOnMainThread, uintptr(callback), uintptr(userdata), puregogen.BoolToUintptr(wait_complete))
		__r0 := _r0 != 0
		return __r0
	}
	iSetAppMetadata = func(appname string, appversion string, appidentifier string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAppMetadata, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(appname))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(appversion))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(appidentifier))))
		__r0 := _r0 != 0
		runtime.KeepAlive(appname)
		runtime.KeepAlive(appversion)
		runtime.KeepAlive(appidentifier)
		return __r0
	}
	iSetAppMetadataProperty = func(name string, value string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetAppMetadataProperty, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(value))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		runtime.KeepAlive(value)
		return __r0
	}
	iGetAppMetadataProperty = func(name string) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetAppMetadataProperty, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(name)
		return __r0
	}
	iLoadObject = func(sofile string) *SharedObject {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadObject, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(sofile))))
		__r0 := (*SharedObject)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(sofile)
		return __r0
	}
	iLoadFunction = func(handle *SharedObject, name string) FunctionPointer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LoadFunction, uintptr(unsafe.Pointer(handle)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := FunctionPointer(_r0)
		runtime.KeepAlive(handle)
		runtime.KeepAlive(name)
		return __r0
	}
	iUnloadObject = func(handle *SharedObject) {
		purego.SyscallN(_addr_SDL_UnloadObject, uintptr(unsafe.Pointer(handle)))
		runtime.KeepAlive(handle)
	}
	iGetPreferredLocales = func(count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPreferredLocales, uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(count)
		return __r0
	}
	iSetLogPriorities = func(priority LogPriority) {
		purego.SyscallN(_addr_SDL_SetLogPriorities, uintptr(priority))
	}
	iSetLogPriority = func(category int32, priority LogPriority) {
		purego.SyscallN(_addr_SDL_SetLogPriority, uintptr(category), uintptr(priority))
	}
	iGetLogPriority = func(category int32) LogPriority {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetLogPriority, uintptr(category))
		__r0 := LogPriority(_r0)
		return __r0
	}
	iResetLogPriorities = func() {
		purego.SyscallN(_addr_SDL_ResetLogPriorities)
	}
	iSetLogPriorityPrefix = func(priority LogPriority, prefix string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetLogPriorityPrefix, uintptr(priority), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(prefix))))
		__r0 := _r0 != 0
		runtime.KeepAlive(prefix)
		return __r0
	}
	iLog = func(fmt string) {
		purego.SyscallN(_addr_SDL_Log, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogTrace = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogTrace, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogVerbose = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogVerbose, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogDebug = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogDebug, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogInfo = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogInfo, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogWarn = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogWarn, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogError = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogError, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogCritical = func(category int32, fmt string) {
		purego.SyscallN(_addr_SDL_LogCritical, uintptr(category), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogMessage = func(category int32, priority LogPriority, fmt string) {
		purego.SyscallN(_addr_SDL_LogMessage, uintptr(category), uintptr(priority), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))))
		runtime.KeepAlive(fmt)
	}
	iLogMessageV = func(category int32, priority LogPriority, fmt string, ap va_list) {
		purego.SyscallN(_addr_SDL_LogMessageV, uintptr(category), uintptr(priority), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(fmt))), uintptr(ap))
		runtime.KeepAlive(fmt)
	}
	iGetDefaultLogOutputFunction = func() LogOutputFunction {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDefaultLogOutputFunction)
		__r0 := LogOutputFunction(_r0)
		return __r0
	}
	iGetLogOutputFunction = func(callback *LogOutputFunction, userdata *uintptr) {
		purego.SyscallN(_addr_SDL_GetLogOutputFunction, uintptr(unsafe.Pointer(callback)), uintptr(unsafe.Pointer(userdata)))
		runtime.KeepAlive(callback)
		runtime.KeepAlive(userdata)
	}
	iSetLogOutputFunction = func(callback LogOutputFunction, userdata uintptr) {
		purego.SyscallN(_addr_SDL_SetLogOutputFunction, uintptr(callback), uintptr(userdata))
	}
	iShowSimpleMessageBox = func(flags MessageBoxFlags, title string, message string, window *Window) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ShowSimpleMessageBox, uintptr(flags), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(title))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(message))), uintptr(unsafe.Pointer(window)))
		__r0 := _r0 != 0
		runtime.KeepAlive(title)
		runtime.KeepAlive(message)
		runtime.KeepAlive(window)
		return __r0
	}
	iMetal_CreateView = func(window *Window) MetalView {
		_r0, _, _ := purego.SyscallN(_addr_SDL_Metal_CreateView, uintptr(unsafe.Pointer(window)))
		__r0 := MetalView(_r0)
		runtime.KeepAlive(window)
		return __r0
	}
	iMetal_DestroyView = func(view MetalView) {
		purego.SyscallN(_addr_SDL_Metal_DestroyView, uintptr(view))
	}
	iMetal_GetLayer = func(view MetalView) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_Metal_GetLayer, uintptr(view))
		__r0 := uintptr(_r0)
		return __r0
	}
	iOpenURL = func(url string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenURL, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(url))))
		__r0 := _r0 != 0
		runtime.KeepAlive(url)
		return __r0
	}
	iCreateProcess = func(args *string, pipe_stdio bool) *Process {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateProcess, uintptr(unsafe.Pointer(args)), puregogen.BoolToUintptr(pipe_stdio))
		__r0 := (*Process)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(args)
		return __r0
	}
	iCreateProcessWithProperties = func(props PropertiesID) *Process {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateProcessWithProperties, uintptr(props))
		__r0 := (*Process)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetProcessProperties = func(process *Process) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetProcessProperties, uintptr(unsafe.Pointer(process)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(process)
		return __r0
	}
	iReadProcess = func(process *Process, datasize *uintptr, exitcode *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadProcess, uintptr(unsafe.Pointer(process)), uintptr(unsafe.Pointer(datasize)), uintptr(unsafe.Pointer(exitcode)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(process)
		runtime.KeepAlive(datasize)
		runtime.KeepAlive(exitcode)
		return __r0
	}
	iGetProcessInput = func(process *Process) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetProcessInput, uintptr(unsafe.Pointer(process)))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(process)
		return __r0
	}
	iGetProcessOutput = func(process *Process) *IOStream {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetProcessOutput, uintptr(unsafe.Pointer(process)))
		__r0 := (*IOStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(process)
		return __r0
	}
	iKillProcess = func(process *Process, force bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_KillProcess, uintptr(unsafe.Pointer(process)), puregogen.BoolToUintptr(force))
		__r0 := _r0 != 0
		runtime.KeepAlive(process)
		return __r0
	}
	iWaitProcess = func(process *Process, block bool, exitcode *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WaitProcess, uintptr(unsafe.Pointer(process)), puregogen.BoolToUintptr(block), uintptr(unsafe.Pointer(exitcode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(process)
		runtime.KeepAlive(exitcode)
		return __r0
	}
	iDestroyProcess = func(process *Process) {
		purego.SyscallN(_addr_SDL_DestroyProcess, uintptr(unsafe.Pointer(process)))
		runtime.KeepAlive(process)
	}
	iGetNumRenderDrivers = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetNumRenderDrivers)
		__r0 := int32(_r0)
		return __r0
	}
	iGetRenderDriver = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderDriver, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateWindowAndRenderer = func(title string, width int32, height int32, window_flags WindowFlags, window **Window, renderer **Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateWindowAndRenderer, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(title))), uintptr(width), uintptr(height), uintptr(window_flags), uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(title)
		runtime.KeepAlive(window)
		runtime.KeepAlive(renderer)
		return __r0
	}
	iCreateRenderer = func(window *Window, name string) *Renderer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateRenderer, uintptr(unsafe.Pointer(window)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := (*Renderer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		runtime.KeepAlive(name)
		return __r0
	}
	iCreateRendererWithProperties = func(props PropertiesID) *Renderer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateRendererWithProperties, uintptr(props))
		__r0 := (*Renderer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateSoftwareRenderer = func(surface *Surface) *Renderer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateSoftwareRenderer, uintptr(unsafe.Pointer(surface)))
		__r0 := (*Renderer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(surface)
		return __r0
	}
	iGetRenderer = func(window *Window) *Renderer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderer, uintptr(unsafe.Pointer(window)))
		__r0 := (*Renderer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(window)
		return __r0
	}
	iGetRenderWindow = func(renderer *Renderer) *Window {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderWindow, uintptr(unsafe.Pointer(renderer)))
		__r0 := (*Window)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRendererName = func(renderer *Renderer) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRendererName, uintptr(unsafe.Pointer(renderer)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRendererProperties = func(renderer *Renderer) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRendererProperties, uintptr(unsafe.Pointer(renderer)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderOutputSize = func(renderer *Renderer, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderOutputSize, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iGetCurrentRenderOutputSize = func(renderer *Renderer, w *int32, h *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentRenderOutputSize, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iCreateTexture = func(renderer *Renderer, format PixelFormat, access TextureAccess, w int32, h int32) *Texture {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTexture, uintptr(unsafe.Pointer(renderer)), uintptr(format), uintptr(access), uintptr(w), uintptr(h))
		__r0 := (*Texture)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		return __r0
	}
	iCreateTextureFromSurface = func(renderer *Renderer, surface *Surface) *Texture {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTextureFromSurface, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(surface)))
		__r0 := (*Texture)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(surface)
		return __r0
	}
	iCreateTextureWithProperties = func(renderer *Renderer, props PropertiesID) *Texture {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTextureWithProperties, uintptr(unsafe.Pointer(renderer)), uintptr(props))
		__r0 := (*Texture)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetTextureProperties = func(texture *Texture) PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureProperties, uintptr(unsafe.Pointer(texture)))
		__r0 := PropertiesID(_r0)
		runtime.KeepAlive(texture)
		return __r0
	}
	iGetRendererFromTexture = func(texture *Texture) *Renderer {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRendererFromTexture, uintptr(unsafe.Pointer(texture)))
		__r0 := (*Renderer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(texture)
		return __r0
	}
	iGetTextureSize = func(texture *Texture, w *float32, h *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureSize, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		return __r0
	}
	iSetTextureColorMod = func(texture *Texture, r uint8, g uint8, b uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTextureColorMod, uintptr(unsafe.Pointer(texture)), uintptr(r), uintptr(g), uintptr(b))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		return __r0
	}
	purego.RegisterLibFunc(&iSetTextureColorModFloat, _hnd_sdl, "SDL_SetTextureColorModFloat")
	iGetTextureColorMod = func(texture *Texture, r *uint8, g *uint8, b *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureColorMod, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		return __r0
	}
	iGetTextureColorModFloat = func(texture *Texture, r *float32, g *float32, b *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureColorModFloat, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		return __r0
	}
	iSetTextureAlphaMod = func(texture *Texture, alpha uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTextureAlphaMod, uintptr(unsafe.Pointer(texture)), uintptr(alpha))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		return __r0
	}
	purego.RegisterLibFunc(&iSetTextureAlphaModFloat, _hnd_sdl, "SDL_SetTextureAlphaModFloat")
	iGetTextureAlphaMod = func(texture *Texture, alpha *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureAlphaMod, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(alpha)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(alpha)
		return __r0
	}
	iGetTextureAlphaModFloat = func(texture *Texture, alpha *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureAlphaModFloat, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(alpha)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(alpha)
		return __r0
	}
	iSetTextureBlendMode = func(texture *Texture, blendMode BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTextureBlendMode, uintptr(unsafe.Pointer(texture)), uintptr(blendMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		return __r0
	}
	iGetTextureBlendMode = func(texture *Texture, blendMode *BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureBlendMode, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(blendMode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(blendMode)
		return __r0
	}
	iSetTextureScaleMode = func(texture *Texture, scaleMode ScaleMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetTextureScaleMode, uintptr(unsafe.Pointer(texture)), uintptr(scaleMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		return __r0
	}
	iGetTextureScaleMode = func(texture *Texture, scaleMode *ScaleMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTextureScaleMode, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(scaleMode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(scaleMode)
		return __r0
	}
	iUpdateTexture = func(texture *Texture, rect *Rect, pixels uintptr, pitch int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateTexture, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(rect)), uintptr(pixels), uintptr(pitch))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(rect)
		return __r0
	}
	iUpdateYUVTexture = func(texture *Texture, rect *Rect, Yplane *uint8, Ypitch int32, Uplane *uint8, Upitch int32, Vplane *uint8, Vpitch int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateYUVTexture, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(Yplane)), uintptr(Ypitch), uintptr(unsafe.Pointer(Uplane)), uintptr(Upitch), uintptr(unsafe.Pointer(Vplane)), uintptr(Vpitch))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(rect)
		runtime.KeepAlive(Yplane)
		runtime.KeepAlive(Uplane)
		runtime.KeepAlive(Vplane)
		return __r0
	}
	iUpdateNVTexture = func(texture *Texture, rect *Rect, Yplane *uint8, Ypitch int32, UVplane *uint8, UVpitch int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_UpdateNVTexture, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(Yplane)), uintptr(Ypitch), uintptr(unsafe.Pointer(UVplane)), uintptr(UVpitch))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(rect)
		runtime.KeepAlive(Yplane)
		runtime.KeepAlive(UVplane)
		return __r0
	}
	iLockTexture = func(texture *Texture, rect *Rect, pixels *uintptr, pitch *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LockTexture, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(pixels)), uintptr(unsafe.Pointer(pitch)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(rect)
		runtime.KeepAlive(pixels)
		runtime.KeepAlive(pitch)
		return __r0
	}
	iLockTextureToSurface = func(texture *Texture, rect *Rect, surface **Surface) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_LockTextureToSurface, uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(rect)), uintptr(unsafe.Pointer(surface)))
		__r0 := _r0 != 0
		runtime.KeepAlive(texture)
		runtime.KeepAlive(rect)
		runtime.KeepAlive(surface)
		return __r0
	}
	iUnlockTexture = func(texture *Texture) {
		purego.SyscallN(_addr_SDL_UnlockTexture, uintptr(unsafe.Pointer(texture)))
		runtime.KeepAlive(texture)
	}
	iSetRenderTarget = func(renderer *Renderer, texture *Texture) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderTarget, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(texture)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(texture)
		return __r0
	}
	iGetRenderTarget = func(renderer *Renderer) *Texture {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderTarget, uintptr(unsafe.Pointer(renderer)))
		__r0 := (*Texture)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		return __r0
	}
	iSetRenderLogicalPresentation = func(renderer *Renderer, w int32, h int32, mode RendererLogicalPresentation) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderLogicalPresentation, uintptr(unsafe.Pointer(renderer)), uintptr(w), uintptr(h), uintptr(mode))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderLogicalPresentation = func(renderer *Renderer, w *int32, h *int32, mode *RendererLogicalPresentation) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderLogicalPresentation, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(h)), uintptr(unsafe.Pointer(mode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(w)
		runtime.KeepAlive(h)
		runtime.KeepAlive(mode)
		return __r0
	}
	iGetRenderLogicalPresentationRect = func(renderer *Renderer, rect *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderLogicalPresentationRect, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderCoordinatesFromWindow, _hnd_sdl, "SDL_RenderCoordinatesFromWindow")
	purego.RegisterLibFunc(&iRenderCoordinatesToWindow, _hnd_sdl, "SDL_RenderCoordinatesToWindow")
	iConvertEventToRenderCoordinates = func(renderer *Renderer, event *Event) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ConvertEventToRenderCoordinates, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(event)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(event)
		return __r0
	}
	iSetRenderViewport = func(renderer *Renderer, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderViewport, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetRenderViewport = func(renderer *Renderer, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderViewport, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iRenderViewportSet = func(renderer *Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderViewportSet, uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderSafeArea = func(renderer *Renderer, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderSafeArea, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iSetRenderClipRect = func(renderer *Renderer, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderClipRect, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iGetRenderClipRect = func(renderer *Renderer, rect *Rect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderClipRect, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iRenderClipEnabled = func(renderer *Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderClipEnabled, uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	purego.RegisterLibFunc(&iSetRenderScale, _hnd_sdl, "SDL_SetRenderScale")
	iGetRenderScale = func(renderer *Renderer, scaleX *float32, scaleY *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderScale, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(scaleX)), uintptr(unsafe.Pointer(scaleY)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(scaleX)
		runtime.KeepAlive(scaleY)
		return __r0
	}
	iSetRenderDrawColor = func(renderer *Renderer, r uint8, g uint8, b uint8, a uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderDrawColor, uintptr(unsafe.Pointer(renderer)), uintptr(r), uintptr(g), uintptr(b), uintptr(a))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	purego.RegisterLibFunc(&iSetRenderDrawColorFloat, _hnd_sdl, "SDL_SetRenderDrawColorFloat")
	iGetRenderDrawColor = func(renderer *Renderer, r *uint8, g *uint8, b *uint8, a *uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderDrawColor, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)), uintptr(unsafe.Pointer(a)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		runtime.KeepAlive(a)
		return __r0
	}
	iGetRenderDrawColorFloat = func(renderer *Renderer, r *float32, g *float32, b *float32, a *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderDrawColorFloat, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(g)), uintptr(unsafe.Pointer(b)), uintptr(unsafe.Pointer(a)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(r)
		runtime.KeepAlive(g)
		runtime.KeepAlive(b)
		runtime.KeepAlive(a)
		return __r0
	}
	purego.RegisterLibFunc(&iSetRenderColorScale, _hnd_sdl, "SDL_SetRenderColorScale")
	iGetRenderColorScale = func(renderer *Renderer, scale *float32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderColorScale, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(scale)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(scale)
		return __r0
	}
	iSetRenderDrawBlendMode = func(renderer *Renderer, blendMode BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderDrawBlendMode, uintptr(unsafe.Pointer(renderer)), uintptr(blendMode))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderDrawBlendMode = func(renderer *Renderer, blendMode *BlendMode) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderDrawBlendMode, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(blendMode)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(blendMode)
		return __r0
	}
	iRenderClear = func(renderer *Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderClear, uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderPoint, _hnd_sdl, "SDL_RenderPoint")
	iRenderPoints = func(renderer *Renderer, points *FPoint, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderPoints, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(points)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(points)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderLine, _hnd_sdl, "SDL_RenderLine")
	iRenderLines = func(renderer *Renderer, points *FPoint, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderLines, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(points)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(points)
		return __r0
	}
	iRenderRect = func(renderer *Renderer, rect *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderRect, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iRenderRects = func(renderer *Renderer, rects *FRect, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderRects, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rects)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rects)
		return __r0
	}
	iRenderFillRect = func(renderer *Renderer, rect *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderFillRect, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iRenderFillRects = func(renderer *Renderer, rects *FRect, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderFillRects, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rects)), uintptr(count))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rects)
		return __r0
	}
	iRenderTexture = func(renderer *Renderer, texture *Texture, srcrect *FRect, dstrect *FRect) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderTexture, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(dstrect)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(texture)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(dstrect)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderTextureRotated, _hnd_sdl, "SDL_RenderTextureRotated")
	iRenderTextureAffine = func(renderer *Renderer, texture *Texture, srcrect *FRect, origin *FPoint, right *FPoint, down *FPoint) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderTextureAffine, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(srcrect)), uintptr(unsafe.Pointer(origin)), uintptr(unsafe.Pointer(right)), uintptr(unsafe.Pointer(down)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(texture)
		runtime.KeepAlive(srcrect)
		runtime.KeepAlive(origin)
		runtime.KeepAlive(right)
		runtime.KeepAlive(down)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderTextureTiled, _hnd_sdl, "SDL_RenderTextureTiled")
	purego.RegisterLibFunc(&iRenderTexture9Grid, _hnd_sdl, "SDL_RenderTexture9Grid")
	iRenderGeometry = func(renderer *Renderer, texture *Texture, vertices *Vertex, num_vertices int32, indices *int32, num_indices int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderGeometry, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(vertices)), uintptr(num_vertices), uintptr(unsafe.Pointer(indices)), uintptr(num_indices))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(texture)
		runtime.KeepAlive(vertices)
		runtime.KeepAlive(indices)
		return __r0
	}
	iRenderGeometryRaw = func(renderer *Renderer, texture *Texture, xy *float32, xy_stride int32, color *FColor, color_stride int32, uv *float32, uv_stride int32, num_vertices int32, indices uintptr, num_indices int32, size_indices int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderGeometryRaw, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(texture)), uintptr(unsafe.Pointer(xy)), uintptr(xy_stride), uintptr(unsafe.Pointer(color)), uintptr(color_stride), uintptr(unsafe.Pointer(uv)), uintptr(uv_stride), uintptr(num_vertices), uintptr(indices), uintptr(num_indices), uintptr(size_indices))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(texture)
		runtime.KeepAlive(xy)
		runtime.KeepAlive(color)
		runtime.KeepAlive(uv)
		return __r0
	}
	iRenderReadPixels = func(renderer *Renderer, rect *Rect) *Surface {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderReadPixels, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(rect)))
		__r0 := (*Surface)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(rect)
		return __r0
	}
	iRenderPresent = func(renderer *Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenderPresent, uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iDestroyTexture = func(texture *Texture) {
		purego.SyscallN(_addr_SDL_DestroyTexture, uintptr(unsafe.Pointer(texture)))
		runtime.KeepAlive(texture)
	}
	iDestroyRenderer = func(renderer *Renderer) {
		purego.SyscallN(_addr_SDL_DestroyRenderer, uintptr(unsafe.Pointer(renderer)))
		runtime.KeepAlive(renderer)
	}
	iFlushRenderer = func(renderer *Renderer) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_FlushRenderer, uintptr(unsafe.Pointer(renderer)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderMetalLayer = func(renderer *Renderer) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderMetalLayer, uintptr(unsafe.Pointer(renderer)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderMetalCommandEncoder = func(renderer *Renderer) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderMetalCommandEncoder, uintptr(unsafe.Pointer(renderer)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(renderer)
		return __r0
	}
	iAddVulkanRenderSemaphores = func(renderer *Renderer, wait_stage_mask uint32, wait_semaphore int64, signal_semaphore int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddVulkanRenderSemaphores, uintptr(unsafe.Pointer(renderer)), uintptr(wait_stage_mask), uintptr(wait_semaphore), uintptr(signal_semaphore))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iSetRenderVSync = func(renderer *Renderer, vsync int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_SetRenderVSync, uintptr(unsafe.Pointer(renderer)), uintptr(vsync))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		return __r0
	}
	iGetRenderVSync = func(renderer *Renderer, vsync *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetRenderVSync, uintptr(unsafe.Pointer(renderer)), uintptr(unsafe.Pointer(vsync)))
		__r0 := _r0 != 0
		runtime.KeepAlive(renderer)
		runtime.KeepAlive(vsync)
		return __r0
	}
	purego.RegisterLibFunc(&iRenderDebugText, _hnd_sdl, "SDL_RenderDebugText")
	purego.RegisterLibFunc(&iRenderDebugTextFormat, _hnd_sdl, "SDL_RenderDebugTextFormat")
	iOpenTitleStorage = func(override string, props PropertiesID) *Storage {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenTitleStorage, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(override))), uintptr(props))
		__r0 := (*Storage)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(override)
		return __r0
	}
	iOpenUserStorage = func(org string, app string, props PropertiesID) *Storage {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenUserStorage, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(org))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(app))), uintptr(props))
		__r0 := (*Storage)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(org)
		runtime.KeepAlive(app)
		return __r0
	}
	iOpenFileStorage = func(path string) *Storage {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenFileStorage, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := (*Storage)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(path)
		return __r0
	}
	iOpenStorage = func(iface *StorageInterface, userdata uintptr) *Storage {
		_r0, _, _ := purego.SyscallN(_addr_SDL_OpenStorage, uintptr(unsafe.Pointer(iface)), uintptr(userdata))
		__r0 := (*Storage)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(iface)
		return __r0
	}
	iCloseStorage = func(storage *Storage) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CloseStorage, uintptr(unsafe.Pointer(storage)))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		return __r0
	}
	iStorageReady = func(storage *Storage) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_StorageReady, uintptr(unsafe.Pointer(storage)))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		return __r0
	}
	iGetStorageFileSize = func(storage *Storage, path string, length *uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetStorageFileSize, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(length)))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		runtime.KeepAlive(length)
		return __r0
	}
	iReadStorageFile = func(storage *Storage, path string, destination uintptr, length uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_ReadStorageFile, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(destination), uintptr(length))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		return __r0
	}
	iWriteStorageFile = func(storage *Storage, path string, source uintptr, length uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_WriteStorageFile, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(source), uintptr(length))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		return __r0
	}
	iCreateStorageDirectory = func(storage *Storage, path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateStorageDirectory, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		return __r0
	}
	iEnumerateStorageDirectory = func(storage *Storage, path string, callback EnumerateDirectoryCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EnumerateStorageDirectory, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(callback), uintptr(userdata))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		return __r0
	}
	iRemoveStoragePath = func(storage *Storage, path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RemoveStoragePath, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		return __r0
	}
	iRenameStoragePath = func(storage *Storage, oldpath string, newpath string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RenameStoragePath, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(oldpath))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(newpath))))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(oldpath)
		runtime.KeepAlive(newpath)
		return __r0
	}
	iCopyStorageFile = func(storage *Storage, oldpath string, newpath string) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CopyStorageFile, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(oldpath))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(newpath))))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(oldpath)
		runtime.KeepAlive(newpath)
		return __r0
	}
	iGetStoragePathInfo = func(storage *Storage, path string, info *PathInfo) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetStoragePathInfo, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(info)))
		__r0 := _r0 != 0
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		runtime.KeepAlive(info)
		return __r0
	}
	iGetStorageSpaceRemaining = func(storage *Storage) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetStorageSpaceRemaining, uintptr(unsafe.Pointer(storage)))
		__r0 := uint64(_r0)
		runtime.KeepAlive(storage)
		return __r0
	}
	iGlobStorageDirectory = func(storage *Storage, path string, pattern string, flags GlobFlags, count *int32) uintptr {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GlobStorageDirectory, uintptr(unsafe.Pointer(storage)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(pattern))), uintptr(flags), uintptr(unsafe.Pointer(count)))
		__r0 := uintptr(_r0)
		runtime.KeepAlive(storage)
		runtime.KeepAlive(path)
		runtime.KeepAlive(pattern)
		runtime.KeepAlive(count)
		return __r0
	}
	iSetX11EventHook = func(callback X11EventHook, userdata uintptr) {
		purego.SyscallN(_addr_SDL_SetX11EventHook, uintptr(callback), uintptr(userdata))
	}
	iIsTablet = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsTablet)
		__r0 := _r0 != 0
		return __r0
	}
	iIsTV = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_IsTV)
		__r0 := _r0 != 0
		return __r0
	}
	iGetSandbox = func() Sandbox {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetSandbox)
		__r0 := Sandbox(_r0)
		return __r0
	}
	iOnApplicationWillTerminate = func() {
		purego.SyscallN(_addr_SDL_OnApplicationWillTerminate)
	}
	iOnApplicationDidReceiveMemoryWarning = func() {
		purego.SyscallN(_addr_SDL_OnApplicationDidReceiveMemoryWarning)
	}
	iOnApplicationWillEnterBackground = func() {
		purego.SyscallN(_addr_SDL_OnApplicationWillEnterBackground)
	}
	iOnApplicationDidEnterBackground = func() {
		purego.SyscallN(_addr_SDL_OnApplicationDidEnterBackground)
	}
	iOnApplicationWillEnterForeground = func() {
		purego.SyscallN(_addr_SDL_OnApplicationWillEnterForeground)
	}
	iOnApplicationDidEnterForeground = func() {
		purego.SyscallN(_addr_SDL_OnApplicationDidEnterForeground)
	}
	iGetDateTimeLocalePreferences = func(dateFormat *DateFormat, timeFormat *TimeFormat) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDateTimeLocalePreferences, uintptr(unsafe.Pointer(dateFormat)), uintptr(unsafe.Pointer(timeFormat)))
		__r0 := _r0 != 0
		runtime.KeepAlive(dateFormat)
		runtime.KeepAlive(timeFormat)
		return __r0
	}
	iGetCurrentTime = func(ticks *Time) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetCurrentTime, uintptr(unsafe.Pointer(ticks)))
		__r0 := _r0 != 0
		runtime.KeepAlive(ticks)
		return __r0
	}
	iTimeToDateTime = func(ticks Time, dt *DateTime, localTime bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TimeToDateTime, uintptr(ticks), uintptr(unsafe.Pointer(dt)), puregogen.BoolToUintptr(localTime))
		__r0 := _r0 != 0
		runtime.KeepAlive(dt)
		return __r0
	}
	iDateTimeToTime = func(dt *DateTime, ticks *Time) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_DateTimeToTime, uintptr(unsafe.Pointer(dt)), uintptr(unsafe.Pointer(ticks)))
		__r0 := _r0 != 0
		runtime.KeepAlive(dt)
		runtime.KeepAlive(ticks)
		return __r0
	}
	iTimeToWindows = func(ticks Time, dwLowDateTime *uint32, dwHighDateTime *uint32) {
		purego.SyscallN(_addr_SDL_TimeToWindows, uintptr(ticks), uintptr(unsafe.Pointer(dwLowDateTime)), uintptr(unsafe.Pointer(dwHighDateTime)))
		runtime.KeepAlive(dwLowDateTime)
		runtime.KeepAlive(dwHighDateTime)
	}
	iTimeFromWindows = func(dwLowDateTime uint32, dwHighDateTime uint32) Time {
		_r0, _, _ := purego.SyscallN(_addr_SDL_TimeFromWindows, uintptr(dwLowDateTime), uintptr(dwHighDateTime))
		__r0 := Time(_r0)
		return __r0
	}
	iGetDaysInMonth = func(year int32, month int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDaysInMonth, uintptr(year), uintptr(month))
		__r0 := int32(_r0)
		return __r0
	}
	iGetDayOfYear = func(year int32, month int32, day int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDayOfYear, uintptr(year), uintptr(month), uintptr(day))
		__r0 := int32(_r0)
		return __r0
	}
	iGetDayOfWeek = func(year int32, month int32, day int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetDayOfWeek, uintptr(year), uintptr(month), uintptr(day))
		__r0 := int32(_r0)
		return __r0
	}
	iGetTicks = func() uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTicks)
		__r0 := uint64(_r0)
		return __r0
	}
	iGetTicksNS = func() uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTicksNS)
		__r0 := uint64(_r0)
		return __r0
	}
	iGetPerformanceCounter = func() uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPerformanceCounter)
		__r0 := uint64(_r0)
		return __r0
	}
	iGetPerformanceFrequency = func() uint64 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetPerformanceFrequency)
		__r0 := uint64(_r0)
		return __r0
	}
	iDelay = func(ms uint32) {
		purego.SyscallN(_addr_SDL_Delay, uintptr(ms))
	}
	iDelayNS = func(ns uint64) {
		purego.SyscallN(_addr_SDL_DelayNS, uintptr(ns))
	}
	iDelayPrecise = func(ns uint64) {
		purego.SyscallN(_addr_SDL_DelayPrecise, uintptr(ns))
	}
	iAddTimer = func(interval uint32, callback TimerCallback, userdata uintptr) TimerID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddTimer, uintptr(interval), uintptr(callback), uintptr(userdata))
		__r0 := TimerID(_r0)
		return __r0
	}
	iAddTimerNS = func(interval uint64, callback NSTimerCallback, userdata uintptr) TimerID {
		_r0, _, _ := purego.SyscallN(_addr_SDL_AddTimerNS, uintptr(interval), uintptr(callback), uintptr(userdata))
		__r0 := TimerID(_r0)
		return __r0
	}
	iRemoveTimer = func(id TimerID) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RemoveTimer, uintptr(id))
		__r0 := _r0 != 0
		return __r0
	}
	iCreateTray = func(icon *Surface, tooltip string) *Tray {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTray, uintptr(unsafe.Pointer(icon)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tooltip))))
		__r0 := (*Tray)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(icon)
		runtime.KeepAlive(tooltip)
		return __r0
	}
	iSetTrayIcon = func(tray *Tray, icon *Surface) {
		purego.SyscallN(_addr_SDL_SetTrayIcon, uintptr(unsafe.Pointer(tray)), uintptr(unsafe.Pointer(icon)))
		runtime.KeepAlive(tray)
		runtime.KeepAlive(icon)
	}
	iSetTrayTooltip = func(tray *Tray, tooltip string) {
		purego.SyscallN(_addr_SDL_SetTrayTooltip, uintptr(unsafe.Pointer(tray)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tooltip))))
		runtime.KeepAlive(tray)
		runtime.KeepAlive(tooltip)
	}
	iCreateTrayMenu = func(tray *Tray) *TrayMenu {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTrayMenu, uintptr(unsafe.Pointer(tray)))
		__r0 := (*TrayMenu)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(tray)
		return __r0
	}
	iCreateTraySubmenu = func(entry *TrayEntry) *TrayMenu {
		_r0, _, _ := purego.SyscallN(_addr_SDL_CreateTraySubmenu, uintptr(unsafe.Pointer(entry)))
		__r0 := (*TrayMenu)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(entry)
		return __r0
	}
	iGetTrayMenu = func(tray *Tray) *TrayMenu {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayMenu, uintptr(unsafe.Pointer(tray)))
		__r0 := (*TrayMenu)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(tray)
		return __r0
	}
	iGetTraySubmenu = func(entry *TrayEntry) *TrayMenu {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTraySubmenu, uintptr(unsafe.Pointer(entry)))
		__r0 := (*TrayMenu)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(entry)
		return __r0
	}
	iGetTrayEntries = func(menu *TrayMenu, count *int32) **TrayEntry {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayEntries, uintptr(unsafe.Pointer(menu)), uintptr(unsafe.Pointer(count)))
		__r0 := (**TrayEntry)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(menu)
		runtime.KeepAlive(count)
		return __r0
	}
	iRemoveTrayEntry = func(entry *TrayEntry) {
		purego.SyscallN(_addr_SDL_RemoveTrayEntry, uintptr(unsafe.Pointer(entry)))
		runtime.KeepAlive(entry)
	}
	iInsertTrayEntryAt = func(menu *TrayMenu, pos int32, label string, flags TrayEntryFlags) *TrayEntry {
		_r0, _, _ := purego.SyscallN(_addr_SDL_InsertTrayEntryAt, uintptr(unsafe.Pointer(menu)), uintptr(pos), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(label))), uintptr(flags))
		__r0 := (*TrayEntry)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(menu)
		runtime.KeepAlive(label)
		return __r0
	}
	iSetTrayEntryLabel = func(entry *TrayEntry, label string) {
		purego.SyscallN(_addr_SDL_SetTrayEntryLabel, uintptr(unsafe.Pointer(entry)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(label))))
		runtime.KeepAlive(entry)
		runtime.KeepAlive(label)
	}
	iGetTrayEntryLabel = func(entry *TrayEntry) string {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayEntryLabel, uintptr(unsafe.Pointer(entry)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(entry)
		return __r0
	}
	iSetTrayEntryChecked = func(entry *TrayEntry, checked bool) {
		purego.SyscallN(_addr_SDL_SetTrayEntryChecked, uintptr(unsafe.Pointer(entry)), puregogen.BoolToUintptr(checked))
		runtime.KeepAlive(entry)
	}
	iGetTrayEntryChecked = func(entry *TrayEntry) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayEntryChecked, uintptr(unsafe.Pointer(entry)))
		__r0 := _r0 != 0
		runtime.KeepAlive(entry)
		return __r0
	}
	iSetTrayEntryEnabled = func(entry *TrayEntry, enabled bool) {
		purego.SyscallN(_addr_SDL_SetTrayEntryEnabled, uintptr(unsafe.Pointer(entry)), puregogen.BoolToUintptr(enabled))
		runtime.KeepAlive(entry)
	}
	iGetTrayEntryEnabled = func(entry *TrayEntry) bool {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayEntryEnabled, uintptr(unsafe.Pointer(entry)))
		__r0 := _r0 != 0
		runtime.KeepAlive(entry)
		return __r0
	}
	iClickTrayEntry = func(entry *TrayEntry) {
		purego.SyscallN(_addr_SDL_ClickTrayEntry, uintptr(unsafe.Pointer(entry)))
		runtime.KeepAlive(entry)
	}
	iDestroyTray = func(tray *Tray) {
		purego.SyscallN(_addr_SDL_DestroyTray, uintptr(unsafe.Pointer(tray)))
		runtime.KeepAlive(tray)
	}
	iGetTrayEntryParent = func(entry *TrayEntry) *TrayMenu {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayEntryParent, uintptr(unsafe.Pointer(entry)))
		__r0 := (*TrayMenu)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(entry)
		return __r0
	}
	iGetTrayMenuParentEntry = func(menu *TrayMenu) *TrayEntry {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayMenuParentEntry, uintptr(unsafe.Pointer(menu)))
		__r0 := (*TrayEntry)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(menu)
		return __r0
	}
	iGetTrayMenuParentTray = func(menu *TrayMenu) *Tray {
		_r0, _, _ := purego.SyscallN(_addr_SDL_GetTrayMenuParentTray, uintptr(unsafe.Pointer(menu)))
		__r0 := (*Tray)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(menu)
		return __r0
	}
	iUpdateTrays = func() {
		purego.SyscallN(_addr_SDL_UpdateTrays)
	}
	iSetMainReady = func() {
		purego.SyscallN(_addr_SDL_SetMainReady)
	}
	iRunApp = func(argc int32, argv *string, mainFunction main_func, reserved uintptr) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_RunApp, uintptr(argc), uintptr(unsafe.Pointer(argv)), uintptr(mainFunction), uintptr(reserved))
		__r0 := int32(_r0)
		runtime.KeepAlive(argv)
		return __r0
	}
	iEnterAppMainCallbacks = func(argc int32, argv *string, appinit AppInit_func, appiter AppIterate_func, appevent AppEvent_func, appquit AppQuit_func) int32 {
		_r0, _, _ := purego.SyscallN(_addr_SDL_EnterAppMainCallbacks, uintptr(argc), uintptr(unsafe.Pointer(argv)), uintptr(appinit), uintptr(appiter), uintptr(appevent), uintptr(appquit))
		__r0 := int32(_r0)
		runtime.KeepAlive(argv)
		return __r0
	}
	iGDKSuspendComplete = func() {
		purego.SyscallN(_addr_SDL_GDKSuspendComplete)
	}
}
