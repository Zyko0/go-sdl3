//go:build windows || unix

package mixer

import (
	sdl "github.com/Zyko0/go-sdl3/sdl"
	puregogen "github.com/Zyko0/purego-gen"
	purego "github.com/ebitengine/purego"
	"runtime"
	"unsafe"
)

// File generated by github.com/Zyko0/purego-gen. DO NOT EDIT.

var (
	// Library handles
	_hnd_mixer uintptr
	// Symbols
	// mixer
	_addr_MIX_Version                   uintptr
	_addr_MIX_Init                      uintptr
	_addr_MIX_Quit                      uintptr
	_addr_MIX_GetNumAudioDecoders       uintptr
	_addr_MIX_GetAudioDecoder           uintptr
	_addr_MIX_CreateMixerDevice         uintptr
	_addr_MIX_CreateMixer               uintptr
	_addr_MIX_DestroyMixer              uintptr
	_addr_MIX_GetMixerProperties        uintptr
	_addr_MIX_GetMixerFormat            uintptr
	_addr_MIX_LoadAudio_IO              uintptr
	_addr_MIX_LoadAudio                 uintptr
	_addr_MIX_LoadAudioWithProperties   uintptr
	_addr_MIX_LoadRawAudio_IO           uintptr
	_addr_MIX_LoadRawAudio              uintptr
	_addr_MIX_LoadRawAudioNoCopy        uintptr
	_addr_MIX_GetAudioProperties        uintptr
	_addr_MIX_GetAudioDuration          uintptr
	_addr_MIX_GetAudioFormat            uintptr
	_addr_MIX_DestroyAudio              uintptr
	_addr_MIX_CreateTrack               uintptr
	_addr_MIX_DestroyTrack              uintptr
	_addr_MIX_GetTrackProperties        uintptr
	_addr_MIX_GetTrackMixer             uintptr
	_addr_MIX_SetTrackAudio             uintptr
	_addr_MIX_SetTrackAudioStream       uintptr
	_addr_MIX_SetTrackIOStream          uintptr
	_addr_MIX_TagTrack                  uintptr
	_addr_MIX_UntagTrack                uintptr
	_addr_MIX_SetTrackPlaybackPosition  uintptr
	_addr_MIX_GetTrackPlaybackPosition  uintptr
	_addr_MIX_TrackLooping              uintptr
	_addr_MIX_GetTrackAudio             uintptr
	_addr_MIX_GetTrackAudioStream       uintptr
	_addr_MIX_GetTrackRemaining         uintptr
	_addr_MIX_TrackMSToFrames           uintptr
	_addr_MIX_TrackFramesToMS           uintptr
	_addr_MIX_AudioMSToFrames           uintptr
	_addr_MIX_AudioFramesToMS           uintptr
	_addr_MIX_MSToFrames                uintptr
	_addr_MIX_FramesToMS                uintptr
	_addr_MIX_PlayTrack                 uintptr
	_addr_MIX_PlayTag                   uintptr
	_addr_MIX_PlayAudio                 uintptr
	_addr_MIX_StopTrack                 uintptr
	_addr_MIX_StopAllTracks             uintptr
	_addr_MIX_StopTag                   uintptr
	_addr_MIX_PauseTrack                uintptr
	_addr_MIX_PauseAllTracks            uintptr
	_addr_MIX_PauseTag                  uintptr
	_addr_MIX_ResumeTrack               uintptr
	_addr_MIX_ResumeAllTracks           uintptr
	_addr_MIX_ResumeTag                 uintptr
	_addr_MIX_TrackPlaying              uintptr
	_addr_MIX_TrackPaused               uintptr
	_addr_MIX_SetTrackOutputChannelMap  uintptr
	_addr_MIX_SetTrackStereo            uintptr
	_addr_MIX_SetTrack3DPosition        uintptr
	_addr_MIX_GetTrack3DPosition        uintptr
	_addr_MIX_CreateGroup               uintptr
	_addr_MIX_DestroyGroup              uintptr
	_addr_MIX_GetGroupProperties        uintptr
	_addr_MIX_GetGroupMixer             uintptr
	_addr_MIX_SetTrackGroup             uintptr
	_addr_MIX_SetTrackStoppedCallback   uintptr
	_addr_MIX_SetTrackRawCallback       uintptr
	_addr_MIX_SetTrackCookedCallback    uintptr
	_addr_MIX_SetGroupPostMixCallback   uintptr
	_addr_MIX_SetPostMixCallback        uintptr
	_addr_MIX_Generate                  uintptr
	_addr_MIX_CreateAudioDecoder        uintptr
	_addr_MIX_CreateAudioDecoder_IO     uintptr
	_addr_MIX_DestroyAudioDecoder       uintptr
	_addr_MIX_GetAudioDecoderProperties uintptr
	_addr_MIX_GetAudioDecoderFormat     uintptr
	_addr_MIX_DecodeAudio               uintptr
)

func initialize() {
	var err error

	// Symbols mixer
	_addr_MIX_Version, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_Version")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_Version")
	}
	_addr_MIX_Init, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_Init")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_Init")
	}
	_addr_MIX_Quit, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_Quit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_Quit")
	}
	_addr_MIX_GetNumAudioDecoders, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetNumAudioDecoders")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetNumAudioDecoders")
	}
	_addr_MIX_GetAudioDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioDecoder")
	}
	_addr_MIX_CreateMixerDevice, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateMixerDevice")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateMixerDevice")
	}
	_addr_MIX_CreateMixer, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateMixer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateMixer")
	}
	_addr_MIX_DestroyMixer, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DestroyMixer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DestroyMixer")
	}
	_addr_MIX_GetMixerProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetMixerProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetMixerProperties")
	}
	_addr_MIX_GetMixerFormat, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetMixerFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetMixerFormat")
	}
	_addr_MIX_LoadAudio_IO, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadAudio_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadAudio_IO")
	}
	_addr_MIX_LoadAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadAudio")
	}
	_addr_MIX_LoadAudioWithProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadAudioWithProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadAudioWithProperties")
	}
	_addr_MIX_LoadRawAudio_IO, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadRawAudio_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadRawAudio_IO")
	}
	_addr_MIX_LoadRawAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadRawAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadRawAudio")
	}
	_addr_MIX_LoadRawAudioNoCopy, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_LoadRawAudioNoCopy")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_LoadRawAudioNoCopy")
	}
	_addr_MIX_GetAudioProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioProperties")
	}
	_addr_MIX_GetAudioDuration, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioDuration")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioDuration")
	}
	_addr_MIX_GetAudioFormat, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioFormat")
	}
	_addr_MIX_DestroyAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DestroyAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DestroyAudio")
	}
	_addr_MIX_CreateTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateTrack")
	}
	_addr_MIX_DestroyTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DestroyTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DestroyTrack")
	}
	_addr_MIX_GetTrackProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackProperties")
	}
	_addr_MIX_GetTrackMixer, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackMixer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackMixer")
	}
	_addr_MIX_SetTrackAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackAudio")
	}
	_addr_MIX_SetTrackAudioStream, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackAudioStream")
	}
	_addr_MIX_SetTrackIOStream, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackIOStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackIOStream")
	}
	_addr_MIX_TagTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TagTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TagTrack")
	}
	_addr_MIX_UntagTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_UntagTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_UntagTrack")
	}
	_addr_MIX_SetTrackPlaybackPosition, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackPlaybackPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackPlaybackPosition")
	}
	_addr_MIX_GetTrackPlaybackPosition, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackPlaybackPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackPlaybackPosition")
	}
	_addr_MIX_TrackLooping, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TrackLooping")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TrackLooping")
	}
	_addr_MIX_GetTrackAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackAudio")
	}
	_addr_MIX_GetTrackAudioStream, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackAudioStream")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackAudioStream")
	}
	_addr_MIX_GetTrackRemaining, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrackRemaining")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrackRemaining")
	}
	_addr_MIX_TrackMSToFrames, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TrackMSToFrames")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TrackMSToFrames")
	}
	_addr_MIX_TrackFramesToMS, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TrackFramesToMS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TrackFramesToMS")
	}
	_addr_MIX_AudioMSToFrames, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_AudioMSToFrames")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_AudioMSToFrames")
	}
	_addr_MIX_AudioFramesToMS, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_AudioFramesToMS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_AudioFramesToMS")
	}
	_addr_MIX_MSToFrames, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_MSToFrames")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_MSToFrames")
	}
	_addr_MIX_FramesToMS, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_FramesToMS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_FramesToMS")
	}
	_addr_MIX_PlayTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PlayTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PlayTrack")
	}
	_addr_MIX_PlayTag, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PlayTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PlayTag")
	}
	_addr_MIX_PlayAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PlayAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PlayAudio")
	}
	_addr_MIX_StopTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_StopTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_StopTrack")
	}
	_addr_MIX_StopAllTracks, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_StopAllTracks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_StopAllTracks")
	}
	_addr_MIX_StopTag, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_StopTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_StopTag")
	}
	_addr_MIX_PauseTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PauseTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PauseTrack")
	}
	_addr_MIX_PauseAllTracks, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PauseAllTracks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PauseAllTracks")
	}
	_addr_MIX_PauseTag, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_PauseTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_PauseTag")
	}
	_addr_MIX_ResumeTrack, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_ResumeTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_ResumeTrack")
	}
	_addr_MIX_ResumeAllTracks, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_ResumeAllTracks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_ResumeAllTracks")
	}
	_addr_MIX_ResumeTag, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_ResumeTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_ResumeTag")
	}
	_addr_MIX_TrackPlaying, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TrackPlaying")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TrackPlaying")
	}
	_addr_MIX_TrackPaused, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_TrackPaused")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_TrackPaused")
	}
	_addr_MIX_SetTrackOutputChannelMap, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackOutputChannelMap")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackOutputChannelMap")
	}
	_addr_MIX_SetTrackStereo, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackStereo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackStereo")
	}
	_addr_MIX_SetTrack3DPosition, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrack3DPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrack3DPosition")
	}
	_addr_MIX_GetTrack3DPosition, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetTrack3DPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetTrack3DPosition")
	}
	_addr_MIX_CreateGroup, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateGroup")
	}
	_addr_MIX_DestroyGroup, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DestroyGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DestroyGroup")
	}
	_addr_MIX_GetGroupProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetGroupProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetGroupProperties")
	}
	_addr_MIX_GetGroupMixer, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetGroupMixer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetGroupMixer")
	}
	_addr_MIX_SetTrackGroup, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackGroup")
	}
	_addr_MIX_SetTrackStoppedCallback, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackStoppedCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackStoppedCallback")
	}
	_addr_MIX_SetTrackRawCallback, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackRawCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackRawCallback")
	}
	_addr_MIX_SetTrackCookedCallback, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetTrackCookedCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetTrackCookedCallback")
	}
	_addr_MIX_SetGroupPostMixCallback, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetGroupPostMixCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetGroupPostMixCallback")
	}
	_addr_MIX_SetPostMixCallback, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_SetPostMixCallback")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_SetPostMixCallback")
	}
	_addr_MIX_Generate, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_Generate")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_Generate")
	}
	_addr_MIX_CreateAudioDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateAudioDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateAudioDecoder")
	}
	_addr_MIX_CreateAudioDecoder_IO, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_CreateAudioDecoder_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_CreateAudioDecoder_IO")
	}
	_addr_MIX_DestroyAudioDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DestroyAudioDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DestroyAudioDecoder")
	}
	_addr_MIX_GetAudioDecoderProperties, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioDecoderProperties")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioDecoderProperties")
	}
	_addr_MIX_GetAudioDecoderFormat, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_GetAudioDecoderFormat")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_GetAudioDecoderFormat")
	}
	_addr_MIX_DecodeAudio, err = puregogen.OpenSymbol(_hnd_mixer, "MIX_DecodeAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: MIX_DecodeAudio")
	}

	iVersion = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_Version)
		__r0 := int32(_r0)
		return __r0
	}
	iInit = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_Init)
		__r0 := uint8(_r0) != 0
		return __r0
	}
	iQuit = func() {
		purego.SyscallN(_addr_MIX_Quit)
	}
	iGetNumAudioDecoders = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetNumAudioDecoders)
		__r0 := int32(_r0)
		return __r0
	}
	iGetAudioDecoder = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioDecoder, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCreateMixerDevice = func(devid sdl.AudioDeviceID, spec *sdl.AudioSpec) *Mixer {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateMixerDevice, uintptr(devid), uintptr(unsafe.Pointer(spec)))
		__r0 := (*Mixer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(spec)
		return __r0
	}
	iCreateMixer = func(spec *sdl.AudioSpec) *Mixer {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateMixer, uintptr(unsafe.Pointer(spec)))
		__r0 := (*Mixer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(spec)
		return __r0
	}
	iDestroyMixer = func(mixer *Mixer) {
		purego.SyscallN(_addr_MIX_DestroyMixer, uintptr(unsafe.Pointer(mixer)))
		runtime.KeepAlive(mixer)
	}
	iGetMixerProperties = func(mixer *Mixer) sdl.PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetMixerProperties, uintptr(unsafe.Pointer(mixer)))
		__r0 := sdl.PropertiesID(_r0)
		runtime.KeepAlive(mixer)
		return __r0
	}
	iGetMixerFormat = func(mixer *Mixer, spec *sdl.AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetMixerFormat, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(spec)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(spec)
		return __r0
	}
	iLoadAudio_IO = func(mixer *Mixer, io *sdl.IOStream, predecode bool, closeio bool) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadAudio_IO, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(io)), puregogen.BoolToUintptr(predecode), puregogen.BoolToUintptr(closeio))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(io)
		return __r0
	}
	iLoadAudio = func(mixer *Mixer, path string, predecode bool) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadAudio, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), puregogen.BoolToUintptr(predecode))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(path)
		return __r0
	}
	iLoadAudioWithProperties = func(props sdl.PropertiesID) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadAudioWithProperties, uintptr(props))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iLoadRawAudio_IO = func(mixer *Mixer, io *sdl.IOStream, spec *sdl.AudioSpec, closeio bool) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadRawAudio_IO, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(io)), uintptr(unsafe.Pointer(spec)), puregogen.BoolToUintptr(closeio))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(io)
		runtime.KeepAlive(spec)
		return __r0
	}
	iLoadRawAudio = func(mixer *Mixer, data uintptr, datalen uintptr, spec *sdl.AudioSpec) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadRawAudio, uintptr(unsafe.Pointer(mixer)), uintptr(data), uintptr(datalen), uintptr(unsafe.Pointer(spec)))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(spec)
		return __r0
	}
	iLoadRawAudioNoCopy = func(mixer *Mixer, data uintptr, datalen uintptr, spec *sdl.AudioSpec, free_when_done bool) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_LoadRawAudioNoCopy, uintptr(unsafe.Pointer(mixer)), uintptr(data), uintptr(datalen), uintptr(unsafe.Pointer(spec)), puregogen.BoolToUintptr(free_when_done))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(spec)
		return __r0
	}
	purego.RegisterLibFunc(&iCreateSineWaveAudio, _hnd_mixer, "MIX_CreateSineWaveAudio")
	iGetAudioProperties = func(audio *Audio) sdl.PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioProperties, uintptr(unsafe.Pointer(audio)))
		__r0 := sdl.PropertiesID(_r0)
		runtime.KeepAlive(audio)
		return __r0
	}
	iGetAudioDuration = func(audio *Audio) int64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioDuration, uintptr(unsafe.Pointer(audio)))
		__r0 := int64(_r0)
		runtime.KeepAlive(audio)
		return __r0
	}
	iGetAudioFormat = func(audio *Audio, spec *sdl.AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioFormat, uintptr(unsafe.Pointer(audio)), uintptr(unsafe.Pointer(spec)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(audio)
		runtime.KeepAlive(spec)
		return __r0
	}
	iDestroyAudio = func(audio *Audio) {
		purego.SyscallN(_addr_MIX_DestroyAudio, uintptr(unsafe.Pointer(audio)))
		runtime.KeepAlive(audio)
	}
	iCreateTrack = func(mixer *Mixer) *Track {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateTrack, uintptr(unsafe.Pointer(mixer)))
		__r0 := (*Track)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		return __r0
	}
	iDestroyTrack = func(track *Track) {
		purego.SyscallN(_addr_MIX_DestroyTrack, uintptr(unsafe.Pointer(track)))
		runtime.KeepAlive(track)
	}
	iGetTrackProperties = func(track *Track) sdl.PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackProperties, uintptr(unsafe.Pointer(track)))
		__r0 := sdl.PropertiesID(_r0)
		runtime.KeepAlive(track)
		return __r0
	}
	iGetTrackMixer = func(track *Track) *Mixer {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackMixer, uintptr(unsafe.Pointer(track)))
		__r0 := (*Mixer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(track)
		return __r0
	}
	iSetTrackAudio = func(track *Track, audio *Audio) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackAudio, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(audio)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(audio)
		return __r0
	}
	iSetTrackAudioStream = func(track *Track, stream *sdl.AudioStream) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackAudioStream, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(stream)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(stream)
		return __r0
	}
	iSetTrackIOStream = func(track *Track, io *sdl.IOStream, closeio bool) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackIOStream, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(io)), puregogen.BoolToUintptr(closeio))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(io)
		return __r0
	}
	iTagTrack = func(track *Track, tag string) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TagTrack, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(tag)
		return __r0
	}
	iUntagTrack = func(track *Track, tag string) {
		purego.SyscallN(_addr_MIX_UntagTrack, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))))
		runtime.KeepAlive(track)
		runtime.KeepAlive(tag)
	}
	iSetTrackPlaybackPosition = func(track *Track, frames uint64) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackPlaybackPosition, uintptr(unsafe.Pointer(track)), uintptr(frames))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iGetTrackPlaybackPosition = func(track *Track) int64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackPlaybackPosition, uintptr(unsafe.Pointer(track)))
		__r0 := int64(_r0)
		runtime.KeepAlive(track)
		return __r0
	}
	iTrackLooping = func(track *Track) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TrackLooping, uintptr(unsafe.Pointer(track)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iGetTrackAudio = func(track *Track) *Audio {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackAudio, uintptr(unsafe.Pointer(track)))
		__r0 := (*Audio)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(track)
		return __r0
	}
	iGetTrackAudioStream = func(track *Track) *sdl.AudioStream {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackAudioStream, uintptr(unsafe.Pointer(track)))
		__r0 := (*sdl.AudioStream)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(track)
		return __r0
	}
	iGetTrackRemaining = func(track *Track) int64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrackRemaining, uintptr(unsafe.Pointer(track)))
		__r0 := int64(_r0)
		runtime.KeepAlive(track)
		return __r0
	}
	iTrackMSToFrames = func(track *Track, ms uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TrackMSToFrames, uintptr(unsafe.Pointer(track)), uintptr(ms))
		__r0 := uint64(_r0)
		runtime.KeepAlive(track)
		return __r0
	}
	iTrackFramesToMS = func(track *Track, frames uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TrackFramesToMS, uintptr(unsafe.Pointer(track)), uintptr(frames))
		__r0 := uint64(_r0)
		runtime.KeepAlive(track)
		return __r0
	}
	iAudioMSToFrames = func(audio *Audio, ms uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_AudioMSToFrames, uintptr(unsafe.Pointer(audio)), uintptr(ms))
		__r0 := uint64(_r0)
		runtime.KeepAlive(audio)
		return __r0
	}
	iAudioFramesToMS = func(audio *Audio, frames uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_AudioFramesToMS, uintptr(unsafe.Pointer(audio)), uintptr(frames))
		__r0 := uint64(_r0)
		runtime.KeepAlive(audio)
		return __r0
	}
	iMSToFrames = func(sample_rate int32, ms uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_MSToFrames, uintptr(sample_rate), uintptr(ms))
		__r0 := uint64(_r0)
		return __r0
	}
	iFramesToMS = func(sample_rate int32, frames uint64) uint64 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_FramesToMS, uintptr(sample_rate), uintptr(frames))
		__r0 := uint64(_r0)
		return __r0
	}
	iPlayTrack = func(track *Track, options sdl.PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PlayTrack, uintptr(unsafe.Pointer(track)), uintptr(options))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iPlayTag = func(mixer *Mixer, tag string, options sdl.PropertiesID) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PlayTag, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))), uintptr(options))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(tag)
		return __r0
	}
	iPlayAudio = func(mixer *Mixer, audio *Audio) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PlayAudio, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(audio)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(audio)
		return __r0
	}
	iStopTrack = func(track *Track, fade_out_frames int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_StopTrack, uintptr(unsafe.Pointer(track)), uintptr(fade_out_frames))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iStopAllTracks = func(mixer *Mixer, fade_out_ms int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_StopAllTracks, uintptr(unsafe.Pointer(mixer)), uintptr(fade_out_ms))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		return __r0
	}
	iStopTag = func(mixer *Mixer, tag string, fade_out_ms int64) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_StopTag, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))), uintptr(fade_out_ms))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(tag)
		return __r0
	}
	iPauseTrack = func(track *Track) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PauseTrack, uintptr(unsafe.Pointer(track)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iPauseAllTracks = func(mixer *Mixer) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PauseAllTracks, uintptr(unsafe.Pointer(mixer)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		return __r0
	}
	iPauseTag = func(mixer *Mixer, tag string) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_PauseTag, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(tag)
		return __r0
	}
	iResumeTrack = func(track *Track) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_ResumeTrack, uintptr(unsafe.Pointer(track)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iResumeAllTracks = func(mixer *Mixer) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_ResumeAllTracks, uintptr(unsafe.Pointer(mixer)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		return __r0
	}
	iResumeTag = func(mixer *Mixer, tag string) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_ResumeTag, uintptr(unsafe.Pointer(mixer)), uintptr(unsafe.Pointer(puregogen.BytePtrFromString(tag))))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		runtime.KeepAlive(tag)
		return __r0
	}
	iTrackPlaying = func(track *Track) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TrackPlaying, uintptr(unsafe.Pointer(track)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iTrackPaused = func(track *Track) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_TrackPaused, uintptr(unsafe.Pointer(track)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	purego.RegisterLibFunc(&iSetMasterGain, _hnd_mixer, "MIX_SetMasterGain")
	purego.RegisterLibFunc(&iGetMasterGain, _hnd_mixer, "MIX_GetMasterGain")
	purego.RegisterLibFunc(&iSetTrackGain, _hnd_mixer, "MIX_SetTrackGain")
	purego.RegisterLibFunc(&iGetTrackGain, _hnd_mixer, "MIX_GetTrackGain")
	purego.RegisterLibFunc(&iSetTagGain, _hnd_mixer, "MIX_SetTagGain")
	purego.RegisterLibFunc(&iSetTrackFrequencyRatio, _hnd_mixer, "MIX_SetTrackFrequencyRatio")
	purego.RegisterLibFunc(&iGetTrackFrequencyRatio, _hnd_mixer, "MIX_GetTrackFrequencyRatio")
	iSetTrackOutputChannelMap = func(track *Track, chmap *int32, count int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackOutputChannelMap, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(chmap)), uintptr(count))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(chmap)
		return __r0
	}
	iSetTrackStereo = func(track *Track, gains *StereoGains) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackStereo, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(gains)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(gains)
		return __r0
	}
	iSetTrack3DPosition = func(track *Track, position *Point3D) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrack3DPosition, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(position)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(position)
		return __r0
	}
	iGetTrack3DPosition = func(track *Track, position *Point3D) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetTrack3DPosition, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(position)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(position)
		return __r0
	}
	iCreateGroup = func(mixer *Mixer) *Group {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateGroup, uintptr(unsafe.Pointer(mixer)))
		__r0 := (*Group)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mixer)
		return __r0
	}
	iDestroyGroup = func(group *Group) {
		purego.SyscallN(_addr_MIX_DestroyGroup, uintptr(unsafe.Pointer(group)))
		runtime.KeepAlive(group)
	}
	iGetGroupProperties = func(group *Group) sdl.PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetGroupProperties, uintptr(unsafe.Pointer(group)))
		__r0 := sdl.PropertiesID(_r0)
		runtime.KeepAlive(group)
		return __r0
	}
	iGetGroupMixer = func(group *Group) *Mixer {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetGroupMixer, uintptr(unsafe.Pointer(group)))
		__r0 := (*Mixer)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(group)
		return __r0
	}
	iSetTrackGroup = func(track *Track, group *Group) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackGroup, uintptr(unsafe.Pointer(track)), uintptr(unsafe.Pointer(group)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		runtime.KeepAlive(group)
		return __r0
	}
	iSetTrackStoppedCallback = func(track *Track, cb TrackStoppedCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackStoppedCallback, uintptr(unsafe.Pointer(track)), uintptr(cb), uintptr(userdata))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iSetTrackRawCallback = func(track *Track, cb TrackMixCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackRawCallback, uintptr(unsafe.Pointer(track)), uintptr(cb), uintptr(userdata))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iSetTrackCookedCallback = func(track *Track, cb TrackMixCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetTrackCookedCallback, uintptr(unsafe.Pointer(track)), uintptr(cb), uintptr(userdata))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(track)
		return __r0
	}
	iSetGroupPostMixCallback = func(group *Group, cb GroupMixCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetGroupPostMixCallback, uintptr(unsafe.Pointer(group)), uintptr(cb), uintptr(userdata))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(group)
		return __r0
	}
	iSetPostMixCallback = func(mixer *Mixer, cb PostMixCallback, userdata uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_SetPostMixCallback, uintptr(unsafe.Pointer(mixer)), uintptr(cb), uintptr(userdata))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		return __r0
	}
	iGenerate = func(mixer *Mixer, buffer uintptr, buflen int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_Generate, uintptr(unsafe.Pointer(mixer)), uintptr(buffer), uintptr(buflen))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(mixer)
		return __r0
	}
	iCreateAudioDecoder = func(path string, props sdl.PropertiesID) *AudioDecoder {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateAudioDecoder, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))), uintptr(props))
		__r0 := (*AudioDecoder)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(path)
		return __r0
	}
	iCreateAudioDecoder_IO = func(io *sdl.IOStream, closeio bool, props sdl.PropertiesID) *AudioDecoder {
		_r0, _, _ := purego.SyscallN(_addr_MIX_CreateAudioDecoder_IO, uintptr(unsafe.Pointer(io)), puregogen.BoolToUintptr(closeio), uintptr(props))
		__r0 := (*AudioDecoder)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(io)
		return __r0
	}
	iDestroyAudioDecoder = func(audiodecoder *AudioDecoder) {
		purego.SyscallN(_addr_MIX_DestroyAudioDecoder, uintptr(unsafe.Pointer(audiodecoder)))
		runtime.KeepAlive(audiodecoder)
	}
	iGetAudioDecoderProperties = func(audiodecoder *AudioDecoder) sdl.PropertiesID {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioDecoderProperties, uintptr(unsafe.Pointer(audiodecoder)))
		__r0 := sdl.PropertiesID(_r0)
		runtime.KeepAlive(audiodecoder)
		return __r0
	}
	iGetAudioDecoderFormat = func(audiodecoder *AudioDecoder, spec *sdl.AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_MIX_GetAudioDecoderFormat, uintptr(unsafe.Pointer(audiodecoder)), uintptr(unsafe.Pointer(spec)))
		__r0 := uint8(_r0) != 0
		runtime.KeepAlive(audiodecoder)
		runtime.KeepAlive(spec)
		return __r0
	}
	iDecodeAudio = func(audiodecoder *AudioDecoder, buffer uintptr, buflen int32, spec *sdl.AudioSpec) int32 {
		_r0, _, _ := purego.SyscallN(_addr_MIX_DecodeAudio, uintptr(unsafe.Pointer(audiodecoder)), uintptr(buffer), uintptr(buflen), uintptr(unsafe.Pointer(spec)))
		__r0 := int32(_r0)
		runtime.KeepAlive(audiodecoder)
		runtime.KeepAlive(spec)
		return __r0
	}
}
